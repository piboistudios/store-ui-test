// Generated by Haxe 4.2.0
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var AppConfig = function() { };
AppConfig.__name__ = true;
AppConfig.get_data = function() {
	return AppConfig._inst;
};
AppConfig.init = function() {
	AppConfig._inst = new tink_json_Parser1().parse(js_node_Fs.readFileSync("./app.config.json",{ encoding : "utf8"}));
};
var DateTools = function() { };
DateTools.__name__ = true;
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new haxe_exceptions_NotImplementedException("Date.format %" + e + "- not implemented yet.",null,{ fileName : "DateTools.hx", lineNumber : 101, className : "DateTools", methodName : "__format_get"});
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len = f.length - p;
	r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Server = function() { };
Server.__name__ = true;
Server.main = function() {
	Server.NONCE = js_node_Fs.readFileSync("./secrets/nonce",{ encoding : "utf8"});
	Server.KEY = js_node_Fs.readFileSync("./secrets/privKey",{ encoding : "utf8"});
	Server.SECRET = haxe_crypto_Base64.decode(js_node_Fs.readFileSync("./secrets/dbPass",{ encoding : "utf8"}));
	AppConfig.init();
	var container = new tink_http_containers_NodeContainer(tink_http_containers__$NodeContainer_ServerKindBase.Port(8080));
	console.log("src/Server.hx:28:",new haxe_ds__$StringMap_StringMapKeyIterator(AppConfig.get_data().connectionStrings.h));
	var f = function(e) {
		console.log("src/Server.hx:37:","Error connecting to database: " + Std.string(e));
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	};
	tink_core_Future.flatMap(tink_core_Promise.next(dal_ProductDatabase.connect(AppConfig.get_data().connectionStrings.h["product"]),function(db) {
		var router = new tink_web_routing_Router0(new ProductsRouterBase(db));
		var this1 = container.run(new tink_http_SimpleHandler(function(req) {
			var this1 = router.route(tink_web_routing_Context.ofRequest(req));
			var f = tink_core_Recover.ofSync(tink_http_OutgoingResponse.reportError);
			return tink_core_Future.flatMap(this1,function(o) {
				switch(o._hx_index) {
				case 0:
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o.data));
				case 1:
					return f(o.failure);
				}
			});
		}));
		this1.eager();
		return tink_core_Future.map(this1,tink_core_Outcome.Success);
	}),function(o) {
		switch(o._hx_index) {
		case 0:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			return f(o.failure);
		}
	}).eager();
};
var ProductsRouterBase = function(db) {
	this.db = db;
};
ProductsRouterBase.__name__ = true;
ProductsRouterBase.prototype = {
	db: null
	,test_template: function() {
		var test = new views_TestView("Gabriel");
		test.friends = ["Chris","Shawn","Dalvin","Alejandro"];
		return test.renderTest();
	}
	,get_content: function(content) {
		var path = "./dist/" + encodeURIComponent(content);
		if(!sys_FileSystem.exists(path)) {
			return tink_web_routing_Response.textual(404,"text/plain","Not Found");
		}
		return tink_web_routing_Response.ofRealSource(asys_io_File.readStream(path),mime_Mime.lookup(content));
	}
	,crappy_server_pages_sub: function() {
		return new CrappyServerPagesRouter(this.db);
	}
	,beautiful_rest_api: function() {
		return new BeautifulRestApi(this.db);
	}
	,__class__: ProductsRouterBase
};
var BeautifulRestApi = function(db) {
	ProductsRouterBase.call(this,db);
};
BeautifulRestApi.__name__ = true;
BeautifulRestApi.__super__ = ProductsRouterBase;
BeautifulRestApi.prototype = $extend(ProductsRouterBase.prototype,{
	getProducts: function(skip,limit) {
		return dal_ProductDatabase.collection(this.db,"products").slice(skip,skip + limit);
	}
	,__class__: BeautifulRestApi
});
var CrappyServerPagesRouter = function(db) {
	ProductsRouterBase.call(this,db);
};
CrappyServerPagesRouter.__name__ = true;
CrappyServerPagesRouter.__super__ = ProductsRouterBase;
CrappyServerPagesRouter.prototype = $extend(ProductsRouterBase.prototype,{
	get_numPages: function() {
		return Math.ceil(dal_ProductDatabase.collection(this.db,"products").length / 20);
	}
	,get_pageStart: function() {
		return 1;
	}
	,get_pageEnd: function() {
		return 5;
	}
	,products_view: function(page) {
		return new views_ProductIndexView({ page : page, pageStart : this.get_pageStart(), pageEnd : this.get_pageEnd(), numPages : this.get_numPages()}).render();
	}
	,products_list_view: function(page) {
		return new views_ProductListView(dal_ProductDatabase.collection(this.db,"products").slice((page - 1) * CrappyServerPagesRouter.PRODUCTS_PER_PAGE,page * CrappyServerPagesRouter.PRODUCTS_PER_PAGE)).render();
	}
	,__class__: CrappyServerPagesRouter
});
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b = "" + (s == null ? "null" : "" + s);
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__:true,__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
Type.__name__ = true;
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var asys_io_File = function() { };
asys_io_File.__name__ = true;
asys_io_File.readStream = function(path,binary) {
	if(binary == null) {
		binary = true;
	}
	var r = js_node_Fs.createReadStream(path);
	var options = null;
	options = { };
	return tink_io_nodejs_NodejsSource.wrap("asys read stream",r,options.chunkSize,options.onEnd);
};
asys_io_File.writeStream = function(path,binary) {
	if(binary == null) {
		binary = true;
	}
	return tink_io_nodejs_NodejsSink.wrap("asys write stream",js_node_Fs.createWriteStream(path));
};
asys_io_File.getContent = function(path) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.readFile(path,"utf8",function(err,data) {
		trigger.trigger(err == null ? tink_core_Outcome.Success(data) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 42, className : "asys.io.File", methodName : "getContent"})));
	});
	return trigger;
};
asys_io_File.saveContent = function(path,content) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.writeFile(path,content,"utf8",function(err) {
		trigger.trigger(err == null ? tink_core_Outcome.Success(null) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 53, className : "asys.io.File", methodName : "saveContent"})));
	});
	return trigger;
};
asys_io_File.getBytes = function(path) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.readFile(path,function(err,buffer) {
		trigger.trigger(err == null ? tink_core_Outcome.Success(js_node_buffer__$Buffer_Helper.bytesOfBuffer(buffer)) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 64, className : "asys.io.File", methodName : "getBytes"})));
	});
	return trigger;
};
asys_io_File.saveBytes = function(path,bytes) {
	var trigger = new tink_core_FutureTrigger();
	var data = bytes.b;
	js_node_Fs.writeFile(path,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,bytes.length),function(err) {
		trigger.trigger(err == null ? tink_core_Outcome.Success(null) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 75, className : "asys.io.File", methodName : "saveBytes"})));
	});
	return trigger;
};
asys_io_File.read = function(path,binary) {
	if(binary == null) {
		binary = true;
	}
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.open(path,"r",function(err,fd) {
		trigger.trigger(err == null ? tink_core_Outcome.Success(new sys_io_FileInput(fd)) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 86, className : "asys.io.File", methodName : "read"})));
	});
	return trigger;
};
asys_io_File.write = function(path,binary) {
	if(binary == null) {
		binary = true;
	}
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.open(path,"w",function(err,fd) {
		trigger.trigger(err == null ? tink_core_Outcome.Success(new sys_io_FileOutput(fd)) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 97, className : "asys.io.File", methodName : "write"})));
	});
	return trigger;
};
asys_io_File.append = function(path,binary) {
	if(binary == null) {
		binary = true;
	}
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.open(path,"a",function(err,fd) {
		trigger.trigger(err == null ? tink_core_Outcome.Success(new sys_io_FileOutput(fd)) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 108, className : "asys.io.File", methodName : "append"})));
	});
	return trigger;
};
asys_io_File.copy = function(srcPath,dstPath) {
	var trigger = new tink_core_FutureTrigger();
	var called = false;
	var done = function(err) {
		if(called) {
			return;
		}
		trigger.trigger(err == null ? tink_core_Outcome.Success(null) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 121, className : "asys.io.File", methodName : "copy"})));
		called = true;
	};
	var rd = js_node_Fs.createReadStream(srcPath);
	rd.on("error",done);
	var wr = js_node_Fs.createWriteStream(dstPath);
	wr.on("error",done);
	wr.on("close",function(ex) {
		done();
	});
	rd.pipe(wr);
	return trigger;
};
var dal_ProductDatabase = {};
dal_ProductDatabase._new = function(file) {
	return new tink_json_Parser0().parse(js_node_Fs.readFileSync(file,{ encoding : "utf8"}));
};
dal_ProductDatabase.collection = function(this1,collectionName) {
	var matchedCollection = Lambda.find(this1.collections,function(c) {
		return c.name == collectionName;
	});
	if(matchedCollection != null) {
		return matchedCollection._data;
	} else {
		return null;
	}
};
dal_ProductDatabase.connect = function(cnxStr) {
	dal_ProductDatabase.authenticate(dal_ConnectionString.mapAccess(cnxStr,"uid"),dal_ConnectionString.mapAccess(cnxStr,"pwd"));
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(dal_ProductDatabase._new(dal_ConnectionString.mapAccess(cnxStr,"server")))));
};
dal_ProductDatabase.authenticate = function(username,password) {
	if(username != "gabe4haxelang") {
		throw haxe_Exception.thrown("user not found");
	}
	console.log("src/dal/Db.hx:41:",Server.KEY);
	console.log("src/dal/Db.hx:42:",Server.NONCE);
	var decrypted = security_CryptoProvider.decrypt(Server.SECRET,Server.KEY,Server.NONCE).toString();
	console.log("src/dal/Db.hx:44:",decrypted);
	console.log("src/dal/Db.hx:45:",password);
	if(decrypted != password) {
		throw haxe_Exception.thrown("password invalid");
	}
};
var dal_ConnectionString = {};
dal_ConnectionString.get_props = function(this1) {
	var _this = this1.split(";");
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = _this[i].split("=");
	}
	var result1 = new Array(result.length);
	var _g = 0;
	var _g1 = result.length;
	while(_g < _g1) {
		var i = _g++;
		var pair = result[i];
		result1[i] = new tink_core_MPair(pair[0],pair[1]);
	}
	var map = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < result1.length) {
		var kvp = result1[_g];
		++_g;
		map.h[kvp.a] = kvp.b;
	}
	return map;
};
dal_ConnectionString.mapAccess = function(this1,key) {
	return dal_ConnectionString.get_props(this1).h[key];
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:true,__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,exists: null
	,keys: null
	,iterator: null
	,__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Int32 = {};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = true;
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var code1 = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) chars.push(HxOverrides.cca(str,_g++));
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var c = this.b[_g++];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) tbl[_g++] = -1;
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Salsa20 = function(rounds) {
	if(rounds == null) {
		rounds = 20;
	}
	this.rounds = 20;
	this.state = new Array(16);
	this.sigmas = haxe_crypto_Salsa20.sigmas_array.slice(0);
	this.counter = new haxe__$Int64__$_$_$Int64(0,0);
	this.rounds = rounds;
};
haxe_crypto_Salsa20.__name__ = true;
haxe_crypto_Salsa20.rol32 = function(x,n) {
	return x << n | x >>> 32 - n;
};
haxe_crypto_Salsa20.prototype = {
	counter: null
	,state: null
	,sigmas: null
	,index: null
	,rounds: null
	,init: function(key,nonce) {
		if(nonce == null || nonce.length != 8) {
			throw haxe_Exception.thrown("Nonce must be exactly 8 bytes");
		}
		if(key == null) {
			throw haxe_Exception.thrown("Key must be 16 or 32 bytes");
		}
		if(key.length != 16 && key.length != 32) {
			throw haxe_Exception.thrown("Wrong key size");
		}
		this.setConstant(key);
		this.setNonce(nonce);
		this.setKey(key);
		this.reset();
	}
	,setConstant: function(key) {
		var sigmaOffset = key.length == 16 ? 0 : 4;
		this.state[0] = this.sigmas[sigmaOffset];
		this.state[5] = this.sigmas[sigmaOffset + 1];
		this.state[10] = this.sigmas[sigmaOffset + 2];
		this.state[15] = this.sigmas[sigmaOffset + 3];
	}
	,setKey: function(key) {
		if(key.length == 16) {
			this.state[1] = this.state[11] = this.bytesToInt32(key,0);
			this.state[2] = this.state[12] = this.bytesToInt32(key,4);
			this.state[3] = this.state[13] = this.bytesToInt32(key,8);
			this.state[4] = this.state[14] = this.bytesToInt32(key,12);
		} else {
			this.state[1] = this.bytesToInt32(key,0);
			this.state[11] = this.bytesToInt32(key,16);
			this.state[2] = this.bytesToInt32(key,4);
			this.state[12] = this.bytesToInt32(key,20);
			this.state[3] = this.bytesToInt32(key,8);
			this.state[13] = this.bytesToInt32(key,24);
			this.state[4] = this.bytesToInt32(key,12);
			this.state[14] = this.bytesToInt32(key,28);
		}
	}
	,setNonce: function(nonce) {
		this.state[6] = this.bytesToInt32(nonce,0);
		this.state[7] = this.bytesToInt32(nonce,4);
	}
	,reset: function() {
		this.index = 0;
		this.resetCounter();
		this.generateExpandBlock();
	}
	,resetCounter: function() {
		this.counter = new haxe__$Int64__$_$_$Int64(0,0);
		this.state[9] = 0;
		this.state[8] = 0;
	}
	,updateCounterState: function() {
		this.state[8] = this.counter.low;
		this.state[9] = this.counter.high;
	}
	,increaseCounter: function(num) {
		var a = this.counter;
		var high = a.high + num.high | 0;
		var low = a.low + num.low | 0;
		if(haxe_Int32.ucompare(low,a.low) < 0) {
			++high;
			high = high | 0;
		}
		this.counter = new haxe__$Int64__$_$_$Int64(high,low);
		this.updateCounterState();
	}
	,decreaseCounter: function(num) {
		var a = this.counter;
		var high = a.high - num.high | 0;
		if(haxe_Int32.ucompare(a.low,num.low) < 0) {
			--high;
			high = high | 0;
		}
		this.counter = new haxe__$Int64__$_$_$Int64(high,a.low - num.low | 0);
		this.updateCounterState();
	}
	,getPosition: function() {
		var a = this.counter;
		var b_low = 64;
		var al = a.low & 65535;
		var ah = a.low >>> 16;
		var bl = b_low & 65535;
		var bh = b_low >>> 16;
		var p00 = haxe_Int32._mul(al,bl);
		var p10 = haxe_Int32._mul(ah,bl);
		var p01 = haxe_Int32._mul(al,bh);
		var low = p00;
		var high = (haxe_Int32._mul(ah,bh) + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 <<= 16;
		low = p00 + p01 | 0;
		if(haxe_Int32.ucompare(low,p01) < 0) {
			++high;
			high = high | 0;
		}
		p10 <<= 16;
		low = low + p10 | 0;
		if(haxe_Int32.ucompare(low,p10) < 0) {
			++high;
			high = high | 0;
		}
		high = high + (haxe_Int32._mul(a.low,0) + haxe_Int32._mul(a.high,b_low) | 0) | 0;
		var a_low = low;
		var x = this.index;
		var high1 = high + (x >> 31) | 0;
		var low = a_low + x | 0;
		if(haxe_Int32.ucompare(low,a_low) < 0) {
			++high1;
			high1 = high1 | 0;
		}
		return new haxe__$Int64__$_$_$Int64(high1,low);
	}
	,seek: function(position) {
		this.reset();
		this.skip(position);
	}
	,skip: function(numBytes) {
		var v = numBytes.high - 0 | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(numBytes.low,0);
		}
		if((numBytes.high < 0 ? -1 : v) >= 0) {
			var remaining = numBytes;
			var v = numBytes.high - 0 | 0;
			if(v == 0) {
				v = haxe_Int32.ucompare(numBytes.low,64);
			}
			if((numBytes.high < 0 ? -1 : v) >= 0) {
				var count = new haxe__$Int64__$_$_$Int64(numBytes.high >> 6,numBytes.high << 26 | numBytes.low >>> 6);
				this.increaseCounter(count);
				var b_low = 64;
				var al = count.low & 65535;
				var ah = count.low >>> 16;
				var bl = b_low & 65535;
				var bh = b_low >>> 16;
				var p00 = haxe_Int32._mul(al,bl);
				var p10 = haxe_Int32._mul(ah,bl);
				var p01 = haxe_Int32._mul(al,bh);
				var low = p00;
				var high = (haxe_Int32._mul(ah,bh) + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
				p01 <<= 16;
				low = p00 + p01 | 0;
				if(haxe_Int32.ucompare(low,p01) < 0) {
					++high;
					high = high | 0;
				}
				p10 <<= 16;
				low = low + p10 | 0;
				if(haxe_Int32.ucompare(low,p10) < 0) {
					++high;
					high = high | 0;
				}
				high = high + (haxe_Int32._mul(count.low,0) + haxe_Int32._mul(count.high,b_low) | 0) | 0;
				var b_low = low;
				var high1 = numBytes.high - high | 0;
				if(haxe_Int32.ucompare(numBytes.low,b_low) < 0) {
					--high1;
					high1 = high1 | 0;
				}
				remaining = new haxe__$Int64__$_$_$Int64(high1,numBytes.low - b_low | 0);
			}
			var previousIndex = this.index;
			var x = this.index;
			var a_low = x;
			var high = (x >> 31) + remaining.high | 0;
			var low = a_low + remaining.low | 0;
			if(haxe_Int32.ucompare(low,a_low) < 0) {
				++high;
				high = high | 0;
			}
			var low1 = low & 63;
			if((high & 0) != low1 >> 31) {
				throw haxe_Exception.thrown("Overflow");
			}
			this.index = low1;
			if(this.index < previousIndex) {
				this.increaseCounter(new haxe__$Int64__$_$_$Int64(0,1));
			}
		} else {
			var high = ~numBytes.high;
			var low = ~numBytes.low + 1 | 0;
			if(low == 0) {
				++high;
				high = high | 0;
			}
			var remaining = new haxe__$Int64__$_$_$Int64(high,low);
			var v = remaining.high - 0 | 0;
			if(v == 0) {
				v = haxe_Int32.ucompare(remaining.low,64);
			}
			if((remaining.high < 0 ? -1 : v) >= 0) {
				var count = new haxe__$Int64__$_$_$Int64(remaining.high >> 6,remaining.high << 26 | remaining.low >>> 6);
				this.decreaseCounter(count);
				var b_low = 64;
				var al = count.low & 65535;
				var ah = count.low >>> 16;
				var bl = b_low & 65535;
				var bh = b_low >>> 16;
				var p00 = haxe_Int32._mul(al,bl);
				var p10 = haxe_Int32._mul(ah,bl);
				var p01 = haxe_Int32._mul(al,bh);
				var low = p00;
				var high = (haxe_Int32._mul(ah,bh) + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
				p01 <<= 16;
				low = p00 + p01 | 0;
				if(haxe_Int32.ucompare(low,p01) < 0) {
					++high;
					high = high | 0;
				}
				p10 <<= 16;
				low = low + p10 | 0;
				if(haxe_Int32.ucompare(low,p10) < 0) {
					++high;
					high = high | 0;
				}
				high = high + (haxe_Int32._mul(count.low,0) + haxe_Int32._mul(count.high,b_low) | 0) | 0;
				var b_low = low;
				var high1 = remaining.high - high | 0;
				if(haxe_Int32.ucompare(remaining.low,b_low) < 0) {
					--high1;
					high1 = high1 | 0;
				}
				remaining = new haxe__$Int64__$_$_$Int64(high1,remaining.low - b_low | 0);
			}
			var i = new haxe__$Int64__$_$_$Int64(0,0);
			while(true) {
				var v = i.high - remaining.high | 0;
				if(v == 0) {
					v = haxe_Int32.ucompare(i.low,remaining.low);
				}
				if(!((i.high < 0 ? remaining.high < 0 ? v : -1 : remaining.high >= 0 ? v : 1) < 0)) {
					break;
				}
				if(this.index == 0) {
					this.decreaseCounter(new haxe__$Int64__$_$_$Int64(0,1));
				}
				this.index = this.index - 1 & 63;
				i = new haxe__$Int64__$_$_$Int64(i.high,i.low);
				i.low++;
				i.low = i.low | 0;
				if(i.low == 0) {
					i.high++;
					i.high = i.high | 0;
				}
			}
		}
		this.generateExpandBlock();
	}
	,getCounter: function() {
		return this.counter;
	}
	,encrypt: function(data,rounds) {
		if(rounds == null) {
			rounds = 20;
		}
		var output = new haxe_io_Bytes(new ArrayBuffer(data.length));
		var _g = 0;
		var _g1 = data.length;
		while(_g < _g1) {
			var i = _g++;
			output.b[i] = haxe_crypto_Salsa20.expandState.b[this.index] ^ data.b[i];
			this.index = this.index + 1 & 63;
			if(this.index == 0) {
				this.increaseCounter(new haxe__$Int64__$_$_$Int64(0,1));
				this.generateExpandBlock();
			}
		}
		return output;
	}
	,decrypt: function(data,rounds) {
		if(rounds == null) {
			rounds = 20;
		}
		return this.encrypt(data,rounds);
	}
	,generateExpandBlock: function() {
		this.generateBlock(this.state,haxe_crypto_Salsa20.buffer,this.rounds);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[0],haxe_crypto_Salsa20.expandState,0);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[1],haxe_crypto_Salsa20.expandState,4);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[2],haxe_crypto_Salsa20.expandState,8);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[3],haxe_crypto_Salsa20.expandState,12);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[4],haxe_crypto_Salsa20.expandState,16);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[5],haxe_crypto_Salsa20.expandState,20);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[6],haxe_crypto_Salsa20.expandState,24);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[7],haxe_crypto_Salsa20.expandState,28);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[8],haxe_crypto_Salsa20.expandState,32);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[9],haxe_crypto_Salsa20.expandState,36);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[10],haxe_crypto_Salsa20.expandState,40);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[11],haxe_crypto_Salsa20.expandState,44);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[12],haxe_crypto_Salsa20.expandState,48);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[13],haxe_crypto_Salsa20.expandState,52);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[14],haxe_crypto_Salsa20.expandState,56);
		this.int32ToBytes(haxe_crypto_Salsa20.buffer[15],haxe_crypto_Salsa20.expandState,60);
	}
	,generateBlock: function(input,output,rounds,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(rounds == null) {
			rounds = 20;
		}
		if((rounds & 1) != 0) {
			throw haxe_Exception.thrown("Rounds should be a positive, even number");
		}
		if(offset + 16 > output.length || input.length != 16) {
			throw haxe_Exception.thrown("Invalid buffer size");
		}
		var x0 = input[0];
		var x1 = input[1];
		var x2 = input[2];
		var x3 = input[3];
		var x4 = input[4];
		var x5 = input[5];
		var x6 = input[6];
		var x7 = input[7];
		var x8 = input[8];
		var x9 = input[9];
		var x10 = input[10];
		var x11 = input[11];
		var x12 = input[12];
		var x13 = input[13];
		var x14 = input[14];
		var x15 = input[15];
		var h = rounds >> 1;
		var _g = 0;
		while(_g < h) {
			++_g;
			var x = x0 + x12;
			x4 ^= x << 7 | x >>> 25;
			var x16 = x4 + x0;
			x8 ^= x16 << 9 | x16 >>> 23;
			var x17 = x8 + x4;
			x12 ^= x17 << 13 | x17 >>> 19;
			var x18 = x12 + x8;
			x0 ^= x18 << 18 | x18 >>> 14;
			var x19 = x5 + x1;
			x9 ^= x19 << 7 | x19 >>> 25;
			var x20 = x9 + x5;
			x13 ^= x20 << 9 | x20 >>> 23;
			var x21 = x13 + x9;
			x1 ^= x21 << 13 | x21 >>> 19;
			var x22 = x1 + x13;
			x5 ^= x22 << 18 | x22 >>> 14;
			var x23 = x10 + x6;
			x14 ^= x23 << 7 | x23 >>> 25;
			var x24 = x14 + x10;
			x2 ^= x24 << 9 | x24 >>> 23;
			var x25 = x2 + x14;
			x6 ^= x25 << 13 | x25 >>> 19;
			var x26 = x6 + x2;
			x10 ^= x26 << 18 | x26 >>> 14;
			var x27 = x15 + x11;
			x3 ^= x27 << 7 | x27 >>> 25;
			var x28 = x3 + x15;
			x7 ^= x28 << 9 | x28 >>> 23;
			var x29 = x7 + x3;
			x11 ^= x29 << 13 | x29 >>> 19;
			var x30 = x11 + x7;
			x15 ^= x30 << 18 | x30 >>> 14;
			var x31 = x0 + x3;
			x1 ^= x31 << 7 | x31 >>> 25;
			var x32 = x1 + x0;
			x2 ^= x32 << 9 | x32 >>> 23;
			var x33 = x2 + x1;
			x3 ^= x33 << 13 | x33 >>> 19;
			var x34 = x3 + x2;
			x0 ^= x34 << 18 | x34 >>> 14;
			var x35 = x5 + x4;
			x6 ^= x35 << 7 | x35 >>> 25;
			var x36 = x6 + x5;
			x7 ^= x36 << 9 | x36 >>> 23;
			var x37 = x7 + x6;
			x4 ^= x37 << 13 | x37 >>> 19;
			var x38 = x4 + x7;
			x5 ^= x38 << 18 | x38 >>> 14;
			var x39 = x10 + x9;
			x11 ^= x39 << 7 | x39 >>> 25;
			var x40 = x11 + x10;
			x8 ^= x40 << 9 | x40 >>> 23;
			var x41 = x8 + x11;
			x9 ^= x41 << 13 | x41 >>> 19;
			var x42 = x9 + x8;
			x10 ^= x42 << 18 | x42 >>> 14;
			var x43 = x15 + x14;
			x12 ^= x43 << 7 | x43 >>> 25;
			var x44 = x12 + x15;
			x13 ^= x44 << 9 | x44 >>> 23;
			var x45 = x13 + x12;
			x14 ^= x45 << 13 | x45 >>> 19;
			var x46 = x14 + x13;
			x15 ^= x46 << 18 | x46 >>> 14;
		}
		output[offset] = x0 + input[0];
		output[offset + 1] = x1 + input[1];
		output[offset + 2] = x2 + input[2];
		output[offset + 3] = x3 + input[3];
		output[offset + 4] = x4 + input[4];
		output[offset + 5] = x5 + input[5];
		output[offset + 6] = x6 + input[6];
		output[offset + 7] = x7 + input[7];
		output[offset + 8] = x8 + input[8];
		output[offset + 9] = x9 + input[9];
		output[offset + 10] = x10 + input[10];
		output[offset + 11] = x11 + input[11];
		output[offset + 12] = x12 + input[12];
		output[offset + 13] = x13 + input[13];
		output[offset + 14] = x14 + input[14];
		output[offset + 15] = x15 + input[15];
	}
	,int32ToBytes: function(n,bs,off) {
		bs.b[off] = n;
		bs.b[++off] = n >>> 8;
		bs.b[++off] = n >>> 16;
		bs.b[++off] = n >>> 24;
	}
	,bytesToInt32: function(bs,off) {
		var n = bs.b[off];
		n |= bs.b[++off] << 8;
		n |= bs.b[++off] << 16;
		n |= bs.b[++off] << 24;
		return n;
	}
	,__class__: haxe_crypto_Salsa20
};
var haxe_crypto_ChaCha = function(rounds) {
	haxe_crypto_Salsa20.call(this,rounds);
};
haxe_crypto_ChaCha.__name__ = true;
haxe_crypto_ChaCha.rol32 = function(x,n) {
	return x << n | x >>> 32 - n;
};
haxe_crypto_ChaCha.__super__ = haxe_crypto_Salsa20;
haxe_crypto_ChaCha.prototype = $extend(haxe_crypto_Salsa20.prototype,{
	setConstant: function(key) {
		var sigmaOffset = key.length == 16 ? 0 : 4;
		this.state[0] = this.sigmas[sigmaOffset];
		this.state[1] = this.sigmas[sigmaOffset + 1];
		this.state[2] = this.sigmas[sigmaOffset + 2];
		this.state[3] = this.sigmas[sigmaOffset + 3];
	}
	,resetCounter: function() {
		this.counter = new haxe__$Int64__$_$_$Int64(0,0);
		this.state[13] = 0;
		this.state[12] = 0;
	}
	,updateCounterState: function() {
		this.state[12] = this.counter.low;
		this.state[13] = this.counter.high;
	}
	,setKey: function(key) {
		if(key.length == 16) {
			this.state[4] = this.state[8] = this.bytesToInt32(key,0);
			this.state[5] = this.state[9] = this.bytesToInt32(key,4);
			this.state[6] = this.state[10] = this.bytesToInt32(key,8);
			this.state[7] = this.state[11] = this.bytesToInt32(key,12);
		} else {
			this.state[4] = this.bytesToInt32(key,0);
			this.state[8] = this.bytesToInt32(key,16);
			this.state[5] = this.bytesToInt32(key,4);
			this.state[9] = this.bytesToInt32(key,20);
			this.state[6] = this.bytesToInt32(key,8);
			this.state[10] = this.bytesToInt32(key,24);
			this.state[7] = this.bytesToInt32(key,12);
			this.state[11] = this.bytesToInt32(key,28);
		}
	}
	,setNonce: function(nonce) {
		this.state[14] = this.bytesToInt32(nonce,0);
		this.state[15] = this.bytesToInt32(nonce,4);
	}
	,generateBlock: function(input,output,rounds,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(rounds == null) {
			rounds = 20;
		}
		if((rounds & 1) != 0) {
			throw haxe_Exception.thrown("Rounds should be a positive, even number");
		}
		if(output.length != 16 || input.length != 16) {
			throw haxe_Exception.thrown("Invalid buffer size");
		}
		var x0 = input[0];
		var x1 = input[1];
		var x2 = input[2];
		var x3 = input[3];
		var x4 = input[4];
		var x5 = input[5];
		var x6 = input[6];
		var x7 = input[7];
		var x8 = input[8];
		var x9 = input[9];
		var x10 = input[10];
		var x11 = input[11];
		var x12 = input[12];
		var x13 = input[13];
		var x14 = input[14];
		var x15 = input[15];
		var h = rounds >> 1;
		var _g = 0;
		while(_g < h) {
			++_g;
			x0 += x4;
			var x = x12 ^ x0;
			x12 = x << 16 | x >>> 16;
			x8 += x12;
			var x16 = x4 ^ x8;
			x4 = x16 << 12 | x16 >>> 20;
			x0 += x4;
			var x17 = x12 ^ x0;
			x12 = x17 << 8 | x17 >>> 24;
			x8 += x12;
			var x18 = x4 ^ x8;
			x4 = x18 << 7 | x18 >>> 25;
			x1 += x5;
			var x19 = x13 ^ x1;
			x13 = x19 << 16 | x19 >>> 16;
			x9 += x13;
			var x20 = x5 ^ x9;
			x5 = x20 << 12 | x20 >>> 20;
			x1 += x5;
			var x21 = x13 ^ x1;
			x13 = x21 << 8 | x21 >>> 24;
			x9 += x13;
			var x22 = x5 ^ x9;
			x5 = x22 << 7 | x22 >>> 25;
			x2 += x6;
			var x23 = x14 ^ x2;
			x14 = x23 << 16 | x23 >>> 16;
			x10 += x14;
			var x24 = x6 ^ x10;
			x6 = x24 << 12 | x24 >>> 20;
			x2 += x6;
			var x25 = x14 ^ x2;
			x14 = x25 << 8 | x25 >>> 24;
			x10 += x14;
			var x26 = x6 ^ x10;
			x6 = x26 << 7 | x26 >>> 25;
			x3 += x7;
			var x27 = x15 ^ x3;
			x15 = x27 << 16 | x27 >>> 16;
			x11 += x15;
			var x28 = x7 ^ x11;
			x7 = x28 << 12 | x28 >>> 20;
			x3 += x7;
			var x29 = x15 ^ x3;
			x15 = x29 << 8 | x29 >>> 24;
			x11 += x15;
			var x30 = x7 ^ x11;
			x7 = x30 << 7 | x30 >>> 25;
			x0 += x5;
			var x31 = x15 ^ x0;
			x15 = x31 << 16 | x31 >>> 16;
			x10 += x15;
			var x32 = x5 ^ x10;
			x5 = x32 << 12 | x32 >>> 20;
			x0 += x5;
			var x33 = x15 ^ x0;
			x15 = x33 << 8 | x33 >>> 24;
			x10 += x15;
			var x34 = x5 ^ x10;
			x5 = x34 << 7 | x34 >>> 25;
			x1 += x6;
			var x35 = x12 ^ x1;
			x12 = x35 << 16 | x35 >>> 16;
			x11 += x12;
			var x36 = x6 ^ x11;
			x6 = x36 << 12 | x36 >>> 20;
			x1 += x6;
			var x37 = x12 ^ x1;
			x12 = x37 << 8 | x37 >>> 24;
			x11 += x12;
			var x38 = x6 ^ x11;
			x6 = x38 << 7 | x38 >>> 25;
			x2 += x7;
			var x39 = x13 ^ x2;
			x13 = x39 << 16 | x39 >>> 16;
			x8 += x13;
			var x40 = x7 ^ x8;
			x7 = x40 << 12 | x40 >>> 20;
			x2 += x7;
			var x41 = x13 ^ x2;
			x13 = x41 << 8 | x41 >>> 24;
			x8 += x13;
			var x42 = x7 ^ x8;
			x7 = x42 << 7 | x42 >>> 25;
			x3 += x4;
			var x43 = x14 ^ x3;
			x14 = x43 << 16 | x43 >>> 16;
			x9 += x14;
			var x44 = x4 ^ x9;
			x4 = x44 << 12 | x44 >>> 20;
			x3 += x4;
			var x45 = x14 ^ x3;
			x14 = x45 << 8 | x45 >>> 24;
			x9 += x14;
			var x46 = x4 ^ x9;
			x4 = x46 << 7 | x46 >>> 25;
		}
		output[0] = x0 + input[0];
		output[1] = x1 + input[1];
		output[2] = x2 + input[2];
		output[3] = x3 + input[3];
		output[4] = x4 + input[4];
		output[5] = x5 + input[5];
		output[6] = x6 + input[6];
		output[7] = x7 + input[7];
		output[8] = x8 + input[8];
		output[9] = x9 + input[9];
		output[10] = x10 + input[10];
		output[11] = x11 + input[11];
		output[12] = x12 + input[12];
		output[13] = x13 + input[13];
		output[14] = x14 + input[14];
		output[15] = x15 + input[15];
	}
	,__class__: haxe_crypto_ChaCha
});
var haxe_crypto_Sha256 = function() {
};
haxe_crypto_Sha256.__name__ = true;
haxe_crypto_Sha256.encode = function(s,encoding) {
	var sh = new haxe_crypto_Sha256();
	var data = haxe_io_Bytes.ofString(s,encoding);
	var nblk = data.length * 8;
	return sh.hex(sh.doEncode(haxe_crypto_Sha256.str2blks(data),nblk));
};
haxe_crypto_Sha256.make = function(b) {
	var h = new haxe_crypto_Sha256().doEncode(haxe_crypto_Sha256.bytes2blks(b),b.length * 8);
	var out = new haxe_io_Bytes(new ArrayBuffer(32));
	var p = 0;
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		out.b[p++] = h[i] >>> 24;
		out.b[p++] = h[i] >> 16 & 255;
		out.b[p++] = h[i] >> 8 & 255;
		out.b[p++] = h[i] & 255;
	}
	return out;
};
haxe_crypto_Sha256.str2blks = function(data) {
	var nblk = data.length;
	data = haxe_crypto_padding_BitPadding.pad(data,8);
	var blksLenght = data.length >> 2;
	blksLenght += 16 - blksLenght % 16;
	var blks = new Array(blksLenght);
	var i = 0;
	var pos = 0;
	while(i < data.length) {
		blks[pos] = haxe_crypto_Sha256.bytesToInt(data,i);
		i += 4;
		++pos;
	}
	var padding = 16 - pos % 16;
	var _g = 0;
	while(_g < padding) {
		++_g;
		blks[pos] = 0;
		++pos;
	}
	blks[blks.length - 1] = nblk * 8;
	return blks;
};
haxe_crypto_Sha256.bytesToInt = function(bs,off) {
	var n = bs.b[off] << 24;
	n |= bs.b[++off] << 16;
	n |= bs.b[++off] << 8;
	n |= bs.b[++off];
	return n;
};
haxe_crypto_Sha256.bytes2blks = function(b) {
	var nblk = (b.length + 8 >> 6) + 1;
	var blks = new Array(nblk * 16);
	var _g = 0;
	var _g1 = nblk * 16;
	while(_g < _g1) blks[_g++] = 0;
	var _g = 0;
	var _g1 = b.length;
	while(_g < _g1) {
		var i = _g++;
		blks[i >> 2] |= b.b[i] << 24 - ((i & 3) << 3);
	}
	var i = b.length;
	blks[i >> 2] |= 128 << 24 - ((i & 3) << 3);
	blks[nblk * 16 - 1] = b.length * 8;
	return blks;
};
haxe_crypto_Sha256.prototype = {
	doEncode: function(m,l) {
		var K = [1116352408,1899447441,-1245643825,-373957723,961987163,1508970993,-1841331548,-1424204075,-670586216,310598401,607225278,1426881987,1925078388,-2132889090,-1680079193,-1046744716,-459576895,-272742522,264347078,604807628,770255983,1249150122,1555081692,1996064986,-1740746414,-1473132947,-1341970488,-1084653625,-958395405,-710438585,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,-2117940946,-1838011259,-1564481375,-1474664885,-1035236496,-949202525,-778901479,-694614492,-200395387,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,-2067236844,-1933114872,-1866530822,-1538233109,-1090935817,-965641998].slice(0);
		var HASH = [1779033703,-1150833019,1013904242,-1521486534,1359893119,-1694144372,528734635,1541459225].slice(0);
		var W = new Array(65);
		W[64] = 0;
		var a;
		var b;
		var c;
		var d;
		var e;
		var f;
		var g;
		var h;
		var T1;
		var T2;
		m[l >> 5] |= 128 << 24 - l % 32;
		m[(l + 64 >> 9 << 4) + 15] = l;
		var i = 0;
		while(i < m.length) {
			a = HASH[0];
			b = HASH[1];
			c = HASH[2];
			d = HASH[3];
			e = HASH[4];
			f = HASH[5];
			g = HASH[6];
			h = HASH[7];
			var _g = 0;
			while(_g < 64) {
				var j = _g++;
				if(j < 16) {
					W[j] = m[j + i];
				} else {
					var x = W[j - 2];
					var x1 = (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
					var y = W[j - 7];
					var lsw = (x1 & 65535) + (y & 65535);
					var x2 = (x1 >> 16) + (y >> 16) + (lsw >> 16) << 16 | lsw & 65535;
					var x3 = W[j - 15];
					var y1 = (x3 >>> 7 | x3 << 25) ^ (x3 >>> 18 | x3 << 14) ^ x3 >>> 3;
					var lsw1 = (x2 & 65535) + (y1 & 65535);
					var x4 = (x2 >> 16) + (y1 >> 16) + (lsw1 >> 16) << 16 | lsw1 & 65535;
					var y2 = W[j - 16];
					var lsw2 = (x4 & 65535) + (y2 & 65535);
					W[j] = (x4 >> 16) + (y2 >> 16) + (lsw2 >> 16) << 16 | lsw2 & 65535;
				}
				var y3 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
				var lsw3 = (h & 65535) + (y3 & 65535);
				var x5 = (h >> 16) + (y3 >> 16) + (lsw3 >> 16) << 16 | lsw3 & 65535;
				var y4 = e & f ^ ~e & g;
				var lsw4 = (x5 & 65535) + (y4 & 65535);
				var x6 = (x5 >> 16) + (y4 >> 16) + (lsw4 >> 16) << 16 | lsw4 & 65535;
				var y5 = K[j];
				var lsw5 = (x6 & 65535) + (y5 & 65535);
				var x7 = (x6 >> 16) + (y5 >> 16) + (lsw5 >> 16) << 16 | lsw5 & 65535;
				var y6 = W[j];
				var lsw6 = (x7 & 65535) + (y6 & 65535);
				T1 = (x7 >> 16) + (y6 >> 16) + (lsw6 >> 16) << 16 | lsw6 & 65535;
				var x8 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);
				var y7 = a & b ^ a & c ^ b & c;
				var lsw7 = (x8 & 65535) + (y7 & 65535);
				T2 = (x8 >> 16) + (y7 >> 16) + (lsw7 >> 16) << 16 | lsw7 & 65535;
				h = g;
				g = f;
				f = e;
				var lsw8 = (d & 65535) + (T1 & 65535);
				e = (d >> 16) + (T1 >> 16) + (lsw8 >> 16) << 16 | lsw8 & 65535;
				d = c;
				c = b;
				b = a;
				var lsw9 = (T1 & 65535) + (T2 & 65535);
				a = (T1 >> 16) + (T2 >> 16) + (lsw9 >> 16) << 16 | lsw9 & 65535;
			}
			var y8 = HASH[0];
			var lsw10 = (a & 65535) + (y8 & 65535);
			HASH[0] = (a >> 16) + (y8 >> 16) + (lsw10 >> 16) << 16 | lsw10 & 65535;
			var y9 = HASH[1];
			var lsw11 = (b & 65535) + (y9 & 65535);
			HASH[1] = (b >> 16) + (y9 >> 16) + (lsw11 >> 16) << 16 | lsw11 & 65535;
			var y10 = HASH[2];
			var lsw12 = (c & 65535) + (y10 & 65535);
			HASH[2] = (c >> 16) + (y10 >> 16) + (lsw12 >> 16) << 16 | lsw12 & 65535;
			var y11 = HASH[3];
			var lsw13 = (d & 65535) + (y11 & 65535);
			HASH[3] = (d >> 16) + (y11 >> 16) + (lsw13 >> 16) << 16 | lsw13 & 65535;
			var y12 = HASH[4];
			var lsw14 = (e & 65535) + (y12 & 65535);
			HASH[4] = (e >> 16) + (y12 >> 16) + (lsw14 >> 16) << 16 | lsw14 & 65535;
			var y13 = HASH[5];
			var lsw15 = (f & 65535) + (y13 & 65535);
			HASH[5] = (f >> 16) + (y13 >> 16) + (lsw15 >> 16) << 16 | lsw15 & 65535;
			var y14 = HASH[6];
			var lsw16 = (g & 65535) + (y14 & 65535);
			HASH[6] = (g >> 16) + (y14 >> 16) + (lsw16 >> 16) << 16 | lsw16 & 65535;
			var y15 = HASH[7];
			var lsw17 = (h & 65535) + (y15 & 65535);
			HASH[7] = (h >> 16) + (y15 >> 16) + (lsw17 >> 16) << 16 | lsw17 & 65535;
			i += 16;
		}
		return HASH;
	}
	,hex: function(a) {
		var str = "";
		var _g = 0;
		while(_g < a.length) str += StringTools.hex(a[_g++],8);
		return str.toLowerCase();
	}
	,__class__: haxe_crypto_Sha256
};
var haxe_crypto_padding_BitPadding = function() { };
haxe_crypto_padding_BitPadding.__name__ = true;
haxe_crypto_padding_BitPadding.pad = function(ciphertext,blockSize) {
	var buffer = new haxe_io_BytesBuffer();
	buffer.addBytes(ciphertext,0,ciphertext.length);
	buffer.addByte(128);
	var padding = blockSize - ciphertext.length % blockSize - 1;
	var _g = 0;
	while(_g < padding) {
		++_g;
		buffer.addByte(0);
	}
	return buffer.getBytes();
};
haxe_crypto_padding_BitPadding.unpad = function(encrypt) {
	var padding = 0;
	var pos = encrypt.length - 1;
	while(padding != 128 && pos > -1) {
		padding = encrypt.b[pos];
		--pos;
	}
	return encrypt.sub(0,pos + 1);
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__:true,__constructs__:null
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Left",$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Right",$_.__params__ = ["v"],$_)
};
haxe_ds_Either.__constructs__ = [haxe_ds_Either.Left,haxe_ds_Either.Right];
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__:true,__constructs__:null
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_._hx_name="Some",$_.__params__ = ["v"],$_)
	,None: {_hx_name:"None",_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
haxe_ds_Option.__constructs__ = [haxe_ds_Option.Some,haxe_ds_Option.None];
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = true;
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapValueIterator.__name__ = true;
haxe_ds__$StringMap_StringMapValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.h[this.keys[this.current++]];
	}
	,__class__: haxe_ds__$StringMap_StringMapValueIterator
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
haxe_exceptions_PosException.__name__ = true;
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	posInfos: null
	,toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
haxe_exceptions_NotImplementedException.__name__ = true;
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_format_JsonPrinter = function(replacer,space) {
	this.replacer = replacer;
	this.indent = space;
	this.pretty = space != null;
	this.nind = 0;
	this.buf = new StringBuf();
};
haxe_format_JsonPrinter.__name__ = true;
haxe_format_JsonPrinter.print = function(o,replacer,space) {
	var printer = new haxe_format_JsonPrinter(replacer,space);
	printer.write("",o);
	return printer.buf.b;
};
haxe_format_JsonPrinter.prototype = {
	buf: null
	,replacer: null
	,indent: null
	,pretty: null
	,nind: null
	,write: function(k,v) {
		if(this.replacer != null) {
			v = this.replacer(k,v);
		}
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "null";
			break;
		case 1:
			this.buf.b += Std.string(v);
			break;
		case 2:
			var v1 = isFinite(v) ? Std.string(v) : "null";
			this.buf.b += Std.string(v1);
			break;
		case 3:
			this.buf.b += Std.string(v);
			break;
		case 4:
			this.fieldsString(v,Reflect.fields(v));
			break;
		case 5:
			this.buf.b += "\"<fun>\"";
			break;
		case 6:
			var c = _g.c;
			if(c == String) {
				this.quote(v);
			} else if(c == Array) {
				var v1 = v;
				this.buf.b += String.fromCodePoint(91);
				var len = v1.length;
				var last = len - 1;
				var _g = 0;
				var _g1 = len;
				while(_g < _g1) {
					var i = _g++;
					if(i > 0) {
						this.buf.b += String.fromCodePoint(44);
					} else {
						this.nind++;
					}
					if(this.pretty) {
						this.buf.b += String.fromCodePoint(10);
					}
					if(this.pretty) {
						this.buf.b += Std.string(StringTools.lpad("",this.indent,this.nind * this.indent.length));
					}
					this.write(i,v1[i]);
					if(i == last) {
						this.nind--;
						if(this.pretty) {
							this.buf.b += String.fromCodePoint(10);
						}
						if(this.pretty) {
							this.buf.b += Std.string(StringTools.lpad("",this.indent,this.nind * this.indent.length));
						}
					}
				}
				this.buf.b += String.fromCodePoint(93);
			} else if(c == haxe_ds_StringMap) {
				var v1 = v;
				var o = { };
				var _g_keys = Object.keys(v1.h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var k = _g_keys[_g_current++];
					o[k] = v1.h[k];
				}
				var v1 = o;
				this.fieldsString(v1,Reflect.fields(v1));
			} else if(c == Date) {
				this.quote(HxOverrides.dateStr(v));
			} else {
				this.classString(v);
			}
			break;
		case 7:
			this.buf.b += Std.string(v._hx_index);
			break;
		case 8:
			this.buf.b += "\"???\"";
			break;
		}
	}
	,classString: function(v) {
		this.fieldsString(v,Type.getInstanceFields(js_Boot.getClass(v)));
	}
	,fieldsString: function(v,fields) {
		this.buf.b += String.fromCodePoint(123);
		var len = fields.length;
		var last = len - 1;
		var first = true;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var f = fields[i];
			var value = Reflect.field(v,f);
			if(Reflect.isFunction(value)) {
				continue;
			}
			if(first) {
				this.nind++;
				first = false;
			} else {
				this.buf.b += String.fromCodePoint(44);
			}
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(10);
			}
			if(this.pretty) {
				this.buf.b += Std.string(StringTools.lpad("",this.indent,this.nind * this.indent.length));
			}
			this.quote(f);
			this.buf.b += String.fromCodePoint(58);
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(32);
			}
			this.write(f,value);
			if(i == last) {
				this.nind--;
				if(this.pretty) {
					this.buf.b += String.fromCodePoint(10);
				}
				if(this.pretty) {
					this.buf.b += Std.string(StringTools.lpad("",this.indent,this.nind * this.indent.length));
				}
			}
		}
		this.buf.b += String.fromCodePoint(125);
	}
	,quote: function(s) {
		this.buf.b += String.fromCodePoint(34);
		var i = 0;
		var length = s.length;
		while(i < length) {
			var c = s.charCodeAt(i++);
			switch(c) {
			case 8:
				this.buf.b += "\\b";
				break;
			case 9:
				this.buf.b += "\\t";
				break;
			case 10:
				this.buf.b += "\\n";
				break;
			case 12:
				this.buf.b += "\\f";
				break;
			case 13:
				this.buf.b += "\\r";
				break;
			case 34:
				this.buf.b += "\\\"";
				break;
			case 92:
				this.buf.b += "\\\\";
				break;
			default:
				this.buf.b += String.fromCodePoint(c);
			}
		}
		this.buf.b += String.fromCodePoint(34);
	}
	,__class__: haxe_format_JsonPrinter
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		this.u8.set(new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len),this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,close: function() {
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,close: function() {
	}
	,__class__: haxe_io_Output
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var httpstatus_HttpStatusCode = {};
httpstatus_HttpStatusCode.toMessage = function(this1) {
	return httpstatus_HttpStatusMessage.fromCode(this1);
};
httpstatus_HttpStatusCode.toInt = function(this1) {
	return this1;
};
httpstatus_HttpStatusCode.fromErrorCode = function(code) {
	return code;
};
httpstatus_HttpStatusCode.toWebResponse = function(this1) {
	return httpstatus_HttpStatusCode.toOutgoingResponse(this1);
};
httpstatus_HttpStatusCode.toOutgoingResponse = function(this1) {
	return new tink_http__$Response_OutgoingResponseData(new tink_http_ResponseHeaderBase(this1,httpstatus_HttpStatusMessage.fromCode(this1),[new tink_http_HeaderField("content-length","0")],"HTTP/1.1"),tink_io_Source.EMPTY);
};
httpstatus_HttpStatusCode.fromIncomingResponse = function(res) {
	return res.header.statusCode;
};
var httpstatus_HttpStatusMessage = {};
httpstatus_HttpStatusMessage._new = function(statusCode) {
	return httpstatus_HttpStatusMessage.fromCode(statusCode);
};
httpstatus_HttpStatusMessage.fromCode = function(statusCode) {
	switch(statusCode) {
	case 100:
		return "Continue";
	case 101:
		return "Switching Protocols";
	case 102:
		return "Processing";
	case 200:
		return "OK";
	case 201:
		return "Created";
	case 202:
		return "Accepted";
	case 203:
		return "Non-Authoritative Information";
	case 204:
		return "No Content";
	case 205:
		return "Reset Content";
	case 206:
		return "Partial Content";
	case 207:
		return "Multi-Status";
	case 208:
		return "Already Reported";
	case 226:
		return "IM Used";
	case 300:
		return "Multiple Choices";
	case 301:
		return "Moved Permanently";
	case 302:
		return "Found";
	case 303:
		return "See Other";
	case 304:
		return "Not Modified";
	case 305:
		return "Use Proxy";
	case 306:
		return "Switch Proxy";
	case 307:
		return "Temporary Redirect";
	case 308:
		return "Permanent Redirect";
	case 400:
		return "Bad Request";
	case 401:
		return "Unauthorized";
	case 402:
		return "Payment Required";
	case 403:
		return "Forbidden";
	case 404:
		return "Not Found";
	case 405:
		return "Method Not Allowed";
	case 406:
		return "Not Acceptable";
	case 407:
		return "Proxy Authentication Required";
	case 408:
		return "Request Timeout";
	case 409:
		return "Conflict";
	case 410:
		return "Gone";
	case 411:
		return "Length Required";
	case 412:
		return "Precondition Failed";
	case 413:
		return "Payload Too Large";
	case 414:
		return "URI Too Long";
	case 415:
		return "Unsupported Media Type";
	case 416:
		return "Range Not Satisfiable";
	case 417:
		return "Expectation Failed";
	case 418:
		return "I'm a teapot";
	case 421:
		return "Misdirected Request";
	case 422:
		return "Unprocessable Entity";
	case 423:
		return "Locked";
	case 424:
		return "Failed Dependency";
	case 426:
		return "Upgrade Required";
	case 428:
		return "Precondition Required";
	case 429:
		return "Too Many Requests";
	case 431:
		return "Request Header Fields Too Large";
	case 451:
		return "Unavailable For Legal Reasons";
	case 500:
		return "Internal Server Error";
	case 501:
		return "Not Implemented";
	case 502:
		return "Bad Gateway";
	case 503:
		return "Service Unavailable";
	case 504:
		return "Gateway Timeout";
	case 505:
		return "HTTP Version Not Supported";
	case 506:
		return "Variant Also Negotiates";
	case 507:
		return "Insufficient Storage";
	case 508:
		return "Loop Detected";
	case 510:
		return "Not Extended";
	case 511:
		return "Network Authentication Required";
	default:
		return "Unknown Status";
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	while(true) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		var intf = cc.__interfaces__;
		if(intf != null) {
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = intf[_g++];
				if(i == cl || js_Boot.__interfLoop(i,cl)) {
					return true;
				}
			}
		}
		cc = cc.__super__;
	}
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = true;
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_node_Fs = require("fs");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_buffer__$Buffer_Helper = function() { };
js_node_buffer__$Buffer_Helper.__name__ = true;
js_node_buffer__$Buffer_Helper.bytesOfBuffer = function(b) {
	var o = Object.create(haxe_io_Bytes.prototype);
	o.length = b.byteLength;
	o.b = b;
	b.bufferValue = b;
	b.hxBytes = o;
	b.bytes = b;
	return o;
};
var js_node_http_Server = require("http").Server;
var js_node_stream_PassThrough = require("stream").PassThrough;
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	return [name,value];
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var mime_Mime = function() { };
mime_Mime.__name__ = true;
mime_Mime.get_extensions = function() {
	if(mime_Mime.extensions != null) {
		return mime_Mime.extensions;
	} else {
		mime_Mime.extensions = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(mime_Mime.db);
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			var _g2 = mime_Mime.db[type].extensions;
			if(_g2 != null) {
				var _g3 = 0;
				while(_g3 < _g2.length) mime_Mime.extensions.h[_g2[_g3++]] = type;
			}
		}
		return mime_Mime.extensions;
	}
};
mime_Mime.lookup = function(path) {
	var this1 = mime_Mime.get_extensions();
	var key = path.split(".").pop().toLowerCase();
	return this1.h[key];
};
mime_Mime.extension = function(type) {
	var _g = mime_Mime.db[type];
	if(_g == null) {
		return null;
	} else {
		var _g1 = _g.extensions;
		if(_g1 != null) {
			return _g1[0];
		} else {
			return null;
		}
	}
};
mime_Mime.init = function() {
};
var security_CryptoProvider = function() { };
security_CryptoProvider.__name__ = true;
security_CryptoProvider.mkChaCha = function(key,nonce) {
	var key1 = haxe_crypto_Sha256.make(haxe_io_Bytes.ofString(key));
	nonce = HxOverrides.substr(nonce,0,16);
	console.log("src/security/CryptoProvider.hx:12:",nonce.length);
	var nonce1 = haxe_io_Bytes.ofHex(nonce);
	var chaCha = new haxe_crypto_ChaCha();
	chaCha.init(key1,nonce1);
	return chaCha;
};
security_CryptoProvider.getNonce = function() {
	return StringTools.lpad(Std.string(Std.random(100000000)),"0",8);
};
security_CryptoProvider.encrypt = function(data,key,nonce) {
	return security_CryptoProvider.mkChaCha(key,nonce).encrypt(data);
};
security_CryptoProvider.decrypt = function(data,key,nonce) {
	return security_CryptoProvider.mkChaCha(key,nonce).decrypt(data);
};
var sys_FileSystem = function() { };
sys_FileSystem.__name__ = true;
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _g ) {
		return false;
	}
};
var sys_io_FileInput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileInput.__name__ = true;
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	fd: null
	,pos: null
	,readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.pos >= js_node_Fs.fstatSync(this.fd).size;
	}
	,__class__: sys_io_FileInput
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileOutput.__name__ = true;
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	fd: null
	,pos: null
	,writeByte: function(b) {
		var buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,__class__: sys_io_FileOutput
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__:true,__constructs__:null
	,SeekBegin: {_hx_name:"SeekBegin",_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_name:"SeekCur",_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_name:"SeekEnd",_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
sys_io_FileSeek.__constructs__ = [sys_io_FileSeek.SeekBegin,sys_io_FileSeek.SeekCur,sys_io_FileSeek.SeekEnd];
var tink_chunk_ChunkBase = function() { };
tink_chunk_ChunkBase.__name__ = true;
tink_chunk_ChunkBase.prototype = {
	flattened: null
	,getCursor: function() {
		if(this.flattened == null) {
			this.flatten(this.flattened = []);
		}
		return tink_chunk_ChunkCursor.create(this.flattened.slice());
	}
	,flatten: function(into) {
	}
	,__class__: tink_chunk_ChunkBase
};
var tink_chunk_ChunkObject = function() { };
tink_chunk_ChunkObject.__name__ = true;
tink_chunk_ChunkObject.__isInterface__ = true;
tink_chunk_ChunkObject.prototype = {
	getByte: null
	,getCursor: null
	,flatten: null
	,getLength: null
	,slice: null
	,toString: null
	,toBytes: null
	,blitTo: null
	,__class__: tink_chunk_ChunkObject
};
var tink__$Chunk_EmptyChunk = function() {
};
tink__$Chunk_EmptyChunk.__name__ = true;
tink__$Chunk_EmptyChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink__$Chunk_EmptyChunk.__super__ = tink_chunk_ChunkBase;
tink__$Chunk_EmptyChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	getByte: function(i) {
		return 0;
	}
	,getLength: function() {
		return 0;
	}
	,slice: function(from,to) {
		return this;
	}
	,blitTo: function(target,offset) {
	}
	,toString: function() {
		return "";
	}
	,toBytes: function() {
		return tink__$Chunk_EmptyChunk.EMPTY;
	}
	,__class__: tink__$Chunk_EmptyChunk
});
var tink_Chunk = {};
tink_Chunk.get_length = function(this1) {
	return this1.getLength();
};
tink_Chunk.getByte = function(this1,i) {
	return this1.getByte(i);
};
tink_Chunk.concat = function(this1,that) {
	return tink_chunk_CompoundChunk.cons(this1,that);
};
tink_Chunk.cursor = function(this1) {
	return this1.getCursor();
};
tink_Chunk.iterator = function(this1) {
	return new tink_chunk_ChunkIterator(this1.getCursor());
};
tink_Chunk.sub = function(this1,pos,len) {
	return this1.slice(pos,pos + len);
};
tink_Chunk.slice = function(this1,from,to) {
	return this1.slice(from,to);
};
tink_Chunk.blitTo = function(this1,target,offset) {
	this1.blitTo(target,offset);
};
tink_Chunk.toHex = function(this1) {
	return this1.toBytes().toHex();
};
tink_Chunk.toString = function(this1) {
	return this1.toString();
};
tink_Chunk.toBytes = function(this1) {
	return this1.toBytes();
};
tink_Chunk.toBuffer = function(this1) {
	var b = this1.toBytes();
	var data = b.b;
	return js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
};
tink_Chunk.join = function(chunks) {
	if(chunks == null) {
		return tink_Chunk.EMPTY;
	} else {
		switch(chunks.length) {
		case 0:
			return tink_Chunk.EMPTY;
		case 1:
			return chunks[0];
		default:
			var ret = tink_Chunk.concat(chunks[0],chunks[1]);
			var _g = 2;
			var _g1 = chunks.length;
			while(_g < _g1) ret = tink_Chunk.concat(ret,chunks[_g++]);
			return ret;
		}
	}
};
tink_Chunk.ofBytes = function(b) {
	return tink_chunk_ByteChunk.of(b);
};
tink_Chunk.ofString = function(s) {
	return tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s));
};
tink_Chunk.ofBuffer = function(b) {
	return new tink_chunk_nodejs_BufferChunk(b);
};
tink_Chunk.ofByte = function(byte) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(1));
	bytes.b[0] = byte;
	return tink_chunk_ByteChunk.of(bytes);
};
tink_Chunk.ofHex = function(s) {
	var length = s.length >> 1;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		bytes.b[i] = Std.parseInt("0x" + HxOverrides.substr(s,i * 2,2));
	}
	return tink_chunk_ByteChunk.of(bytes);
};
tink_Chunk.parseHex = function(v) {
	return Std.parseInt("0x" + v);
};
tink_Chunk.catChunk = function(a,b) {
	return tink_Chunk.concat(a,b);
};
tink_Chunk.rcatString = function(a,b) {
	return tink_Chunk.concat(a,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(b)));
};
tink_Chunk.lcatString = function(a,b) {
	return tink_Chunk.concat(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(a)),b);
};
tink_Chunk.lcatBytes = function(a,b) {
	return tink_Chunk.concat(tink_chunk_ByteChunk.of(a),b);
};
tink_Chunk.rcatBytes = function(a,b) {
	return tink_Chunk.concat(a,tink_chunk_ByteChunk.of(b));
};
tink_Chunk.eqChunk = function(a,b) {
	return a.toString() == b.toString();
};
tink_Chunk.reqString = function(a,b) {
	return a.toString() == b.toString();
};
tink_Chunk.leqString = function(a,b) {
	return a.toString() == b.toString();
};
tink_Chunk.leqBytes = function(a,b) {
	return a.toString() == b.toString();
};
tink_Chunk.reqBytes = function(a,b) {
	return a.toString() == b.toString();
};
var tink_HtmlString = {};
tink_HtmlString._new = function(s) {
	return s;
};
tink_HtmlString.escape = function(s) {
	return s == null ? "" : tink_HtmlString.htmlEscape(s);
};
tink_HtmlString.join = function(a) {
	return a.join("");
};
tink_HtmlString.htmlEscape = function(s) {
	var start = 0;
	var pos = 0;
	var max = s.length;
	var ret_out = "";
	while(pos < max) switch(s.charCodeAt(pos++)) {
	case 34:
		ret_out += HxOverrides.substr(s,start,pos - start - 1);
		start = pos;
		ret_out += "&quot;";
		break;
	case 38:
		ret_out += HxOverrides.substr(s,start,pos - start - 1);
		start = pos;
		ret_out += "&amp;";
		break;
	case 39:
		ret_out += HxOverrides.substr(s,start,pos - start - 1);
		start = pos;
		ret_out += "&#039;";
		break;
	case 60:
		ret_out += HxOverrides.substr(s,start,pos - start - 1);
		start = pos;
		ret_out += "&lt;";
		break;
	case 62:
		ret_out += HxOverrides.substr(s,start,pos - start - 1);
		start = pos;
		ret_out += "&gt;";
		break;
	}
	ret_out += HxOverrides.substr(s,start,null);
	return ret_out;
};
var tink_Json = function() { };
tink_Json.__name__ = true;
var tink_Stringly = {};
tink_Stringly.isNumber = function(s,allowFloat) {
	if(s.length == 0) {
		return false;
	}
	var pos = 0;
	var max = s.length;
	if(0 < max && s.charCodeAt(0) == 45) {
		pos = 1;
	}
	if(!allowFloat) {
		if(pos < max && s.charCodeAt(pos) == 48 && pos++ > -1) {
			if(pos < max && s.charCodeAt(pos) == 120) {
				++pos;
			}
		}
	}
	while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
	if(allowFloat && pos < max) {
		if(pos < max && s.charCodeAt(pos) == 46 && pos++ > -1) {
			while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		}
		if(pos < max && s.charCodeAt(pos) == 101 && pos++ > -1 || pos < max && s.charCodeAt(pos) == 69 && pos++ > -1) {
			if(!(pos < max && s.charCodeAt(pos) == 43 && pos++ > -1)) {
				if(pos < max && s.charCodeAt(pos) == 45) {
					++pos;
				}
			}
			while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		}
	}
	return pos == max;
};
tink_Stringly.toBool = function(this1) {
	if(this1 != null) {
		switch(StringTools.trim(this1).toLowerCase()) {
		case "0":case "false":case "no":
			return false;
		default:
			return true;
		}
	} else {
		return false;
	}
};
tink_Stringly.isFloat = function(this1) {
	return tink_Stringly.isNumber(StringTools.trim(this1),true);
};
tink_Stringly.parseFloat = function(this1) {
	var _g = StringTools.trim(this1);
	if(tink_Stringly.isNumber(_g,true)) {
		return tink_core_Outcome.Success(parseFloat(_g));
	} else {
		return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + _g + " (encoded as " + this1 + ") is not a valid float",{ fileName : "tink/Stringly.hx", lineNumber : 65, className : "tink._Stringly.Stringly_Impl_", methodName : "parseFloat"}));
	}
};
tink_Stringly.toFloat = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseFloat(this1));
};
tink_Stringly.isInt = function(this1) {
	return tink_Stringly.isNumber(StringTools.trim(this1),false);
};
tink_Stringly.parseInt = function(this1) {
	var _g = StringTools.trim(this1);
	if(tink_Stringly.isNumber(_g,false)) {
		return tink_core_Outcome.Success(Std.parseInt(_g));
	} else {
		return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + _g + " (encoded as " + this1 + ") is not a valid integer",{ fileName : "tink/Stringly.hx", lineNumber : 80, className : "tink._Stringly.Stringly_Impl_", methodName : "parseInt"}));
	}
};
tink_Stringly.toInt = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseInt(this1));
};
tink_Stringly.parseDate = function(this1) {
	var _g = tink_Stringly.parseFloat(this1);
	switch(_g._hx_index) {
	case 0:
		return tink_core_Outcome.Success(new Date(_g.data));
	case 1:
		if(!tink_Stringly.SUPPORTED_DATE_REGEX.match(this1)) {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + this1 + " is not a valid date",{ fileName : "tink/Stringly.hx", lineNumber : 101, className : "tink._Stringly.Stringly_Impl_", methodName : "parseDate"}));
		}
		var date = new Date(this1);
		var f = date.getTime();
		if(isNaN(f)) {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + this1 + " is not a valid date",{ fileName : "tink/Stringly.hx", lineNumber : 104, className : "tink._Stringly.Stringly_Impl_", methodName : "parseDate"}));
		} else {
			return tink_core_Outcome.Success(date);
		}
		break;
	}
};
tink_Stringly.toDate = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseDate(this1));
};
tink_Stringly.parse = function(this1,f) {
	var _g = f;
	var a1 = this1;
	return tink_core_TypedError.catchExceptions(function() {
		return _g(a1);
	},null,{ fileName : "tink/Stringly.hx", lineNumber : 164, className : "tink._Stringly.Stringly_Impl_", methodName : "parse"});
};
tink_Stringly.ofBool = function(b) {
	if(b) {
		return "true";
	} else {
		return "false";
	}
};
tink_Stringly.ofInt = function(i) {
	if(i == null) {
		return "null";
	} else {
		return "" + i;
	}
};
tink_Stringly.ofFloat = function(f) {
	if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
tink_Stringly.ofDate = function(d) {
	var f = d.getTime();
	if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
var tink_Url = {};
tink_Url.get_host = function(this1) {
	return this1.hosts[0];
};
tink_Url.get_hosts = function(this1) {
	return this1.hosts;
};
tink_Url.get_pathWithQuery = function(this1) {
	if(this1.query == null) {
		return this1.path;
	} else {
		return (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query);
	}
};
tink_Url._new = function(parts) {
	return parts;
};
tink_Url.resolve = function(this1,that) {
	if(that.scheme != null) {
		return that;
	} else if(that.hosts[0] != null) {
		if(that.scheme != null) {
			return that;
		} else {
			var copy = Reflect.copy(that);
			copy.scheme = this1.scheme;
			return copy;
		}
	} else {
		var parts = { path : tink_url_Path.join(this1.path,that.path), payload : "", scheme : this1.scheme, query : that.query, auth : this1.auth, hosts : this1.hosts, hash : that.hash};
		tink_Url.makePayload(parts);
		return parts;
	}
};
tink_Url.makePayload = function(parts) {
	var payload = "";
	var _g = parts.auth;
	var _g1 = parts.hosts;
	if(_g == null) {
		if(_g1.length != 0) {
			payload = "" + ("//" + _g1.join(","));
		}
	} else if(_g1.length == 0) {
		payload = "" + ("//" + (_g == null ? "null" : _g == null ? "" : "" + _g + "@"));
	} else {
		payload = "" + ("//" + (_g == null ? "null" : _g == null ? "" : "" + _g + "@") + _g1.join(","));
	}
	payload += parts.path == null ? "null" : parts.path;
	var _g = parts.query;
	if(_g != null) {
		payload += "?" + (_g == null ? "null" : _g);
	}
	var _g = parts.hash;
	if(_g != null) {
		payload += "#" + _g;
	}
	parts.payload = payload.toString();
};
tink_Url.toString = function(this1) {
	if(this1.scheme == null) {
		return this1.payload;
	} else {
		return "" + this1.scheme + ":" + this1.payload;
	}
};
tink_Url.fromString = function(s) {
	return tink_Url.parse(s);
};
tink_Url.noop = function(_) {
};
tink_Url.parse = function(s,onError) {
	while(true) {
		if(s == null) {
			s = "";
			onError = null;
			continue;
		}
		if(onError == null) {
			onError = tink_Url.noop;
		}
		s = StringTools.trim(s);
		if(StringTools.startsWith(s,"data:")) {
			return { scheme : "data", payload : HxOverrides.substr(s,5,null), hosts : []};
		}
		var FORMAT = new EReg("^(([a-zA-Z][a-zA-Z0-9\\-+.]*):)?((//(([^@/]+)@)?([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?)$","");
		var HOST = new EReg("^(\\[(.*)\\]|([^:]*))(:(.*))?$","");
		FORMAT.match(s);
		var hosts;
		var _g = FORMAT.matched(7);
		if(_g == null) {
			hosts = [];
		} else {
			var _g1 = [];
			var _g2 = 0;
			var _g3 = _g.split(",");
			while(_g2 < _g3.length) {
				var host = _g3[_g2];
				++_g2;
				HOST.match(host);
				var host1;
				var _g4 = HOST.matched(3);
				var _g5 = HOST.matched(2);
				if(_g5 == null) {
					host1 = _g4;
				} else if(_g4 == null) {
					host1 = "[" + _g5 + "]";
				} else {
					onError("invalid host " + host);
					host1 = null;
				}
				var port;
				var _g6 = HOST.matched(5);
				if(_g6 == null) {
					port = null;
				} else {
					var _g7 = Std.parseInt(_g6);
					if(_g7 == null) {
						onError("invalid port " + _g6);
						port = null;
					} else {
						port = _g7;
					}
				}
				_g1.push(tink_url_Host._new(host1,port));
			}
			hosts = _g1;
		}
		var path = FORMAT.matched(8);
		if(hosts.length > 0 && path.charAt(0) != "/") {
			path = "/" + path;
		}
		return { scheme : FORMAT.matched(2), payload : FORMAT.matched(3), hosts : hosts, auth : FORMAT.matched(6), path : tink_url_Path.ofString(path), query : FORMAT.matched(10), hash : FORMAT.matched(12)};
	}
};
tink_Url.make = function(parts) {
	var parts1 = { payload : "", path : parts.path, query : parts.query, hosts : parts.hosts, auth : parts.auth, scheme : parts.scheme, hash : parts.hash};
	tink_Url.makePayload(parts1);
	return parts1;
};
var tink_SingleHostUrl = {};
tink_SingleHostUrl._new = function(v) {
	return v;
};
tink_SingleHostUrl.ofUrl = function(u) {
	var v;
	switch(u.hosts.length) {
	case 0:
		v = u;
		break;
	case 1:
		v = u;
		break;
	default:
		v = tink_Url.make({ path : u.path, query : u.query, hosts : [u.hosts[0]], auth : u.auth, scheme : u.scheme, hash : u.hash});
	}
	return v;
};
tink_SingleHostUrl.ofString = function(s) {
	return tink_SingleHostUrl.ofUrl(tink_Url.fromString(s));
};
var tink_chunk_ByteChunk = function(data,from,to) {
	this.data = data;
	this.from = from;
	this.to = to;
};
tink_chunk_ByteChunk.__name__ = true;
tink_chunk_ByteChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_ByteChunk.of = function(b) {
	if(b.length == 0) {
		return tink_Chunk.EMPTY;
	}
	var ret = new tink_chunk_ByteChunk(b.b.bufferValue,0,b.length);
	ret.wrapped = b;
	return ret;
};
tink_chunk_ByteChunk.__super__ = tink_chunk_ChunkBase;
tink_chunk_ByteChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	data: null
	,from: null
	,to: null
	,wrapped: null
	,get_wrapped: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped;
	}
	,getByte: function(index) {
		return this.data.bytes[this.from + index];
	}
	,flatten: function(into) {
		into.push(this);
	}
	,getLength: function() {
		return this.to - this.from;
	}
	,getSlice: function(from,to) {
		if(to > this.to - this.from) {
			to = this.to - this.from;
		}
		if(from < 0) {
			from = 0;
		}
		if(to <= from) {
			return null;
		} else if(to == this.to - this.from && from == 0) {
			return this;
		} else {
			return new tink_chunk_ByteChunk(this.data,this.from + from,to + this.from);
		}
	}
	,slice: function(from,to) {
		var _g = this.getSlice(from,to);
		if(_g == null) {
			return tink_Chunk.EMPTY;
		} else {
			return _g;
		}
	}
	,blitTo: function(target,offset) {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		target.blit(offset,this.wrapped,this.from,this.to - this.from);
	}
	,toBytes: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.sub(this.from,this.to - this.from);
	}
	,toString: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.getString(this.from,this.to - this.from);
	}
	,__class__: tink_chunk_ByteChunk
});
var tink_chunk_ChunkCursor = function() {
	this.currentByte = -1;
	this.currentPos = 0;
	this.length = 0;
	this.curLength = 0;
	this.curOffset = 0;
	this.curPartIndex = 0;
};
tink_chunk_ChunkCursor.__name__ = true;
tink_chunk_ChunkCursor.create = function(parts) {
	var ret = new tink_chunk_ChunkCursor();
	ret.parts = parts;
	ret.reset();
	return ret;
};
tink_chunk_ChunkCursor.prototype = {
	parts: null
	,curPart: null
	,curPartIndex: null
	,curOffset: null
	,curLength: null
	,length: null
	,currentPos: null
	,currentByte: null
	,clone: function() {
		var ret = new tink_chunk_ChunkCursor();
		ret.parts = this.parts.slice();
		ret.curPart = this.curPart;
		ret.curPartIndex = this.curPartIndex;
		ret.curOffset = this.curOffset;
		ret.curLength = this.curLength;
		ret.length = this.length;
		ret.currentPos = this.currentPos;
		ret.currentByte = this.currentByte;
		return ret;
	}
	,reset: function() {
		this.length = 0;
		this.currentPos = 0;
		this.currentByte = -1;
		this.curOffset = 0;
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			this.length += p.to - p.from;
		}
		this.curPartIndex = 0;
		this.curPart = this.parts[0];
		if(this.curPart != null) {
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this = this.curPart;
			this.currentByte = _this.data.bytes[_this.from];
		}
	}
	,flush: function() {
		var ret = this.left();
		this.shift();
		return ret;
	}
	,prune: function() {
		this.shift();
	}
	,add: function(chunk) {
		chunk.flatten(this.parts);
		this.reset();
	}
	,shift: function(chunk) {
		this.parts.splice(0,this.curPartIndex);
		var _g = this.parts[0];
		if(_g != null) {
			var _g1 = _g.getSlice(this.curOffset,this.curLength);
			if(_g1 == null) {
				this.parts.shift();
			} else {
				this.parts[0] = _g1;
			}
		}
		if(chunk != null) {
			this.add(chunk);
		} else {
			this.reset();
		}
	}
	,clear: function() {
		this.parts = [];
		this.reset();
	}
	,left: function() {
		if(this.curPart == null) {
			return tink_Chunk.EMPTY;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.curPartIndex;
		while(_g1 < _g2) _g.push(this.parts[_g1++]);
		_g.push(this.curPart.slice(0,this.curOffset));
		return tink_Chunk.join(_g);
	}
	,right: function() {
		if(this.curPart == null) {
			return tink_Chunk.EMPTY;
		}
		var _g = [];
		var _g1 = this.curPartIndex;
		var _g2 = this.parts.length;
		while(_g1 < _g2) _g.push(this.parts[_g1++]);
		if(_g.length > 0) {
			_g[0] = this.curPart.slice(this.curOffset,this.curLength);
		}
		return tink_Chunk.join(_g);
	}
	,seek: function(seekable,options) {
		var _gthis = this;
		if(this.curPart == null || seekable == null || seekable.length == 0) {
			return haxe_ds_Option.None;
		}
		var max = seekable.length - 1;
		var first = seekable[0];
		var candidates = [];
		var count = 0;
		var copy = this.clone();
		copy.shift();
		var part = function(b,offset) {
			var data = b.data;
			var _g = b.from + offset;
			var _g1 = b.to;
			while(_g < _g1) {
				var i = _g++;
				var byte = data.bytes[i];
				if(candidates.length > 0) {
					var c = 0;
					while(c < count) {
						var pos = candidates[c];
						if(seekable[pos] == byte) {
							if(pos == max) {
								copy.moveTo(copy.currentPos + (i - (b.from + offset) - seekable.length + 1));
								var before = copy.left();
								var delta = before.getLength() + seekable.length;
								_gthis.moveTo(_gthis.currentPos + delta);
								if(options == null) {
									_gthis.shift();
								} else {
									var _g2 = options.withoutPruning;
									if(_g2 == null) {
										_gthis.shift();
									} else if(_g2 == false) {
										_gthis.shift();
									}
								}
								return haxe_ds_Option.Some(before);
							} else {
								candidates[c++] = pos + 1;
							}
						} else {
							count -= 1;
							var last = candidates.pop();
							if(count > c) {
								candidates[c] = last;
							}
						}
					}
				}
				if(byte == first) {
					count = candidates.push(1);
				}
			}
			copy.moveTo(copy.currentPos + (b.to - (b.from + offset)));
			return haxe_ds_Option.None;
		};
		var _g = part(this.curPart,this.curOffset);
		if(_g._hx_index == 1) {
			var _g1 = this.curPartIndex + 1;
			var _g2 = this.parts.length;
			while(_g1 < _g2) {
				var _g3 = part(this.parts[_g1++],0);
				switch(_g3._hx_index) {
				case 0:
					return haxe_ds_Option.Some(_g3.v);
				case 1:
					break;
				}
			}
			return haxe_ds_Option.None;
		} else {
			return _g;
		}
	}
	,sweep: function(len) {
		var data = this.right().slice(0,len);
		this.moveTo(this.currentPos + len);
		return data;
	}
	,sweepTo: function(pos) {
		return this.sweep(pos - this.currentPos);
	}
	,moveBy: function(delta) {
		return this.moveTo(this.currentPos + delta);
	}
	,moveTo: function(position) {
		if(this.length == 0) {
			return 0;
		}
		if(position > this.length) {
			position = this.length - 1;
		}
		if(position < 0) {
			position = 0;
		}
		this.currentPos = position;
		if(position == this.length) {
			this.ffwd();
		} else {
			var _g = 0;
			var _g1 = this.parts.length;
			while(_g < _g1) {
				var i = _g++;
				var c = this.parts[i];
				var _g2 = c.to - c.from;
				if(_g2 > position) {
					this.curPart = c;
					this.curPartIndex = i;
					this.curOffset = position;
					this.curLength = c.to - c.from;
					this.currentByte = c.data.bytes[c.from + position];
					break;
				} else {
					position -= _g2;
				}
			}
		}
		return this.currentPos;
	}
	,ffwd: function() {
		this.currentByte = -1;
		this.curLength = 0;
		this.curOffset = 0;
		this.curPart = null;
		this.curPartIndex = this.parts.length;
	}
	,next: function() {
		if(this.currentPos == this.length) {
			return false;
		}
		this.currentPos++;
		if(this.currentPos == this.length) {
			this.ffwd();
			return false;
		}
		if(this.curOffset == this.curLength - 1) {
			this.curOffset = 0;
			this.curPart = this.parts[++this.curPartIndex];
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this = this.curPart;
			this.currentByte = _this.data.bytes[_this.from];
		} else {
			var _this = this.curPart;
			this.currentByte = _this.data.bytes[_this.from + ++this.curOffset];
		}
		return true;
	}
	,__class__: tink_chunk_ChunkCursor
};
var tink_chunk_ChunkIterator = function(target) {
	this.target = target;
	this._hasNext = target.length > target.currentPos;
};
tink_chunk_ChunkIterator.__name__ = true;
tink_chunk_ChunkIterator.prototype = {
	target: null
	,_hasNext: null
	,hasNext: function() {
		return this._hasNext;
	}
	,next: function() {
		var ret = this.target.currentByte;
		this._hasNext = this.target.next();
		return ret;
	}
	,__class__: tink_chunk_ChunkIterator
};
var tink_chunk_ChunkTools = function() { };
tink_chunk_ChunkTools.__name__ = true;
tink_chunk_ChunkTools.readUInt8 = function(chunk,offset) {
	if(chunk.getLength() < offset + 1) {
		throw haxe_Exception.thrown("Out of range (chunk length = " + chunk.getLength() + ", read offset = " + offset + ", read length = " + 1 + ")");
	}
	return chunk.getByte(offset);
};
tink_chunk_ChunkTools.readInt8 = function(chunk,offset) {
	var val = tink_chunk_ChunkTools.readUInt8(chunk,offset);
	if(val > 127) {
		return val - 256;
	} else {
		return val;
	}
};
tink_chunk_ChunkTools.readUInt16LE = function(chunk,offset) {
	if(chunk.getLength() < offset + 2) {
		throw haxe_Exception.thrown("Out of range (chunk length = " + chunk.getLength() + ", read offset = " + offset + ", read length = " + 2 + ")");
	}
	return chunk.getByte(offset) + (chunk.getByte(offset + 1) << 8);
};
tink_chunk_ChunkTools.readInt16LE = function(chunk,offset) {
	var val = tink_chunk_ChunkTools.readUInt16LE(chunk,offset);
	if(val > 32767) {
		return val - 65536;
	} else {
		return val;
	}
};
tink_chunk_ChunkTools.readUInt24LE = function(chunk,offset) {
	if(chunk.getLength() < offset + 3) {
		throw haxe_Exception.thrown("Out of range (chunk length = " + chunk.getLength() + ", read offset = " + offset + ", read length = " + 3 + ")");
	}
	return chunk.getByte(offset) + (chunk.getByte(offset + 1) << 8) + (chunk.getByte(offset + 2) << 16);
};
tink_chunk_ChunkTools.readInt24LE = function(chunk,offset) {
	var val = tink_chunk_ChunkTools.readUInt24LE(chunk,offset);
	if(val > 8388607) {
		return val - 16777216;
	} else {
		return val;
	}
};
tink_chunk_ChunkTools.readInt32LE = function(chunk,offset) {
	if(chunk.getLength() < offset + 4) {
		throw haxe_Exception.thrown("Out of range (chunk length = " + chunk.getLength() + ", read offset = " + offset + ", read length = " + 4 + ")");
	}
	return chunk.getByte(offset) + (chunk.getByte(offset + 1) << 8) + (chunk.getByte(offset + 2) << 16) + (chunk.getByte(offset + 3) << 24);
};
tink_chunk_ChunkTools.readDoubleLE = function(chunk,offset) {
	return haxe_io_FPHelper.i64ToDouble(tink_chunk_ChunkTools.readInt32LE(chunk,0),tink_chunk_ChunkTools.readInt32LE(chunk,4));
};
tink_chunk_ChunkTools.readNullTerminatedString = function(chunk,offset) {
	try {
		return new haxe_io_BytesInput(chunk.toBytes(),offset).readUntil(0);
	} catch( _g ) {
		return chunk.toString();
	}
};
tink_chunk_ChunkTools.writeUInt8 = function(v) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(1));
	bytes.b[0] = v & 255;
	return tink_chunk_ByteChunk.of(bytes);
};
tink_chunk_ChunkTools.writeInt8 = function(v) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(1));
	v &= 255;
	if(v < 0) {
		v += 256;
	}
	bytes.b[0] = v;
	return tink_chunk_ByteChunk.of(bytes);
};
tink_chunk_ChunkTools.writeUInt16LE = function(v) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(2));
	bytes.b[0] = v & 255;
	bytes.b[1] = v >>> 8 & 255;
	return tink_chunk_ByteChunk.of(bytes);
};
tink_chunk_ChunkTools.writeInt16LE = function(v) {
	return tink_chunk_ChunkTools.writeUInt16LE(v);
};
tink_chunk_ChunkTools.writeUInt24LE = function(v) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(3));
	bytes.b[0] = v & 255;
	bytes.b[1] = v >>> 8 & 255;
	bytes.b[2] = v >>> 16 & 255;
	return tink_chunk_ByteChunk.of(bytes);
};
tink_chunk_ChunkTools.writeInt24LE = function(v) {
	return tink_chunk_ChunkTools.writeUInt24LE(v);
};
tink_chunk_ChunkTools.writeInt32LE = function(v) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(4));
	bytes.b[0] = v & 255;
	bytes.b[1] = v >>> 8 & 255;
	bytes.b[2] = v >>> 16 & 255;
	bytes.b[3] = v >>> 24 & 255;
	return tink_chunk_ByteChunk.of(bytes);
};
tink_chunk_ChunkTools.writeDoubleLE = function(v) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(8));
	var i64 = haxe_io_FPHelper.doubleToI64(v);
	var l = i64.low;
	var h = i64.high;
	bytes.b[0] = l & 255;
	bytes.b[1] = l >>> 8 & 255;
	bytes.b[2] = l >>> 16 & 255;
	bytes.b[3] = l >>> 24 & 255;
	bytes.b[4] = h & 255;
	bytes.b[5] = h >>> 8 & 255;
	bytes.b[6] = h >>> 16 & 255;
	bytes.b[7] = h >>> 24 & 255;
	return tink_chunk_ByteChunk.of(bytes);
};
tink_chunk_ChunkTools.lpad = function(chunk,pad,length) {
	if(pad.getLength() != 0) {
		while(chunk.getLength() < length) chunk = tink_Chunk.concat(pad,chunk);
	}
	return chunk;
};
tink_chunk_ChunkTools.rpad = function(chunk,pad,length) {
	if(pad.getLength() != 0) {
		while(chunk.getLength() < length) chunk = tink_Chunk.concat(chunk,pad);
	}
	return chunk;
};
tink_chunk_ChunkTools.check = function(chunk,offset,length) {
	if(chunk.getLength() < offset + length) {
		throw haxe_Exception.thrown("Out of range (chunk length = " + chunk.getLength() + ", read offset = " + offset + ", read length = " + length + ")");
	}
};
var tink_chunk_CompoundChunk = function() {
};
tink_chunk_CompoundChunk.__name__ = true;
tink_chunk_CompoundChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_CompoundChunk.asCompound = function(c) {
	if(((c) instanceof tink_chunk_CompoundChunk)) {
		return c;
	} else {
		return null;
	}
};
tink_chunk_CompoundChunk.cons = function(a,b) {
	var _g = a.getLength();
	var _g1 = b.getLength();
	if(_g == 0) {
		if(_g1 == 0) {
			return tink_Chunk.EMPTY;
		} else {
			return b;
		}
	} else if(_g1 == 0) {
		return a;
	} else {
		var _g = tink_chunk_CompoundChunk.asCompound(a);
		var _g1 = tink_chunk_CompoundChunk.asCompound(b);
		if(_g == null) {
			if(_g1 == null) {
				return tink_chunk_CompoundChunk.create([a,b],2);
			} else if(_g1.depth < 100) {
				return tink_chunk_CompoundChunk.create([a,b],_g1.depth + 1);
			} else {
				var flat = [];
				_g1.flatten(flat);
				b.flatten(flat);
				return tink_chunk_CompoundChunk.create(flat,2);
			}
		} else if(_g1 == null) {
			if(_g.depth < 100) {
				return tink_chunk_CompoundChunk.create([a,b],_g.depth + 1);
			} else {
				var flat = [];
				_g.flatten(flat);
				b.flatten(flat);
				return tink_chunk_CompoundChunk.create(flat,2);
			}
		} else {
			var depth = _g.depth > _g1.depth ? _g.depth : _g1.depth;
			return tink_chunk_CompoundChunk.create(_g.chunks.concat(_g1.chunks),depth);
		}
	}
};
tink_chunk_CompoundChunk.create = function(chunks,depth) {
	var ret = new tink_chunk_CompoundChunk();
	var offsets = [0];
	var length = 0;
	var _g = 0;
	while(_g < chunks.length) offsets.push(length += chunks[_g++].getLength());
	ret.chunks = chunks;
	ret.offsets = offsets;
	ret.length = length;
	ret.depth = depth;
	return ret;
};
tink_chunk_CompoundChunk.__super__ = tink_chunk_ChunkBase;
tink_chunk_CompoundChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	chunks: null
	,offsets: null
	,length: null
	,depth: null
	,getByte: function(i) {
		var index = this.findChunk(i);
		return this.chunks[index].getByte(i - this.offsets[index]);
	}
	,getLength: function() {
		return this.length;
	}
	,findChunk: function(target) {
		var min = 0;
		var max = this.offsets.length - 1;
		while(min + 1 < max) {
			var guess = min + max >> 1;
			if(this.offsets[guess] > target) {
				max = guess;
			} else {
				min = guess;
			}
		}
		return min;
	}
	,flatten: function(into) {
		var _g = 0;
		var _g1 = this.chunks;
		while(_g < _g1.length) _g1[_g++].flatten(into);
	}
	,slice: function(from,to) {
		var idxFrom = this.findChunk(from);
		var idxTo = this.findChunk(to);
		if(idxFrom == idxTo) {
			var offset = this.offsets[idxFrom];
			return this.chunks[idxFrom].slice(from - offset,to - offset);
		}
		var ret = this.chunks.slice(idxFrom,idxTo + 1);
		ret[0] = ret[0].slice(from - this.offsets[idxFrom],this.offsets[idxFrom + 1]);
		ret[ret.length - 1] = ret[ret.length - 1].slice(0,to - this.offsets[idxTo]);
		return tink_chunk_CompoundChunk.create(ret,this.depth);
	}
	,blitTo: function(target,offset) {
		var _g = 0;
		var _g1 = this.chunks.length;
		while(_g < _g1) {
			var i = _g++;
			this.chunks[i].blitTo(target,offset + this.offsets[i]);
		}
	}
	,toString: function() {
		return this.toBytes().toString();
	}
	,toBytes: function() {
		var ret = new haxe_io_Bytes(new ArrayBuffer(this.length));
		this.blitTo(ret,0);
		return ret;
	}
	,__class__: tink_chunk_CompoundChunk
});
var tink_chunk_Seekable = {};
tink_chunk_Seekable._new = function(a) {
	return a;
};
tink_chunk_Seekable.get_length = function(this1) {
	return this1.length;
};
tink_chunk_Seekable.get = function(this1,index) {
	return this1[index];
};
tink_chunk_Seekable.ofChunk = function(c) {
	return tink_chunk_Seekable.ofBytes(c.toBytes());
};
tink_chunk_Seekable.ofBytes = function(b) {
	var _g = [];
	var _g1 = 0;
	var _g2 = b.length;
	while(_g1 < _g2) _g.push(b.b[_g1++]);
	return _g;
};
tink_chunk_Seekable.ofString = function(s) {
	return tink_chunk_Seekable.ofBytes(haxe_io_Bytes.ofString(s));
};
var tink_chunk_nodejs_BufferChunk = function(buffer) {
	this.buffer = buffer;
};
tink_chunk_nodejs_BufferChunk.__name__ = true;
tink_chunk_nodejs_BufferChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_nodejs_BufferChunk.prototype = {
	buffer: null
	,getByte: function(i) {
		return this.buffer[i];
	}
	,getCursor: function() {
		return tink_chunk_ByteChunk.of(this.toBytes()).getCursor();
	}
	,flatten: function(into) {
		tink_chunk_ByteChunk.of(this.toBytes()).flatten(into);
	}
	,getLength: function() {
		return this.buffer.length;
	}
	,slice: function(from,to) {
		if(to > this.getLength()) {
			to = this.getLength();
		}
		if(from < 0) {
			from = 0;
		}
		if(to <= from) {
			return tink_Chunk.EMPTY;
		} else if(to == this.getLength() && from == 0) {
			return this;
		} else {
			return new tink_chunk_nodejs_BufferChunk(this.buffer.slice(from,to));
		}
	}
	,toString: function() {
		return this.buffer.toString();
	}
	,toBytes: function() {
		var copy = js_node_buffer_Buffer.allocUnsafe(this.buffer.length);
		this.buffer.copy(copy);
		return js_node_buffer__$Buffer_Helper.bytesOfBuffer(copy);
	}
	,blitTo: function(target,offset) {
		var data = target.b;
		this.buffer.copy(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,target.length),offset);
	}
	,__class__: tink_chunk_nodejs_BufferChunk
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = true;
tink_core_Annex.prototype = {
	target: null
	,registry: null
	,__class__: tink_core_Annex
};
var tink_core_Callback = {};
tink_core_Callback._new = function(f) {
	return f;
};
tink_core_Callback.toFunction = function(this1) {
	return this1;
};
tink_core_Callback.invoke = function(this1,data) {
	if(tink_core_Callback.depth < 500) {
		tink_core_Callback.depth++;
		this1(data);
		tink_core_Callback.depth--;
	} else {
		tink_core_Callback.defer(function() {
			this1(data);
		});
	}
};
tink_core_Callback.fromNiladic = function(f) {
	return f;
};
tink_core_Callback.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) tink_core_Callback.invoke(callbacks[_g++],v);
	};
};
tink_core_Callback.defer = function(f) {
	process.nextTick(f);
};
var tink_core_LinkObject = function() { };
tink_core_LinkObject.__name__ = true;
tink_core_LinkObject.__isInterface__ = true;
tink_core_LinkObject.prototype = {
	cancel: null
	,__class__: tink_core_LinkObject
};
var tink_core_CallbackLinkRef = function() {
};
tink_core_CallbackLinkRef.__name__ = true;
tink_core_CallbackLinkRef.__interfaces__ = [tink_core_LinkObject];
tink_core_CallbackLinkRef.prototype = {
	link: null
	,cancel: function() {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
	}
	,__class__: tink_core_CallbackLinkRef
};
var tink_core_CallbackLink = {};
tink_core_CallbackLink._new = function(link) {
	return new tink_core_SimpleLink(link);
};
tink_core_CallbackLink.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.noop = function() {
};
tink_core_CallbackLink.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.toCallback = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.fromFunction = function(f) {
	return new tink_core_SimpleLink(f);
};
tink_core_CallbackLink.join = function(this1,b) {
	return new tink_core__$Callback_LinkPair(this1,b);
};
tink_core_CallbackLink.fromMany = function(callbacks) {
	return new tink_core_SimpleLink(function() {
		if(callbacks != null) {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		} else {
			callbacks = null;
		}
	});
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
tink_core_SimpleLink.__name__ = true;
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
tink_core_SimpleLink.prototype = {
	f: null
	,cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	a: null
	,b: null
	,dissolved: null
	,cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this1 = this.b;
			if(this1 != null) {
				this1.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw haxe_Exception.thrown("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	cb: null
	,list: null
	,invoke: function(data) {
		if(this.list != null) {
			this.cb(data);
		}
	}
	,clear: function() {
		this.cb = null;
		this.list = null;
	}
	,cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used <= list.cells.length >> 1) {
				list.compact();
			}
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_Disposable = function() { };
tink_core_Disposable.__name__ = true;
tink_core_Disposable.__isInterface__ = true;
tink_core_Disposable.prototype = {
	get_disposed: null
	,ondispose: null
	,__class__: tink_core_Disposable
};
var tink_core_OwnedDisposable = function() { };
tink_core_OwnedDisposable.__name__ = true;
tink_core_OwnedDisposable.__isInterface__ = true;
tink_core_OwnedDisposable.__interfaces__ = [tink_core_Disposable];
tink_core_OwnedDisposable.prototype = {
	dispose: null
	,__class__: tink_core_OwnedDisposable
};
var tink_core_SimpleDisposable = function(dispose) {
	this.disposeHandlers = [];
	this.f = dispose;
};
tink_core_SimpleDisposable.__name__ = true;
tink_core_SimpleDisposable.__interfaces__ = [tink_core_OwnedDisposable];
tink_core_SimpleDisposable.noop = function() {
};
tink_core_SimpleDisposable.prototype = {
	f: null
	,disposeHandlers: null
	,get_disposed: function() {
		return this.disposeHandlers == null;
	}
	,ondispose: function(d) {
		var _g = this.disposeHandlers;
		if(_g == null) {
			d();
		} else {
			_g.push(d);
		}
	}
	,dispose: function() {
		var _g = this.disposeHandlers;
		if(_g != null) {
			this.disposeHandlers = null;
			var f = this.f;
			this.f = tink_core_SimpleDisposable.noop;
			f();
			var _g1 = 0;
			while(_g1 < _g.length) _g[_g1++]();
		}
	}
	,__class__: tink_core_SimpleDisposable
};
var tink_core_CallbackList = function(destructive) {
	if(destructive == null) {
		destructive = false;
	}
	this.onfill = function() {
	};
	this.ondrain = function() {
	};
	this.busy = false;
	this.queue = [];
	this.used = 0;
	var _gthis = this;
	tink_core_SimpleDisposable.call(this,function() {
		if(!_gthis.busy) {
			_gthis.destroy();
		}
	});
	this.destructive = destructive;
	this.cells = [];
};
tink_core_CallbackList.__name__ = true;
tink_core_CallbackList.__super__ = tink_core_SimpleDisposable;
tink_core_CallbackList.prototype = $extend(tink_core_SimpleDisposable.prototype,{
	destructive: null
	,cells: null
	,get_length: function() {
		return this.used;
	}
	,used: null
	,queue: null
	,busy: null
	,ondrain: null
	,onfill: null
	,release: function() {
		if(--this.used <= this.cells.length >> 1) {
			this.compact();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.cb = null;
			c.list = null;
		}
		this.queue = null;
		this.cells = null;
		if(this.used > 0) {
			this.used = 0;
			var fn = this.ondrain;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		}
	}
	,drain: function() {
		var fn = this.ondrain;
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			fn();
			tink_core_Callback.depth--;
		} else {
			tink_core_Callback.defer(fn);
		}
	}
	,add: function(cb) {
		if(this.disposeHandlers == null) {
			return null;
		}
		var node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		if(this.used++ == 0) {
			var fn = this.onfill;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		}
		return node;
	}
	,invoke: function(data) {
		var _gthis = this;
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			if(_gthis.disposeHandlers != null) {
				if(_gthis.busy) {
					if(_gthis.destructive != true) {
						var _g = $bind(_gthis,_gthis.invoke);
						var data1 = data;
						var tmp = function() {
							_g(data1);
						};
						_gthis.queue.push(tmp);
					}
				} else {
					_gthis.busy = true;
					if(_gthis.destructive) {
						_gthis.dispose();
					}
					var length = _gthis.cells.length;
					var _g1 = 0;
					while(_g1 < length) {
						var _this = _gthis.cells[_g1++];
						if(_this.list != null) {
							_this.cb(data);
						}
					}
					_gthis.busy = false;
					if(_gthis.disposeHandlers == null) {
						_gthis.destroy();
					} else {
						if(_gthis.used < _gthis.cells.length) {
							_gthis.compact();
						}
						if(_gthis.queue.length > 0) {
							(_gthis.queue.shift())();
						}
					}
				}
			}
			tink_core_Callback.depth--;
		} else {
			tink_core_Callback.defer(function() {
				if(_gthis.disposeHandlers != null) {
					if(_gthis.busy) {
						if(_gthis.destructive != true) {
							var _g = $bind(_gthis,_gthis.invoke);
							var data1 = data;
							var tmp = function() {
								_g(data1);
							};
							_gthis.queue.push(tmp);
						}
					} else {
						_gthis.busy = true;
						if(_gthis.destructive) {
							_gthis.dispose();
						}
						var length = _gthis.cells.length;
						var _g1 = 0;
						while(_g1 < length) {
							var _this = _gthis.cells[_g1++];
							if(_this.list != null) {
								_this.cb(data);
							}
						}
						_gthis.busy = false;
						if(_gthis.disposeHandlers == null) {
							_gthis.destroy();
						} else {
							if(_gthis.used < _gthis.cells.length) {
								_gthis.compact();
							}
							if(_gthis.queue.length > 0) {
								(_gthis.queue.shift())();
							}
						}
					}
				}
			});
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			var fn = this.ondrain;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				if(_g2.cb != null) {
					if(compacted != i) {
						this.cells[compacted] = _g2;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,clear: function() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
	,__class__: tink_core_CallbackList
});
var tink_core_AlreadyDisposed = function() {
};
tink_core_AlreadyDisposed.__name__ = true;
tink_core_AlreadyDisposed.__interfaces__ = [tink_core_OwnedDisposable];
tink_core_AlreadyDisposed.prototype = {
	get_disposed: function() {
		return true;
	}
	,ondispose: function(d) {
		d();
	}
	,dispose: function() {
	}
	,__class__: tink_core_AlreadyDisposed
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = true;
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		var e = tink_core_TypedError.asError(haxe_Exception.caught(_g).unwrap());
		return tink_core_Outcome.Failure(e == null ? report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e,pos) : report(e) : e);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw haxe_Exception.thrown(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
	,isTinkError: null
	,printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,toPromise: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(this)));
	}
	,throwSelf: function() {
		throw haxe_Exception.thrown(this);
	}
	,toJsError: function() {
		var value = this.data;
		var _g = ((value) instanceof Error) ? value : null;
		if(_g == null) {
			return new tink_core__$Error_TinkError(this);
		} else {
			return _g;
		}
	}
	,__class__: tink_core_TypedError
};
var tink_core_Stack = {};
tink_core_Stack.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core__$Error_TinkError = function(e) {
	Error.call(this);
	this.message = e.message;
	this.data = e;
};
tink_core__$Error_TinkError.__name__ = true;
tink_core__$Error_TinkError.__super__ = Error;
tink_core__$Error_TinkError.prototype = $extend(Error.prototype,{
	data: null
	,__class__: tink_core__$Error_TinkError
});
var tink_core__$Future_FutureObject = function() { };
tink_core__$Future_FutureObject.__name__ = true;
tink_core__$Future_FutureObject.__isInterface__ = true;
tink_core__$Future_FutureObject.prototype = {
	getStatus: null
	,handle: null
	,eager: null
	,__class__: tink_core__$Future_FutureObject
};
var tink_core__$Future_NeverFuture = function() {
};
tink_core__$Future_NeverFuture.__name__ = true;
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	getStatus: function() {
		return tink_core_FutureStatus.NeverEver;
	}
	,handle: function(callback) {
		return null;
	}
	,eager: function() {
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core__$Lazy_Computable = function() { };
tink_core__$Lazy_Computable.__name__ = true;
tink_core__$Lazy_Computable.__isInterface__ = true;
tink_core__$Lazy_Computable.prototype = {
	isComputed: null
	,compute: null
	,underlying: null
	,__class__: tink_core__$Lazy_Computable
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = true;
tink_core__$Lazy_LazyObject.__isInterface__ = true;
tink_core__$Lazy_LazyObject.__interfaces__ = [tink_core__$Lazy_Computable];
tink_core__$Lazy_LazyObject.prototype = {
	get: null
	,__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	value: null
	,isComputed: function() {
		return true;
	}
	,get: function() {
		return this.value;
	}
	,compute: function() {
	}
	,underlying: function() {
		return null;
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	value: null
	,getStatus: function() {
		return tink_core_FutureStatus.Ready(this.value);
	}
	,handle: function(cb) {
		tink_core_Callback.invoke(cb,tink_core_Lazy.get(this.value));
		return null;
	}
	,eager: function() {
		if(!this.value.isComputed()) {
			tink_core_Lazy.get(this.value);
		}
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core_Future = {};
tink_core_Future.get_status = function(this1) {
	return this1.getStatus();
};
tink_core_Future._new = function(wakeup) {
	return new tink_core__$Future_SuspendableFuture(wakeup);
};
tink_core_Future.handle = function(this1,callback) {
	return this1.handle(callback);
};
tink_core_Future.eager = function(this1) {
	this1.eager();
	return this1;
};
tink_core_Future.noise = function(this1) {
	if(this1.getStatus()._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else {
		return tink_core_Future.map(this1,function(_) {
			return null;
		});
	}
};
tink_core_Future.first = function(this1,that) {
	var _g = this1;
	switch(_g.getStatus()._hx_index) {
	case 3:
		switch(that.getStatus()._hx_index) {
		case 3:
			return _g;
		case 4:
			return _g;
		default:
			return _g;
		}
		break;
	case 4:
		return that;
	default:
		switch(that.getStatus()._hx_index) {
		case 3:
			return that;
		case 4:
			return _g;
		default:
			return new tink_core__$Future_SuspendableFuture(function(fire) {
				return new tink_core__$Callback_LinkPair(this1.handle(fire),that.handle(fire));
			});
		}
	}
};
tink_core_Future.map = function(this1,f,gather) {
	var _g = this1.getStatus();
	switch(_g._hx_index) {
	case 3:
		var this2 = _g.result;
		var f1 = f;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
			return f1(this2.get());
		},this2));
	case 4:
		return tink_core_Future.NEVER;
	default:
		return new tink_core__$Future_SuspendableFuture(function(fire) {
			return this1.handle(function(v) {
				fire(f(v));
			});
		});
	}
};
tink_core_Future.flatMap = function(this1,next,gather) {
	var _g = this1.getStatus();
	switch(_g._hx_index) {
	case 3:
		var l = _g.result;
		return new tink_core__$Future_SuspendableFuture(function(fire) {
			return next(tink_core_Lazy.get(l)).handle(function(v) {
				fire(v);
			});
		});
	case 4:
		return tink_core_Future.NEVER;
	default:
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var inner = new tink_core_CallbackLinkRef();
			return new tink_core__$Callback_LinkPair(this1.handle(function(v) {
				var outer = next(v).handle($yield);
				inner.link = outer;
			}),inner);
		});
	}
};
tink_core_Future.next = function(this1,n) {
	return tink_core_Future.flatMap(this1,n);
};
tink_core_Future.gather = function(this1) {
	return this1;
};
tink_core_Future.merge = function(this1,that,combine) {
	var _g = this1.getStatus();
	var _g1 = that.getStatus();
	if(_g._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else if(_g1._hx_index == 4) {
		return tink_core_Future.NEVER;
	} else {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var check = function(v) {
				var _g = this1.getStatus();
				var _g1 = that.getStatus();
				if(_g._hx_index == 3) {
					if(_g1._hx_index == 3) {
						$yield(combine(tink_core_Lazy.get(_g.result),tink_core_Lazy.get(_g1.result)));
					}
				}
			};
			return new tink_core__$Callback_LinkPair(this1.handle(check),that.handle(check));
		});
	}
};
tink_core_Future.flatten = function(f) {
	return tink_core_Future.flatMap(f,function(v) {
		return v;
	});
};
tink_core_Future.ofJsPromise = function(promise) {
	return tink_core_Future.irreversible(function(cb) {
		promise.then(function(a) {
			var _g = cb;
			var a1 = tink_core_Outcome.Success(a);
			tink_core_Callback.defer(function() {
				_g(a1);
			});
		},function(e) {
			cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 158, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"})));
		});
	});
};
tink_core_Future.neverToAny = function(l) {
	return l;
};
tink_core_Future.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.asPromise = function(s) {
	return s;
};
tink_core_Future.ofMany = function(futures,gather) {
	return tink_core_Future.inSequence(futures);
};
tink_core_Future.inParallel = function(futures,concurrency) {
	return tink_core_Future.many(futures,concurrency);
};
tink_core_Future.inSequence = function(futures) {
	return tink_core_Future.many(futures,1);
};
tink_core_Future.many = function(a,concurrency) {
	return tink_core_Future.processMany(a,concurrency,tink_core_Outcome.Success,function(o) {
		return tink_core_OutcomeTools.orNull(o);
	});
};
tink_core_Future.processMany = function(a,concurrency,fn,lift) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(lift(tink_core_Outcome.Success([]))));
	} else {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var links = [];
			var _g = [];
			var _g1 = 0;
			while(_g1 < a.length) {
				++_g1;
				_g.push(null);
			}
			var ret = _g;
			var index = 0;
			var pending = 0;
			var done = false;
			var concurrency1;
			if(concurrency == null) {
				concurrency1 = a.length;
			} else {
				var v = concurrency;
				concurrency1 = v < 1 ? 1 : v > a.length ? a.length : v;
			}
			var fireWhenReady = function() {
				if(index == ret.length) {
					if(pending == 0) {
						var v = lift(tink_core_Outcome.Success(ret));
						done = true;
						$yield(v);
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			};
			var step = null;
			step = function() {
				if(!done && !fireWhenReady()) {
					while(index < ret.length) {
						index += 1;
						var index1 = [index - 1];
						var p = a[index1[0]];
						var check = [(function(index) {
							return function(o) {
								var _g = fn(o);
								switch(_g._hx_index) {
								case 0:
									ret[index[0]] = _g.data;
									fireWhenReady();
									break;
								case 1:
									var _g1 = _g.failure;
									var _g = 0;
									while(_g < links.length) {
										var l = links[_g];
										++_g;
										if(l != null) {
											l.cancel();
										}
									}
									var v = lift(tink_core_Outcome.Failure(_g1));
									done = true;
									$yield(v);
									break;
								}
							};
						})(index1)];
						var _g = p.getStatus();
						if(_g._hx_index == 3) {
							var _hx_tmp;
							_hx_tmp = tink_core_Lazy.get(_g.result);
							check[0](_hx_tmp);
							if(!done) {
								continue;
							}
						} else {
							pending += 1;
							links.push(p.handle((function(check) {
								return function(o) {
									pending -= 1;
									check[0](o);
									if(!done) {
										step();
									}
								};
							})(check)));
						}
						break;
					}
				}
			};
			var _g = 0;
			var _g1 = concurrency1;
			while(_g < _g1) {
				++_g;
				step();
			}
			return tink_core_CallbackLink.fromMany(links);
		});
	}
};
tink_core_Future.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core_Future.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.isFuture = function(maybeFuture) {
	return js_Boot.__implements(maybeFuture,tink_core__$Future_FutureObject);
};
tink_core_Future.async = function(init,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var ret = tink_core_Future.irreversible(init);
	if(lazy) {
		return ret;
	} else {
		ret.eager();
		return ret;
	}
};
tink_core_Future.irreversible = function(init) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		init($yield);
		return null;
	});
};
tink_core_Future.or = function(a,b) {
	return tink_core_Future.first(a,b);
};
tink_core_Future.either = function(a,b) {
	return tink_core_Future.first(tink_core_Future.map(a,haxe_ds_Either.Left),tink_core_Future.map(b,haxe_ds_Either.Right));
};
tink_core_Future.and = function(a,b) {
	return tink_core_Future.merge(a,b,function(a,b) {
		return new tink_core_MPair(a,b);
	});
};
tink_core_Future._tryFailingFlatMap = function(f,map) {
	return tink_core_Future.flatMap(f,function(o) {
		switch(o._hx_index) {
		case 0:
			return map(o.data);
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(o.failure)));
		}
	});
};
tink_core_Future._tryFlatMap = function(f,map) {
	return tink_core_Future.flatMap(f,function(o) {
		switch(o._hx_index) {
		case 0:
			return tink_core_Future.map(map(o.data),tink_core_Outcome.Success);
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(o.failure)));
		}
	});
};
tink_core_Future._tryFailingMap = function(f,map) {
	return tink_core_Future.map(f,function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
	});
};
tink_core_Future._tryMap = function(f,map) {
	return tink_core_Future.map(f,function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
};
tink_core_Future._flatMap = function(f,map) {
	return tink_core_Future.flatMap(f,map);
};
tink_core_Future._map = function(f,map) {
	return tink_core_Future.map(f,map);
};
tink_core_Future.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Future.delay = function(ms,value) {
	var this1 = tink_core_Future.irreversible(function(cb) {
		haxe_Timer.delay(function() {
			cb(tink_core_Lazy.get(value));
		},ms);
	});
	this1.eager();
	return this1;
};
var tink_core_FutureStatus = $hxEnums["tink.core.FutureStatus"] = { __ename__:true,__constructs__:null
	,Suspended: {_hx_name:"Suspended",_hx_index:0,__enum__:"tink.core.FutureStatus",toString:$estr}
	,Awaited: {_hx_name:"Awaited",_hx_index:1,__enum__:"tink.core.FutureStatus",toString:$estr}
	,EagerlyAwaited: {_hx_name:"EagerlyAwaited",_hx_index:2,__enum__:"tink.core.FutureStatus",toString:$estr}
	,Ready: ($_=function(result) { return {_hx_index:3,result:result,__enum__:"tink.core.FutureStatus",toString:$estr}; },$_._hx_name="Ready",$_.__params__ = ["result"],$_)
	,NeverEver: {_hx_name:"NeverEver",_hx_index:4,__enum__:"tink.core.FutureStatus",toString:$estr}
};
tink_core_FutureStatus.__constructs__ = [tink_core_FutureStatus.Suspended,tink_core_FutureStatus.Awaited,tink_core_FutureStatus.EagerlyAwaited,tink_core_FutureStatus.Ready,tink_core_FutureStatus.NeverEver];
var tink_core_FutureTrigger = function() {
	this.status = tink_core_FutureStatus.Awaited;
	this.list = new tink_core_CallbackList(true);
};
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core_FutureTrigger.prototype = {
	status: null
	,list: null
	,getStatus: function() {
		return this.status;
	}
	,handle: function(callback) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			tink_core_Callback.invoke(callback,tink_core_Lazy.get(_g.result));
			return null;
		} else {
			var _this = this.list;
			if(_this.disposeHandlers == null) {
				return null;
			} else {
				var node = new tink_core__$Callback_ListCell(callback,_this);
				_this.cells.push(node);
				if(_this.used++ == 0) {
					var fn = _this.onfill;
					if(tink_core_Callback.depth < 500) {
						tink_core_Callback.depth++;
						fn();
						tink_core_Callback.depth--;
					} else {
						tink_core_Callback.defer(fn);
					}
				}
				return node;
			}
		}
	}
	,eager: function() {
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.status._hx_index == 3) {
			return false;
		} else {
			this.status = tink_core_FutureStatus.Ready(new tink_core__$Lazy_LazyConst(result));
			this.list.invoke(result);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core_JsPromiseTools = function() { };
tink_core_JsPromiseTools.__name__ = true;
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.status = tink_core_FutureStatus.Suspended;
	var _gthis = this;
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList(true);
	this.callbacks.ondrain = function() {
		if(_gthis.status == tink_core_FutureStatus.Awaited) {
			_gthis.status = tink_core_FutureStatus.Suspended;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
	this.callbacks.onfill = function() {
		if(_gthis.status == tink_core_FutureStatus.Suspended) {
			_gthis.status = tink_core_FutureStatus.Awaited;
			_gthis.arm();
		}
	};
};
tink_core__$Future_SuspendableFuture.__name__ = true;
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SuspendableFuture.prototype = {
	callbacks: null
	,status: null
	,link: null
	,wakeup: null
	,getStatus: function() {
		return this.status;
	}
	,trigger: function(value) {
		if(this.status._hx_index != 3) {
			this.status = tink_core_FutureStatus.Ready(new tink_core__$Lazy_LazyConst(value));
			var link = this.link;
			this.link = null;
			this.wakeup = null;
			this.callbacks.invoke(value);
			if(link != null) {
				link.cancel();
			}
		}
	}
	,handle: function(callback) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			tink_core_Callback.invoke(callback,tink_core_Lazy.get(_g.result));
			return null;
		} else {
			var _this = this.callbacks;
			if(_this.disposeHandlers == null) {
				return null;
			} else {
				var node = new tink_core__$Callback_ListCell(callback,_this);
				_this.cells.push(node);
				if(_this.used++ == 0) {
					var fn = _this.onfill;
					if(tink_core_Callback.depth < 500) {
						tink_core_Callback.depth++;
						fn();
						tink_core_Callback.depth--;
					} else {
						tink_core_Callback.defer(fn);
					}
				}
				return node;
			}
		}
	}
	,arm: function() {
		var _gthis = this;
		this.link = this.wakeup(function(x) {
			_gthis.trigger(x);
		});
	}
	,eager: function() {
		switch(this.status._hx_index) {
		case 0:
			this.status = tink_core_FutureStatus.EagerlyAwaited;
			this.arm();
			break;
		case 1:
			this.status = tink_core_FutureStatus.EagerlyAwaited;
			break;
		default:
		}
	}
	,__class__: tink_core__$Future_SuspendableFuture
};
var tink_core_Lazy = {};
tink_core_Lazy.get_computed = function(this1) {
	return this1.isComputed();
};
tink_core_Lazy.get = function(this1) {
	this1.compute();
	return this1.get();
};
tink_core_Lazy.fromNoise = function(l) {
	return l;
};
tink_core_Lazy.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core_Lazy.map = function(this1,f) {
	return new tink_core__$Lazy_LazyFunc(function() {
		return f(this1.get());
	},this1);
};
tink_core_Lazy.flatMap = function(this1,f) {
	return new tink_core__$Lazy_LazyFunc(function() {
		return tink_core_Lazy.get(f(this1.get()));
	},this1);
};
tink_core_Lazy.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f,from) {
	this.f = f;
	this.from = from;
};
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	f: null
	,from: null
	,result: null
	,underlying: function() {
		return this.from;
	}
	,isComputed: function() {
		return this.f == null;
	}
	,get: function() {
		return this.result;
	}
	,compute: function() {
		var _g = this.f;
		if(_g != null) {
			this.f = null;
			var _g1 = this.from;
			if(_g1 != null) {
				var cur = _g1;
				this.from = null;
				var stack = [];
				while(cur != null && !cur.isComputed()) {
					stack.push(cur);
					cur = cur.underlying();
				}
				stack.reverse();
				var _g1 = 0;
				while(_g1 < stack.length) stack[_g1++].compute();
			}
			this.result = _g();
		}
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = true;
tink_core_NamedWith.prototype = {
	name: null
	,value: null
	,__class__: tink_core_NamedWith
};
var tink_core_Noise = {};
tink_core_Noise.ofAny = function(t) {
	return null;
};
var tink_core_OptionTools = function() { };
tink_core_OptionTools.__name__ = true;
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		return o.v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.sure = function(o,pos) {
	if(o._hx_index == 0) {
		return o.v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.toOutcome = function(o,pos) {
	switch(o._hx_index) {
	case 0:
		return tink_core_Outcome.Success(o.v);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Option.hx", lineNumber : 31, className : "tink.core.OptionTools", methodName : "toOutcome"}));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		return o.v;
	} else {
		return tink_core_Lazy.get(l);
	}
};
tink_core_OptionTools.orTry = function(o,fallback) {
	if(o._hx_index == 0) {
		return o;
	} else {
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		return o.v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		return f(o.v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		return o.v == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		return haxe_ds_Option.Some(f(o.v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		return f(o.v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		return [o.v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		this.value = o.v;
	} else {
		this.alive = false;
	}
};
tink_core_OptionIter.__name__ = true;
tink_core_OptionIter.prototype = {
	value: null
	,alive: null
	,hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__:true,__constructs__:null
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_._hx_name="Success",$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_._hx_name="Failure",$_.__params__ = ["failure"],$_)
};
tink_core_Outcome.__constructs__ = [tink_core_Outcome.Success,tink_core_Outcome.Failure];
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = true;
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		return outcome.data;
	case 1:
		var _g = outcome.failure;
		var _g1 = tink_core_TypedError.asError(_g);
		if(_g1 == null) {
			throw haxe_Exception.thrown(_g);
		} else {
			return _g1.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		return haxe_ds_Option.Some(outcome.data);
	case 1:
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		return outcome.data;
	case 1:
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	return tink_core_OutcomeTools.or(outcome,fallback);
};
tink_core_OutcomeTools.or = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		return outcome.data;
	case 1:
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		return outcome;
	case 1:
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		return outcome.data == to;
	case 1:
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		return tink_core_Outcome.Success(transform(outcome.data));
	case 1:
		return tink_core_Outcome.Failure(outcome.failure);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		return tink_core_Outcome.Success(v);
	case 1:
		return tink_core_Outcome.Failure(outcome.failure);
	}
};
tink_core_OutcomeTools.next = function(outcome,f) {
	switch(outcome._hx_index) {
	case 0:
		return f(outcome.data);
	case 1:
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(outcome.failure)));
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		return tink_core_Outcome.Failure(report(haxe_Exception.caught(_g).unwrap()));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		var _g = o.data;
		switch(_g._hx_index) {
		case 0:
			return tink_core_Outcome.Success(_g.data);
		case 1:
			return tink_core_Outcome.Failure(_g.failure);
		}
		break;
	case 1:
		return tink_core_Outcome.Failure(o.failure);
	}
};
var tink_core__$Outcome_OutcomeMapper = {};
tink_core__$Outcome_OutcomeMapper._new = function(f) {
	return { f : f};
};
tink_core__$Outcome_OutcomeMapper.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			return f(o.data);
		case 1:
			return tink_core_Outcome.Failure(o.failure);
		}
	});
};
tink_core__$Outcome_OutcomeMapper.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = f(o.data);
			switch(_g._hx_index) {
			case 0:
				return tink_core_Outcome.Success(_g.data);
			case 1:
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(_g.failure));
			}
			break;
		case 1:
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(o.failure));
		}
	});
};
var tink_core_Pair = {};
tink_core_Pair._new = function(a,b) {
	return new tink_core_MPair(a,b);
};
tink_core_Pair.get_a = function(this1) {
	return this1.a;
};
tink_core_Pair.get_b = function(this1) {
	return this1.b;
};
tink_core_Pair.toBool = function(this1) {
	return this1 != null;
};
tink_core_Pair.isNil = function(this1) {
	return this1 == null;
};
tink_core_Pair.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = true;
tink_core_MPair.prototype = {
	a: null
	,b: null
	,__class__: tink_core_MPair
};
var tink_core_ProgressValue = {};
tink_core_ProgressValue._new = function(value,total) {
	return new tink_core_MPair(value,total);
};
tink_core_ProgressValue.normalize = function(this1) {
	var o = this1.b;
	if(o._hx_index == 0) {
		return haxe_ds_Option.Some(this1.a / o.v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_ProgressValue.get_value = function(this1) {
	return this1.a;
};
tink_core_ProgressValue.get_total = function(this1) {
	return this1.b;
};
var tink_core_Progress = {};
tink_core_Progress.listen = function(this1,cb) {
	return this1.progressed.listen(cb);
};
tink_core_Progress.handle = function(this1,cb) {
	return this1.result.handle(cb);
};
tink_core_Progress.trigger = function() {
	return new tink_core_ProgressTrigger();
};
tink_core_Progress.make = function(f) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		return f(function(value,total) {
			fire(tink_core_ProgressStatus.InProgress(new tink_core_MPair(value,total)));
		},function(result) {
			fire(tink_core_ProgressStatus.Finished(result));
		});
	});
};
tink_core_Progress.map = function(this1,f) {
	return new tink_core__$Progress_ProgressObject(tink_core_Signal.map(this1.changed,function(s) {
		return tink_core_ProgressStatusTools.map(s,f);
	}),function() {
		return tink_core_ProgressStatusTools.map(this1.getStatus(),f);
	});
};
tink_core_Progress.asFuture = function(this1) {
	return this1.result;
};
tink_core_Progress.promise = function(v) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		var inner = new tink_core_CallbackLinkRef();
		return new tink_core__$Callback_LinkPair(v.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var this1 = o.data.changed.listen(function(s) {
					fire(tink_core_ProgressStatusTools.map(s,tink_core_Outcome.Success));
				});
				inner.link = this1;
				break;
			case 1:
				fire(tink_core_ProgressStatus.Finished(tink_core_Outcome.Failure(o.failure)));
				break;
			}
		}),inner);
	});
};
tink_core_Progress.flatten = function(v) {
	return tink_core_Progress.map(tink_core_Progress.promise(v),function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			switch(_g._hx_index) {
			case 0:
				return tink_core_Outcome.Success(_g.data);
			case 1:
				return tink_core_Outcome.Failure(_g.failure);
			}
			break;
		case 1:
			return tink_core_Outcome.Failure(o.failure);
		}
	});
};
tink_core_Progress.future = function(v) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		var inner = new tink_core_CallbackLinkRef();
		return new tink_core__$Callback_LinkPair(v.handle(function(p) {
			var this1 = p.changed.listen(fire);
			inner.link = this1;
		}),inner);
	});
};
tink_core_Progress.next = function(this1,f) {
	return tink_core_Future.flatMap(this1.result,f);
};
var tink_core__$Progress_ProgressObject = function(changed,getStatus) {
	this.changed = changed;
	this.progressed = new tink_core__$Signal_Suspendable(function(fire) {
		return changed.listen(function(s) {
			if(s._hx_index == 0) {
				fire(s.v);
			}
		});
	},null);
	this.getStatus = getStatus;
	this.result = new tink_core__$Future_SuspendableFuture(function(fire) {
		var _g = getStatus();
		if(_g._hx_index == 1) {
			fire(_g.v);
			return null;
		} else {
			return changed.listen(function(s) {
				if(s._hx_index == 1) {
					fire(s.v);
				}
			});
		}
	});
};
tink_core__$Progress_ProgressObject.__name__ = true;
tink_core__$Progress_ProgressObject.prototype = {
	get_status: function() {
		return this.getStatus();
	}
	,getStatus: null
	,changed: null
	,progressed: null
	,result: null
	,__class__: tink_core__$Progress_ProgressObject
};
var tink_core__$Progress_SuspendableProgress = function(wakeup,status) {
	if(status == null) {
		status = tink_core_ProgressStatus.InProgress(tink_core_ProgressValue.ZERO);
	}
	var disposable = tink_core_AlreadyDisposed.INST;
	var changed;
	switch(status._hx_index) {
	case 0:
		changed = new tink_core__$Signal_Suspendable(function(fire) {
			return wakeup(function(s) {
				status = s;
				fire(status);
			});
		},function(d) {
			disposable = d;
		});
		break;
	case 1:
		changed = tink_core_Signal.dead();
		break;
	}
	tink_core__$Progress_ProgressObject.call(this,changed,function() {
		return status;
	});
};
tink_core__$Progress_SuspendableProgress.__name__ = true;
tink_core__$Progress_SuspendableProgress.__super__ = tink_core__$Progress_ProgressObject;
tink_core__$Progress_SuspendableProgress.prototype = $extend(tink_core__$Progress_ProgressObject.prototype,{
	noop: function(_,_1) {
		return null;
	}
	,__class__: tink_core__$Progress_SuspendableProgress
});
var tink_core_ProgressTrigger = function(status) {
	this._changed = null;
	var _gthis = this;
	if(status == null) {
		status = tink_core_ProgressStatus.InProgress(tink_core_ProgressValue.ZERO);
		this._status = status;
	}
	tink_core__$Progress_ProgressObject.call(this,(status == null ? false : status._hx_index == 1) ? tink_core_Signal.dead() : this._changed = tink_core_Signal.trigger(),function() {
		return _gthis._status;
	});
};
tink_core_ProgressTrigger.__name__ = true;
tink_core_ProgressTrigger.__super__ = tink_core__$Progress_ProgressObject;
tink_core_ProgressTrigger.prototype = $extend(tink_core__$Progress_ProgressObject.prototype,{
	_status: null
	,_changed: null
	,asProgress: function() {
		return this;
	}
	,progress: function(v,total) {
		if(this._status._hx_index != 1) {
			this._changed.handlers.invoke(this._status = tink_core_ProgressStatus.InProgress(new tink_core_MPair(v,total)));
		}
	}
	,finish: function(v) {
		if(this._status._hx_index != 1) {
			this._changed.handlers.invoke(this._status = tink_core_ProgressStatus.Finished(v));
		}
	}
	,__class__: tink_core_ProgressTrigger
});
var tink_core_UnitInterval = {};
tink_core_UnitInterval.toPercentageString = function(this1,dp) {
	var m = Math.pow(10,dp);
	var v = Math.round(this1 * m * 100) / m;
	var s = v == null ? "null" : "" + v;
	var _g = s.indexOf(".");
	if(_g == -1) {
		return s + "." + StringTools.lpad("","0",dp) + "%";
	} else if(s.length - _g > dp) {
		return HxOverrides.substr(s,0,dp + _g + 1) + "%";
	} else {
		return StringTools.rpad(s,"0",_g + dp + 1) + "%";
	}
};
var tink_core_ProgressStatus = $hxEnums["tink.core.ProgressStatus"] = { __ename__:true,__constructs__:null
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressStatus",toString:$estr}; },$_._hx_name="InProgress",$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressStatus",toString:$estr}; },$_._hx_name="Finished",$_.__params__ = ["v"],$_)
};
tink_core_ProgressStatus.__constructs__ = [tink_core_ProgressStatus.InProgress,tink_core_ProgressStatus.Finished];
var tink_core_ProgressStatusTools = function() { };
tink_core_ProgressStatusTools.__name__ = true;
tink_core_ProgressStatusTools.map = function(p,f) {
	switch(p._hx_index) {
	case 0:
		return tink_core_ProgressStatus.InProgress(p.v);
	case 1:
		return tink_core_ProgressStatus.Finished(f(p.v));
	}
};
var tink_core_TotalTools = function() { };
tink_core_TotalTools.__name__ = true;
tink_core_TotalTools.eq = function(a,b) {
	switch(a._hx_index) {
	case 0:
		if(b._hx_index == 0) {
			return a.v == b.v;
		} else {
			return false;
		}
		break;
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
var tink_core_ProgressTools = function() { };
tink_core_ProgressTools.__name__ = true;
tink_core_ProgressTools.asPromise = function(p) {
	return p.result;
};
var tink_core_Promise = {};
tink_core_Promise._new = function(f) {
	return new tink_core__$Future_SuspendableFuture(function(cb) {
		return f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	});
};
tink_core_Promise.eager = function(this1) {
	this1.eager();
	return this1;
};
tink_core_Promise.map = function(this1,f) {
	return tink_core_Future.map(this1,f);
};
tink_core_Promise.flatMap = function(this1,f) {
	return tink_core_Future.flatMap(this1,f);
};
tink_core_Promise.tryRecover = function(this1,f) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			return f(o.failure);
		}
	});
};
tink_core_Promise.recover = function(this1,f) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o.data));
		case 1:
			return f(o.failure);
		}
	});
};
tink_core_Promise.mapError = function(this1,f) {
	return tink_core_Future.map(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			return o;
		case 1:
			return tink_core_Outcome.Failure(f(o.failure));
		}
	});
};
tink_core_Promise.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core_Promise.noise = function(this1) {
	if(this1.getStatus()._hx_index == 4) {
		return tink_core_Promise.NEVER;
	} else {
		return tink_core_Promise.next(this1,function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
		});
	}
};
tink_core_Promise.isSuccess = function(this1) {
	return tink_core_Future.map(this1,function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
};
tink_core_Promise.next = function(this1,f,gather) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			return f(o.data);
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(o.failure)));
		}
	});
};
tink_core_Promise.swap = function(this1,v) {
	return tink_core_Promise.next(this1,function(_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
	});
};
tink_core_Promise.swapError = function(this1,e) {
	return tink_core_Promise.mapError(this1,function(_) {
		return e;
	});
};
tink_core_Promise.merge = function(this1,other,merger,gather) {
	return tink_core_Future.flatMap(tink_core_Future.merge(this1,other,function(a,b) {
		switch(a._hx_index) {
		case 0:
			var _g = a.data;
			switch(b._hx_index) {
			case 0:
				return merger(_g,b.data);
			case 1:
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(b.failure)));
			}
			break;
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(a.failure)));
		}
	}),function(o) {
		return o;
	});
};
tink_core_Promise.and = function(a,b) {
	return tink_core_Promise.merge(a,b,function(a,b) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(new tink_core_MPair(a,b))));
	});
};
tink_core_Promise.iterate = function(promises,$yield,fallback) {
	return tink_core_Future.irreversible(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						$yield(o.data).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								switch(_g._hx_index) {
								case 0:
									cb(tink_core_Outcome.Success(_g.v));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								cb(tink_core_Outcome.Failure(o.failure));
								break;
							}
						});
						break;
					case 1:
						cb(tink_core_Outcome.Failure(o.failure));
						break;
					}
				});
			} else {
				fallback.handle(cb);
			}
		};
		next();
	});
};
tink_core_Promise.retry = function(gen,next) {
	var stamp = function() {
		var hrtime = process.hrtime();
		return (hrtime[0] + hrtime[1] / 1e9) * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		var f = function(error) {
			return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : stamp() - start}),function(_) {
				return attempt(count + 1);
			});
		};
		return tink_core_Future.flatMap(gen(),function(o) {
			switch(o._hx_index) {
			case 0:
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				return f(o.failure);
			}
		});
	};
	return attempt(1);
};
tink_core_Promise.ofJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Promise.toJsPromise = function(this1) {
	return new Promise(function(resolve,reject) {
		this1.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				resolve(o.data);
				break;
			case 1:
				reject(o.failure.toJsError());
				break;
			}
		});
	});
};
tink_core_Promise.ofSpecific = function(s) {
	return s;
};
tink_core_Promise.fromNever = function(l) {
	return l;
};
tink_core_Promise.ofTrigger = function(f) {
	return f;
};
tink_core_Promise.ofHappyTrigger = function(f) {
	return tink_core_Future.map(f,tink_core_Outcome.Success);
};
tink_core_Promise.ofFuture = function(f) {
	return tink_core_Future.map(f,tink_core_Outcome.Success);
};
tink_core_Promise.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core_Promise.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core_Promise.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core_Promise.lazy = function(p) {
	return new tink_core__$Future_SuspendableFuture(function(cb) {
		return tink_core_Lazy.get(p).handle(cb);
	});
};
tink_core_Promise.inParallel = function(a,concurrency) {
	return tink_core_Promise.many(a,concurrency);
};
tink_core_Promise.many = function(a,concurrency) {
	return tink_core_Future.processMany(a,concurrency,function(o) {
		return o;
	},function(o) {
		return o;
	});
};
tink_core_Promise.inSequence = function(a) {
	return tink_core_Promise.many(a,1);
};
tink_core_Promise.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core_Promise.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
			});
			if(!sync) {
				p = ret;
			}
		}
		return tink_core_Future.map(ret,function(o) {
			if(!tink_core_OutcomeTools.isSuccess(o)) {
				p = null;
			}
			return o;
		});
	};
};
tink_core_Promise.lift = function(p) {
	return p;
};
tink_core_Promise.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Promise.resolve = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
};
tink_core_Promise.reject = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
var tink_core_Next = {};
tink_core_Next.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core_Next.ofSync = function(f) {
	return function(x) {
		return tink_core_Future.map(f(x),tink_core_Outcome.Success);
	};
};
tink_core_Next.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
tink_core_Next._chain = function(a,b) {
	return function(v) {
		return tink_core_Promise.next(a(v),b);
	};
};
var tink_core_Recover = {};
tink_core_Recover.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core_Combiner = {};
tink_core_Combiner.ofSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core_Combiner.ofSafe = function(f) {
	return function(x1,x2) {
		return tink_core_Future.map(f(x1,x2),tink_core_Outcome.Success);
	};
};
tink_core_Combiner.ofSafeSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
};
var tink_core_PromiseTrigger = {};
tink_core_PromiseTrigger._new = function() {
	return new tink_core_FutureTrigger();
};
tink_core_PromiseTrigger.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core_PromiseTrigger.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core_PromiseTrigger.asPromise = function(this1) {
	return this1;
};
var tink_core_Ref = {};
tink_core_Ref._new = function() {
	return new Array(1);
};
tink_core_Ref.get_value = function(this1) {
	return this1[0];
};
tink_core_Ref.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core_Ref.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core_Ref.to = function(v) {
	var ret = new Array(1);
	ret[0] = v;
	return ret;
};
var tink_core_Gather = {};
tink_core_Gather._new = function(v) {
	return v;
};
tink_core_Gather.ofBool = function(b) {
	return b;
};
var tink_core_Signal = {};
tink_core_Signal._new = function(f,init) {
	return new tink_core__$Signal_Suspendable(f,init);
};
tink_core_Signal.handle = function(this1,handler) {
	return this1.listen(handler);
};
tink_core_Signal.map = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			fire(f(v));
		});
	});
};
tink_core_Signal.flatMap = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			f(v).handle(fire);
		});
	});
};
tink_core_Signal.filter = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			if(f(v)) {
				fire(v);
			}
		});
	});
};
tink_core_Signal.select = function(this1,selector,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			var _g = selector(v);
			if(_g._hx_index == 0) {
				fire(_g.v);
			}
		});
	});
};
tink_core_Signal.join = function(this1,that,gather) {
	if(this1.get_disposed()) {
		return that;
	} else if(that.get_disposed()) {
		return this1;
	} else {
		return new tink_core__$Signal_Suspendable(function(fire) {
			var cb = fire;
			return new tink_core__$Callback_LinkPair(this1.listen(cb),that.listen(cb));
		},function(self) {
			var release = function() {
				if(this1.get_disposed() && that.get_disposed()) {
					self.dispose();
				}
			};
			this1.ondispose(release);
			that.ondispose(release);
		});
	}
};
tink_core_Signal.nextTime = function(this1,condition) {
	return tink_core_Signal.pickNext(this1,function(v) {
		if(condition == null || condition(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
tink_core_Signal.pickNext = function(this1,selector) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	link = this1.listen(function(v) {
		var _g = selector(v);
		switch(_g._hx_index) {
		case 0:
			ret.trigger(_g.v);
			break;
		case 1:
			break;
		}
	});
	ret.handle(link == null ? tink_core_CallbackLink.noop : ($_=link,$bind($_,$_.cancel)));
	return ret;
};
tink_core_Signal.until = function(this1,end) {
	return new tink_core__$Signal_Suspendable(function($yield) {
		return this1.listen($yield);
	},function(self) {
		end.handle($bind(self,self.dispose));
	});
};
tink_core_Signal.next = function(this1,condition) {
	return tink_core_Signal.nextTime(this1,condition);
};
tink_core_Signal.noise = function(this1) {
	return tink_core_Signal.map(this1,function(_) {
		return null;
	});
};
tink_core_Signal.gather = function(this1) {
	return this1;
};
tink_core_Signal.create = function(f) {
	return new tink_core__$Signal_Suspendable(f,null);
};
tink_core_Signal.generate = function(generator,init) {
	return new tink_core__$Signal_Suspendable(function(fire) {
		generator(fire);
		return null;
	},init);
};
tink_core_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core_Signal.ofClassical = function(add,remove,gather) {
	return new tink_core__$Signal_Suspendable(function(fire) {
		add(fire);
		var _g = remove;
		var a1 = fire;
		return new tink_core_SimpleLink(function() {
			_g(a1);
		});
	});
};
tink_core_Signal.dead = function() {
	return tink_core__$Signal_Disposed.INST;
};
var tink_core__$Signal_SignalObject = function() { };
tink_core__$Signal_SignalObject.__name__ = true;
tink_core__$Signal_SignalObject.__isInterface__ = true;
tink_core__$Signal_SignalObject.__interfaces__ = [tink_core_Disposable];
tink_core__$Signal_SignalObject.prototype = {
	listen: null
	,__class__: tink_core__$Signal_SignalObject
};
var tink_core__$Signal_Disposed = function() {
	tink_core_AlreadyDisposed.call(this);
};
tink_core__$Signal_Disposed.__name__ = true;
tink_core__$Signal_Disposed.__interfaces__ = [tink_core__$Signal_SignalObject];
tink_core__$Signal_Disposed.__super__ = tink_core_AlreadyDisposed;
tink_core__$Signal_Disposed.prototype = $extend(tink_core_AlreadyDisposed.prototype,{
	listen: function(cb) {
		return null;
	}
	,__class__: tink_core__$Signal_Disposed
});
var tink_core__$Signal_Suspendable = function(activate,init) {
	this.handlers = new tink_core_CallbackList();
	var _gthis = this;
	this.activate = activate;
	this.init = init;
	this.handlers.ondrain = function() {
		var this1 = _gthis.subscription;
		if(this1 != null) {
			this1.cancel();
		}
	};
	this.handlers.onfill = function() {
		if(init != null) {
			var f = init;
			init = null;
			f(_gthis);
		}
		_gthis.subscription = activate(($_=_gthis.handlers,$bind($_,$_.invoke)));
	};
};
tink_core__$Signal_Suspendable.__name__ = true;
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_OwnedDisposable,tink_core__$Signal_SignalObject];
tink_core__$Signal_Suspendable.over = function(s,activate) {
	if(s.get_disposed()) {
		return tink_core_Signal.dead();
	} else {
		var ret = new tink_core__$Signal_Suspendable(activate);
		s.ondispose($bind(ret,ret.dispose));
		return ret;
	}
};
tink_core__$Signal_Suspendable.prototype = {
	handlers: null
	,activate: null
	,init: null
	,subscription: null
	,get_disposed: function() {
		return this.handlers.disposeHandlers == null;
	}
	,dispose: function() {
		this.handlers.dispose();
	}
	,ondispose: function(handler) {
		this.handlers.ondispose(handler);
	}
	,listen: function(cb) {
		var _this = this.handlers;
		if(_this.disposeHandlers == null) {
			return null;
		} else {
			var node = new tink_core__$Callback_ListCell(cb,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				var fn = _this.onfill;
				if(tink_core_Callback.depth < 500) {
					tink_core_Callback.depth++;
					fn();
					tink_core_Callback.depth--;
				} else {
					tink_core_Callback.defer(fn);
				}
			}
			return node;
		}
	}
	,__class__: tink_core__$Signal_Suspendable
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_OwnedDisposable,tink_core__$Signal_SignalObject];
tink_core_SignalTrigger.prototype = {
	get_disposed: function() {
		return this.handlers.disposeHandlers == null;
	}
	,handlers: null
	,dispose: function() {
		this.handlers.dispose();
	}
	,ondispose: function(d) {
		this.handlers.ondispose(d);
	}
	,trigger: function(event) {
		this.handlers.invoke(event);
	}
	,getLength: function() {
		return this.handlers.used;
	}
	,listen: function(cb) {
		var _this = this.handlers;
		if(_this.disposeHandlers == null) {
			return null;
		} else {
			var node = new tink_core__$Callback_ListCell(cb,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				var fn = _this.onfill;
				if(tink_core_Callback.depth < 500) {
					tink_core_Callback.depth++;
					fn();
					tink_core_Callback.depth--;
				} else {
					tink_core_Callback.defer(fn);
				}
			}
			return node;
		}
	}
	,clear: function() {
		this.handlers.clear();
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
};
var tink_htmlstring_HtmlBuffer = {};
tink_htmlstring_HtmlBuffer._new = function() {
	return new tink_htmlstring_RawBuffer();
};
tink_htmlstring_HtmlBuffer.add = function(this1,s) {
	this1.out += s;
};
tink_htmlstring_HtmlBuffer.addRaw = function(this1,s) {
	this1.out += s;
};
tink_htmlstring_HtmlBuffer.toString = function(this1) {
	return this1.out;
};
tink_htmlstring_HtmlBuffer.toHtml = function(this1) {
	return this1.out;
};
var tink_htmlstring_RawBuffer = function() {
	this.out = "";
};
tink_htmlstring_RawBuffer.__name__ = true;
tink_htmlstring_RawBuffer.prototype = {
	out: null
	,add: function(value) {
		this.out += value;
	}
	,addSub: function(value,start,len) {
		this.out += HxOverrides.substr(value,start,len);
	}
	,toString: function() {
		return this.out;
	}
	,__class__: tink_htmlstring_RawBuffer
};
var tink_http_Chunked = function() { };
tink_http_Chunked.__name__ = true;
tink_http_Chunked.encoder = function() {
	if(tink_http_Chunked._encoder == null) {
		tink_http_Chunked._encoder = new tink_http_ChunkedEncoder();
	}
	return tink_http_Chunked._encoder;
};
tink_http_Chunked.decoder = function() {
	if(tink_http_Chunked._decoder == null) {
		tink_http_Chunked._decoder = new tink_http_ChunkedDecoder();
	}
	return tink_http_Chunked._decoder;
};
tink_http_Chunked.encode = function(source) {
	return tink_http_Chunked.encoder().transform(source);
};
tink_http_Chunked.decode = function(source) {
	return tink_http_Chunked.decoder().transform(source);
};
var tink_io_Transformer = function() { };
tink_io_Transformer.__name__ = true;
tink_io_Transformer.__isInterface__ = true;
tink_io_Transformer.prototype = {
	transform: null
	,__class__: tink_io_Transformer
};
var tink_http_ChunkedEncoder = function() {
};
tink_http_ChunkedEncoder.__name__ = true;
tink_http_ChunkedEncoder.__interfaces__ = [tink_io_Transformer];
tink_http_ChunkedEncoder.prototype = {
	transform: function(source) {
		return tink_io_Source.chunked(source).map(tink_streams_Mapping.ofPlain(function(chunk) {
			return tink_Chunk.concat(tink_Chunk.concat(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("" + StringTools.hex(chunk.getLength()) + "\r\n")),chunk),tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("\r\n")));
		})).append(tink_streams_Stream.ofIterator(new haxe_iterators_ArrayIterator([tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("0\r\n"))])));
	}
	,__class__: tink_http_ChunkedEncoder
};
var tink_http_ChunkedDecoder = function() {
};
tink_http_ChunkedDecoder.__name__ = true;
tink_http_ChunkedDecoder.__interfaces__ = [tink_io_Transformer];
tink_http_ChunkedDecoder.prototype = {
	transform: function(source) {
		return tink_io_RealSourceTools.parseStream(source,new tink_http_ChunkedParser()).map(tink_streams_Mapping.ofPlain(function(v) {
			if(v == null) {
				return tink_Chunk.EMPTY;
			} else {
				return v;
			}
		}));
	}
	,__class__: tink_http_ChunkedDecoder
};
var tink_io_StreamParserObject = function() { };
tink_io_StreamParserObject.__name__ = true;
tink_io_StreamParserObject.__isInterface__ = true;
tink_io_StreamParserObject.prototype = {
	progress: null
	,eof: null
	,__class__: tink_io_StreamParserObject
};
var tink_http_ChunkedParser = function() {
	this.reset();
};
tink_http_ChunkedParser.__name__ = true;
tink_http_ChunkedParser.__interfaces__ = [tink_io_StreamParserObject];
tink_http_ChunkedParser.prototype = {
	chunkSize: null
	,reset: function() {
		this.chunkSize = -1;
	}
	,progress: function(cursor) {
		if(this.chunkSize < 0) {
			var _g = cursor.seek(tink_http_ChunkedParser.LINEBREAK);
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.v;
				this.chunkSize = Std.parseInt("0x" + (_g1 == null ? "null" : _g1.toString()));
				break;
			case 1:
				break;
			}
			return tink_io_ParseStep.Progressed;
		} else if(this.chunkSize == 0) {
			return tink_io_ParseStep.Progressed;
		} else if(cursor.length >= this.chunkSize + 2) {
			var _g = cursor.seek(tink_http_ChunkedParser.LINEBREAK);
			switch(_g._hx_index) {
			case 0:
				this.reset();
				return tink_io_ParseStep.Done(_g.v);
			case 1:
				return tink_io_ParseStep.Failed(new tink_core_TypedError(null,"Invalid encoding",{ fileName : "tink/http/Chunked.hx", lineNumber : 82, className : "tink.http.ChunkedParser", methodName : "progress"}));
			}
		} else {
			return tink_io_ParseStep.Progressed;
		}
	}
	,eof: function(rest) {
		if(this.chunkSize == 0) {
			return tink_core_Outcome.Success(tink_Chunk.EMPTY);
		} else {
			return tink_core_Outcome.Failure(new tink_core_TypedError(null,"Unexpected end of input",{ fileName : "tink/http/Chunked.hx", lineNumber : 89, className : "tink.http.ChunkedParser", methodName : "eof"}));
		}
	}
	,__class__: tink_http_ChunkedParser
};
var tink_http_Container = function() { };
tink_http_Container.__name__ = true;
tink_http_Container.__isInterface__ = true;
tink_http_Container.prototype = {
	run: null
	,__class__: tink_http_Container
};
var tink_http_ContainerResult = $hxEnums["tink.http.ContainerResult"] = { __ename__:true,__constructs__:null
	,Running: ($_=function(running) { return {_hx_index:0,running:running,__enum__:"tink.http.ContainerResult",toString:$estr}; },$_._hx_name="Running",$_.__params__ = ["running"],$_)
	,Failed: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.http.ContainerResult",toString:$estr}; },$_._hx_name="Failed",$_.__params__ = ["e"],$_)
	,Shutdown: {_hx_name:"Shutdown",_hx_index:2,__enum__:"tink.http.ContainerResult",toString:$estr}
};
tink_http_ContainerResult.__constructs__ = [tink_http_ContainerResult.Running,tink_http_ContainerResult.Failed,tink_http_ContainerResult.Shutdown];
var tink_http_Handler = {};
tink_http_Handler.ofFunc = function(f) {
	return new tink_http_SimpleHandler(f);
};
tink_http_Handler.toNodeHandler = function(this1,options) {
	var body = options == null ? function(msg) {
		var options = null;
		options = { };
		return tink_http_IncomingRequestBody.Plain(tink_io_nodejs_NodejsSource.wrap("Incoming HTTP message from " + msg.socket.remoteAddress,msg,options.chunkSize,options.onEnd));
	} : options.body == null ? function(msg) {
		var options = null;
		options = { };
		return tink_http_IncomingRequestBody.Plain(tink_io_nodejs_NodejsSource.wrap("Incoming HTTP message from " + msg.socket.remoteAddress,msg,options.chunkSize,options.onEnd));
	} : options.body;
	return function(req,res) {
		this1.process(new tink_http_IncomingRequest(req.socket.remoteAddress,tink_http_IncomingRequestHeader.fromIncomingMessage(req),body(req))).handle(function(out) {
			var headers_h = Object.create(null);
			var _this = out.header.fields;
			var _g1_current = 0;
			while(_g1_current < _this.length) {
				var h = _this[_g1_current++];
				if(!Object.prototype.hasOwnProperty.call(headers_h,h.name)) {
					headers_h[h.name] = [];
				}
				headers_h[h.name].push(h.value);
			}
			var name = new haxe_ds__$StringMap_StringMapKeyIterator(headers_h);
			while(name.hasNext()) {
				var name1 = name.next();
				res.setHeader(name1,headers_h[name1]);
			}
			res.writeHead(out.header.statusCode,out.header.reason);
			tink_io_Source.pipeTo(out.body,tink_io_nodejs_NodejsSink.wrap("Outgoing HTTP response to " + req.socket.remoteAddress,res)).handle(function(x) {
				res.end();
			});
		});
	};
};
var tink_http_HandlerObject = function() { };
tink_http_HandlerObject.__name__ = true;
tink_http_HandlerObject.__isInterface__ = true;
tink_http_HandlerObject.prototype = {
	process: null
	,__class__: tink_http_HandlerObject
};
var tink_http_SimpleHandler = function(f) {
	this.f = f;
};
tink_http_SimpleHandler.__name__ = true;
tink_http_SimpleHandler.__interfaces__ = [tink_http_HandlerObject];
tink_http_SimpleHandler.prototype = {
	f: null
	,process: function(req) {
		return this.f(req);
	}
	,__class__: tink_http_SimpleHandler
};
var tink_http_ReadonlyMap = {};
tink_http_ReadonlyMap.get = function(this1,key) {
	return this1.get(key);
};
tink_http_ReadonlyMap.exists = function(this1,key) {
	return this1.exists(key);
};
tink_http_ReadonlyMap.iterator = function(this1) {
	return this1.iterator();
};
tink_http_ReadonlyMap.keys = function(this1) {
	return this1.keys();
};
var tink_http_ContentType = function() {
	this.subtype = "*";
	this.type = "*";
	this.extensions = new haxe_ds_StringMap();
};
tink_http_ContentType.__name__ = true;
tink_http_ContentType.ofString = function(s) {
	var ret = new tink_http_ContentType();
	ret.raw = s;
	var parsed = tink_http_HeaderValue.parse(s);
	var value = parsed[0].value;
	var _g = value.indexOf("/");
	if(_g == -1) {
		ret.type = value;
	} else {
		ret.type = value.substring(0,_g);
		ret.subtype = value.substring(_g + 1);
	}
	ret.extensions = parsed[0].extensions;
	return ret;
};
tink_http_ContentType.prototype = {
	get_fullType: function() {
		return "" + this.type + "/" + this.subtype;
	}
	,type: null
	,subtype: null
	,extensions: null
	,raw: null
	,toString: function() {
		return this.raw;
	}
	,__class__: tink_http_ContentType
};
var tink_http_Header = function(fields) {
	this.fields = fields == null ? [] : fields;
};
tink_http_Header.__name__ = true;
tink_http_Header.prototype = {
	fields: null
	,get: function(name) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			if(f.name == name) {
				_g.push(f.value);
			}
		}
		return _g;
	}
	,byName: function(name) {
		var _g = this.get(name);
		switch(_g.length) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"No " + name + " header found",{ fileName : "tink/http/Header.hx", lineNumber : 91, className : "tink.http.Header", methodName : "byName"}));
		case 1:
			return tink_core_Outcome.Success(_g[0]);
		default:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Multiple entries for " + name + " header",{ fileName : "tink/http/Header.hx", lineNumber : 95, className : "tink.http.Header", methodName : "byName"}));
		}
	}
	,contentType: function() {
		return tink_core_OutcomeTools.map(this.byName("content-type"),tink_http_ContentType.ofString);
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.fields);
	}
	,concat: function(fields) {
		return new tink_http_Header(this.fields.concat(fields));
	}
	,getContentLength: function() {
		var _g = this.byName("content-length");
		switch(_g._hx_index) {
		case 0:
			var _hx_tmp = Std.parseInt(_g.data);
			if(_hx_tmp == null) {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid Content-Length Header",{ fileName : "tink/http/Header.hx", lineNumber : 120, className : "tink.http.Header", methodName : "getContentLength"}));
			} else {
				return tink_core_Outcome.Success(_hx_tmp);
			}
			break;
		case 1:
			return tink_core_Outcome.Failure(_g.failure);
		}
	}
	,accepts: function(type) {
		var prefix = type.split("/")[0];
		return tink_core_OutcomeTools.map(this.byName("accept"),function(v) {
			var _g = 0;
			var _g1 = tink_http_HeaderValue.parse(v);
			while(_g < _g1.length) {
				var entry = _g1[_g];
				++_g;
				if(entry.value == "*/*" || entry.value == type) {
					return true;
				}
				var _g2 = entry.value.split("/");
				if(_g2.length == 2) {
					if(_g2[1] == "*") {
						if(prefix == _g2[0]) {
							return true;
						}
					}
				}
			}
			return false;
		});
	}
	,get_LINEBREAK: function() {
		return "\r\n";
	}
	,toString: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) _g.push(_g2[_g1++].toString());
		return _g.join("\r\n") + "\r\n" + "\r\n";
	}
	,headerNotFound: function(name) {
		return "No " + name + " header found";
	}
	,__class__: tink_http_Header
};
var tink_http_HeaderValue = {};
tink_http_HeaderValue.getExtension = function(this1) {
	return tink_http_HeaderValue.parse(this1)[0].extensions;
};
tink_http_HeaderValue.parse = function(this1) {
	return tink_http_HeaderValue.parseWith(this1,function(_,params) {
		var _g = new haxe_ds_StringMap();
		while(params.hasNext()) {
			var p = params.next();
			var key = p.name;
			var _g1 = tink_url_Portion.toString(p.value);
			_g.h[key] = HxOverrides.cca(_g1,0) == 34 ? HxOverrides.substr(_g1,1,_g1.length - 2) : _g1;
		}
		return _g;
	});
};
tink_http_HeaderValue.parseWith = function(this1,parseExtension) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.split(",");
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		v = StringTools.trim(v);
		var _g3 = v.indexOf(";");
		var i = _g3 == -1 ? v.length : _g3;
		var value = HxOverrides.substr(v,0,i);
		var pos = i + 1;
		if(pos == null) {
			pos = 0;
		}
		_g.push({ value : value, extensions : parseExtension(value,new tink_url__$Query_QueryStringParser(v,";","=",pos))});
	}
	return _g;
};
tink_http_HeaderValue.basicAuth = function(username,password) {
	return "Basic " + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString("" + username + ":" + password)).toString();
};
tink_http_HeaderValue.ofDate = function(d) {
	return DateTools.format(d,tink_http_HeaderValue.DAYS[d.getDay()] + ", %d " + tink_http_HeaderValue.MONTHS[d.getMonth()] + " %Y %H:%M:%S GMT");
};
tink_http_HeaderValue.ofInt = function(i) {
	if(i == null) {
		return "null";
	} else {
		return "" + i;
	}
};
var tink_http_HeaderName = {};
tink_http_HeaderName._new = function(s) {
	return s;
};
tink_http_HeaderName.ofString = function(s) {
	return s.toLowerCase();
};
var tink_http_HeaderField = function(name,value) {
	tink_core_NamedWith.call(this,name,value);
};
tink_http_HeaderField.__name__ = true;
tink_http_HeaderField.ofString = function(s) {
	var _g = s.indexOf(":");
	if(_g == -1) {
		return new tink_http_HeaderField(s.toLowerCase(),null);
	} else {
		return new tink_http_HeaderField(HxOverrides.substr(s,0,_g).toLowerCase(),StringTools.trim(HxOverrides.substr(s,_g + 1,null)));
	}
};
tink_http_HeaderField.setCookie = function(key,value,options) {
	if(options == null) {
		options = { };
	}
	var buf_b = "";
	buf_b += Std.string(encodeURIComponent(key) + "=" + encodeURIComponent(value));
	if(options.expires != null) {
		var value = tink_http_HeaderValue.ofDate(options.expires);
		if(value != null) {
			buf_b += "; ";
			buf_b += "expires=";
			buf_b += Std.string(value);
		}
	}
	var value = options.domain;
	if(value != null) {
		buf_b += "; ";
		buf_b += "domain=";
		buf_b += Std.string(value);
	}
	var value = options.path;
	if(value != null) {
		buf_b += "; ";
		buf_b += "path=";
		buf_b += Std.string(value);
	}
	if(options.secure) {
		buf_b += "; ";
		buf_b += "secure";
		buf_b += "";
	}
	if(options.scriptable != true) {
		buf_b += "; ";
		buf_b += "HttpOnly";
		buf_b += "";
	}
	return new tink_http_HeaderField("set-cookie",buf_b);
};
tink_http_HeaderField.__super__ = tink_core_NamedWith;
tink_http_HeaderField.prototype = $extend(tink_core_NamedWith.prototype,{
	toString: function() {
		if(this.value == null) {
			return this.name;
		} else {
			return "" + this.name + ": " + this.value;
		}
	}
	,__class__: tink_http_HeaderField
});
var tink_io_BytewiseParser = function() { };
tink_io_BytewiseParser.__name__ = true;
tink_io_BytewiseParser.__interfaces__ = [tink_io_StreamParserObject];
tink_io_BytewiseParser.prototype = {
	read: function(char) {
		throw haxe_Exception.thrown("abstract");
	}
	,progress: function(cursor) {
		while(true) {
			var _g = this.read(cursor.currentByte);
			switch(_g._hx_index) {
			case 0:
				break;
			case 1:
				cursor.next();
				return tink_io_ParseStep.Done(_g.r);
			case 2:
				return tink_io_ParseStep.Failed(_g.e);
			}
			if(!cursor.next()) {
				break;
			}
		}
		return tink_io_ParseStep.Progressed;
	}
	,eof: function(rest) {
		var _g = this.read(-1);
		switch(_g._hx_index) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Unexpected end of input",{ fileName : "tink/io/StreamParser.hx", lineNumber : 180, className : "tink.io.BytewiseParser", methodName : "eof"}));
		case 1:
			return tink_core_Outcome.Success(_g.r);
		case 2:
			return tink_core_Outcome.Failure(_g.e);
		}
	}
	,__class__: tink_io_BytewiseParser
};
var tink_io_ParseStep = $hxEnums["tink.io.ParseStep"] = { __ename__:true,__constructs__:null
	,Progressed: {_hx_name:"Progressed",_hx_index:0,__enum__:"tink.io.ParseStep",toString:$estr}
	,Done: ($_=function(r) { return {_hx_index:1,r:r,__enum__:"tink.io.ParseStep",toString:$estr}; },$_._hx_name="Done",$_.__params__ = ["r"],$_)
	,Failed: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"tink.io.ParseStep",toString:$estr}; },$_._hx_name="Failed",$_.__params__ = ["e"],$_)
};
tink_io_ParseStep.__constructs__ = [tink_io_ParseStep.Progressed,tink_io_ParseStep.Done,tink_io_ParseStep.Failed];
var tink_http_HeaderParser = function(makeHeader) {
	this.last = -1;
	this.buf = new StringBuf();
	this.makeHeader = makeHeader;
};
tink_http_HeaderParser.__name__ = true;
tink_http_HeaderParser.__super__ = tink_io_BytewiseParser;
tink_http_HeaderParser.prototype = $extend(tink_io_BytewiseParser.prototype,{
	header: null
	,fields: null
	,buf: null
	,last: null
	,makeHeader: null
	,read: function(c) {
		var _g = this.last;
		switch(c) {
		case -1:
			return this.nextLine();
		case 10:
			if(_g == 13) {
				return this.nextLine();
			} else {
				var other = c;
				this.last = other;
				this.buf.b += String.fromCodePoint(other);
				return tink_io_ParseStep.Progressed;
			}
			break;
		case 13:
			if(_g == 13) {
				var c1 = this.last;
				this.buf.b += String.fromCodePoint(c1);
				return tink_io_ParseStep.Progressed;
			} else {
				this.last = 13;
				return tink_io_ParseStep.Progressed;
			}
			break;
		default:
			if(_g == 13) {
				var other = c;
				var c1 = this.last;
				this.buf.b += String.fromCodePoint(c1);
				this.buf.b += String.fromCodePoint(other);
				this.last = -1;
				return tink_io_ParseStep.Progressed;
			} else {
				var other = c;
				this.last = other;
				this.buf.b += String.fromCodePoint(other);
				return tink_io_ParseStep.Progressed;
			}
		}
	}
	,nextLine: function() {
		var line = this.buf.b;
		this.buf = new StringBuf();
		this.last = -1;
		if(line == "") {
			if(this.header == null) {
				return tink_io_ParseStep.Progressed;
			} else {
				return tink_io_ParseStep.Done(this.header);
			}
		} else if(this.header == null) {
			var _g = this.makeHeader(line,this.fields = []);
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.data;
				if(_g1 == null) {
					return tink_io_ParseStep.Done(this.header = null);
				} else {
					this.header = _g1;
					return tink_io_ParseStep.Progressed;
				}
				break;
			case 1:
				return tink_io_ParseStep.Failed(_g.failure);
			}
		} else {
			this.fields.push(tink_http_HeaderField.ofString(line));
			return tink_io_ParseStep.Progressed;
		}
	}
	,__class__: tink_http_HeaderParser
});
var tink_http_Message = function(header,body) {
	this.header = header;
	this.body = body;
};
tink_http_Message.__name__ = true;
tink_http_Message.prototype = {
	header: null
	,body: null
	,__class__: tink_http_Message
};
var tink_http_Method = {};
tink_http_Method.ofString = function(s,fallback) {
	var _g = s.toUpperCase();
	switch(_g) {
	case "DELETE":
		return "DELETE";
	case "GET":
		return "GET";
	case "HEAD":
		return "HEAD";
	case "OPTIONS":
		return "OPTIONS";
	case "PATCH":
		return "PATCH";
	case "POST":
		return "POST";
	case "PUT":
		return "PUT";
	default:
		return fallback(_g);
	}
};
var tink_http_RequestHeader = function(method,url,protocol,fields) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	this.method = method;
	this.url = url;
	this.protocol = protocol;
	tink_http_Header.call(this,fields);
};
tink_http_RequestHeader.__name__ = true;
tink_http_RequestHeader.__super__ = tink_http_Header;
tink_http_RequestHeader.prototype = $extend(tink_http_Header.prototype,{
	method: null
	,url: null
	,protocol: null
	,concat: function(fields) {
		return new tink_http_RequestHeader(this.method,this.url,this.protocol,this.fields.concat(fields));
	}
	,toString: function() {
		var this1 = this.url;
		return "" + this.method + " " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)) + " " + this.protocol + "\r\n" + tink_http_Header.prototype.toString.call(this);
	}
	,__class__: tink_http_RequestHeader
});
var tink_http_IncomingRequestHeader = function(method,url,protocol,fields) {
	tink_http_RequestHeader.call(this,method,url,protocol,fields);
};
tink_http_IncomingRequestHeader.__name__ = true;
tink_http_IncomingRequestHeader.parser = function() {
	return new tink_http_HeaderParser(function(line,headers) {
		var _g = line.split(" ");
		if(_g.length == 3) {
			var _g1 = _g[2];
			return tink_core_Outcome.Success(new tink_http_IncomingRequestHeader(_g[0],tink_Url.fromString(_g[1]),_g1,headers));
		} else {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid HTTP header",{ fileName : "tink/http/Request.hx", lineNumber : 95, className : "tink.http.IncomingRequestHeader", methodName : "parser"}));
		}
	});
};
tink_http_IncomingRequestHeader.fromIncomingMessage = function(req) {
	var req1 = req.method;
	var tmp = tink_Url.fromString(req.url);
	var tmp1 = "HTTP/" + req.httpVersion;
	var _g = [];
	var _g1 = 0;
	var _g2 = req.rawHeaders.length / 2 | 0;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(new tink_http_HeaderField(req.rawHeaders[2 * i].toLowerCase(),req.rawHeaders[2 * i + 1]));
	}
	return new tink_http_IncomingRequestHeader(req1,tmp,tmp1,_g);
};
tink_http_IncomingRequestHeader.__super__ = tink_http_RequestHeader;
tink_http_IncomingRequestHeader.prototype = $extend(tink_http_RequestHeader.prototype,{
	cookies: null
	,getCookies: function() {
		if(this.cookies == null) {
			var _g = new haxe_ds_StringMap();
			var _g1 = 0;
			var _g2 = this.get("cookie".toLowerCase());
			while(_g1 < _g2.length) {
				var entry = new tink_url__$Query_QueryStringParser(_g2[_g1++],";","=",0);
				while(entry.hasNext()) {
					var entry1 = entry.next();
					var key = entry1.name;
					var value = tink_url_Portion.toString(entry1.value);
					_g.h[key] = value;
				}
			}
			this.cookies = _g;
		}
		return this.cookies;
	}
	,concat: function(fields) {
		return new tink_http_IncomingRequestHeader(this.method,this.url,this.protocol,this.fields.concat(fields));
	}
	,cookieNames: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.cookies.h);
	}
	,getCookie: function(name) {
		return this.getCookies().h[name];
	}
	,getAuth: function() {
		return this.getAuthWith(function(s,p) {
			switch(s) {
			case "Basic":
				var decoded;
				try {
					decoded = haxe_crypto_Base64.decode(p).toString();
				} catch( _g ) {
					return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error in decoding basic auth",haxe_Exception.caught(_g).unwrap(),{ fileName : "tink/http/Request.hx", lineNumber : 67, className : "tink.http.IncomingRequestHeader", methodName : "getAuth"}));
				}
				var _g = decoded.indexOf(":");
				if(_g == -1) {
					return tink_core_Outcome.Failure(new tink_core_TypedError(null,"Cannot parse username and password because \":\" is missing",{ fileName : "tink/http/Request.hx", lineNumber : 69, className : "tink.http.IncomingRequestHeader", methodName : "getAuth"}));
				} else {
					return tink_core_Outcome.Success(tink_http_Authorization.Basic(HxOverrides.substr(decoded,0,_g),HxOverrides.substr(decoded,_g + 1,null)));
				}
				break;
			case "Bearer":
				return tink_core_Outcome.Success(tink_http_Authorization.Bearer(p));
			default:
				return tink_core_Outcome.Success(tink_http_Authorization.Others(s,p));
			}
		});
	}
	,getAuthWith: function(parser) {
		return tink_core_OutcomeTools.flatMap(this.byName("authorization"),tink_core__$Outcome_OutcomeMapper.withSameError(function(v) {
			var _g = v.indexOf(" ");
			if(_g == -1) {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid Authorization Header",{ fileName : "tink/http/Request.hx", lineNumber : 81, className : "tink.http.IncomingRequestHeader", methodName : "getAuthWith"}));
			} else {
				return parser(HxOverrides.substr(v,0,_g),HxOverrides.substr(v,_g + 1,null));
			}
		}));
	}
	,__class__: tink_http_IncomingRequestHeader
});
var tink_http_OutgoingRequestHeader = function(method,url,protocol,fields) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	var _g = tink_http_OutgoingRequestHeader.extractAuth(url);
	if(_g._hx_index == 0) {
		var _g1 = _g.v;
		url = _g1.url;
		fields = fields.concat(_g1.headers);
	}
	tink_http_RequestHeader.call(this,method,url,protocol,fields);
};
tink_http_OutgoingRequestHeader.__name__ = true;
tink_http_OutgoingRequestHeader.extractAuth = function(url) {
	var _g = url.auth;
	if(_g == null) {
		return haxe_ds_Option.None;
	} else {
		var tmp = [new tink_http_HeaderField("authorization",tink_http_HeaderValue.basicAuth(_g == null ? null : _g.split(":")[0],_g == null ? null : _g.split(":")[1]))];
		var url1 = url.scheme;
		var _g = [];
		var _g1 = 0;
		var _g2 = url.hosts;
		while(_g1 < _g2.length) _g.push(_g2[_g1++]);
		return haxe_ds_Option.Some({ headers : tmp, url : tink_Url.make({ scheme : url1, hosts : _g, path : url.path, query : url.query})});
	}
};
tink_http_OutgoingRequestHeader.__super__ = tink_http_RequestHeader;
tink_http_OutgoingRequestHeader.prototype = $extend(tink_http_RequestHeader.prototype,{
	concat: function(fields) {
		return new tink_http_OutgoingRequestHeader(this.method,this.url,this.protocol,this.fields.concat(fields));
	}
	,__class__: tink_http_OutgoingRequestHeader
});
var tink_http_OutgoingRequest = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http_OutgoingRequest.__name__ = true;
tink_http_OutgoingRequest.__super__ = tink_http_Message;
tink_http_OutgoingRequest.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http_OutgoingRequest
});
var tink_http_IncomingRequest = function(clientIp,header,body) {
	this.clientIp = clientIp;
	tink_http_Message.call(this,header,body);
};
tink_http_IncomingRequest.__name__ = true;
tink_http_IncomingRequest.parse = function(clientIp,source) {
	return tink_core_Promise.next(tink_io_RealSourceTools.parse(source,tink_http_IncomingRequestHeader.parser()),function(parts) {
		var clientIp1 = clientIp;
		var parts1 = parts.a;
		var _g = parts.a.getContentLength();
		var d;
		switch(_g._hx_index) {
		case 0:
			d = tink_io_Source.limit(parts.b,_g.data);
			break;
		case 1:
			var _g = parts.a.method;
			var _g1 = parts.a.byName("transfer-encoding");
			switch(_g) {
			case "GET":case "OPTIONS":
				d = tink_io_Source.EMPTY;
				break;
			default:
				if(_g1._hx_index == 0) {
					var _this = _g1.data.split(",");
					var f = StringTools.trim;
					var result = new Array(_this.length);
					var _g = 0;
					var _g1 = _this.length;
					while(_g < _g1) {
						var i = _g++;
						result[i] = f(_this[i]);
					}
					if(result.indexOf("chunked") != -1) {
						var source = parts.b;
						d = tink_http_Chunked.decoder().transform(source);
					} else {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(411,"Content-Length header missing",{ fileName : "tink/http/Request.hx", lineNumber : 171, className : "tink.http.IncomingRequest", methodName : "parse"}))));
					}
				} else {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(411,"Content-Length header missing",{ fileName : "tink/http/Request.hx", lineNumber : 171, className : "tink.http.IncomingRequest", methodName : "parse"}))));
				}
			}
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(new tink_http_IncomingRequest(clientIp1,parts1,tink_http_IncomingRequestBody.Plain(d)))));
	});
};
tink_http_IncomingRequest.__super__ = tink_http_Message;
tink_http_IncomingRequest.prototype = $extend(tink_http_Message.prototype,{
	clientIp: null
	,__class__: tink_http_IncomingRequest
});
var tink_http_IncomingRequestBody = $hxEnums["tink.http.IncomingRequestBody"] = { __ename__:true,__constructs__:null
	,Plain: ($_=function(source) { return {_hx_index:0,source:source,__enum__:"tink.http.IncomingRequestBody",toString:$estr}; },$_._hx_name="Plain",$_.__params__ = ["source"],$_)
	,Parsed: ($_=function(parts) { return {_hx_index:1,parts:parts,__enum__:"tink.http.IncomingRequestBody",toString:$estr}; },$_._hx_name="Parsed",$_.__params__ = ["parts"],$_)
};
tink_http_IncomingRequestBody.__constructs__ = [tink_http_IncomingRequestBody.Plain,tink_http_IncomingRequestBody.Parsed];
var tink_http_Authorization = $hxEnums["tink.http.Authorization"] = { __ename__:true,__constructs__:null
	,Basic: ($_=function(user,pass) { return {_hx_index:0,user:user,pass:pass,__enum__:"tink.http.Authorization",toString:$estr}; },$_._hx_name="Basic",$_.__params__ = ["user","pass"],$_)
	,Bearer: ($_=function(token) { return {_hx_index:1,token:token,__enum__:"tink.http.Authorization",toString:$estr}; },$_._hx_name="Bearer",$_.__params__ = ["token"],$_)
	,Others: ($_=function(scheme,param) { return {_hx_index:2,scheme:scheme,param:param,__enum__:"tink.http.Authorization",toString:$estr}; },$_._hx_name="Others",$_.__params__ = ["scheme","param"],$_)
};
tink_http_Authorization.__constructs__ = [tink_http_Authorization.Basic,tink_http_Authorization.Bearer,tink_http_Authorization.Others];
var tink_http_ResponseHeader = {};
tink_http_ResponseHeader._new = function(statusCode,reason,fields,protocol) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	return new tink_http_ResponseHeaderBase(statusCode,reason,fields,protocol);
};
tink_http_ResponseHeader.fromStatusCode = function(code) {
	return new tink_http_ResponseHeaderBase(code,null,null,"HTTP/1.1");
};
tink_http_ResponseHeader.fromHeaderFields = function(fields) {
	return new tink_http_ResponseHeaderBase(200,null,fields,"HTTP/1.1");
};
tink_http_ResponseHeader.parser = function() {
	return tink_http_ResponseHeaderBase.parser();
};
var tink_http_ResponseHeaderBase = function(statusCode,reason,fields,protocol) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	this.statusCode = statusCode;
	this.reason = reason == null ? httpstatus_HttpStatusMessage.fromCode(statusCode) : reason;
	this.protocol = protocol;
	tink_http_Header.call(this,fields);
};
tink_http_ResponseHeaderBase.__name__ = true;
tink_http_ResponseHeaderBase.parser = function() {
	return new tink_http_HeaderParser(function(line,headers) {
		var _g = line.split(" ");
		if(_g.length >= 3) {
			var statusCode = Std.parseInt(_g[1]);
			var reason = _g.slice(2).join(" ");
			var protocol = _g[0];
			if(protocol == null) {
				protocol = "HTTP/1.1";
			}
			return tink_core_Outcome.Success(new tink_http_ResponseHeaderBase(statusCode,reason,headers,protocol));
		} else {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid HTTP response header",{ fileName : "tink/http/Response.hx", lineNumber : 56, className : "tink.http.ResponseHeaderBase", methodName : "parser"}));
		}
	});
};
tink_http_ResponseHeaderBase.__super__ = tink_http_Header;
tink_http_ResponseHeaderBase.prototype = $extend(tink_http_Header.prototype,{
	statusCode: null
	,reason: null
	,protocol: null
	,concat: function(fields) {
		var statusCode = this.statusCode;
		var reason = this.reason;
		var fields1 = this.fields.concat(fields);
		var protocol = this.protocol;
		if(protocol == null) {
			protocol = "HTTP/1.1";
		}
		return new tink_http_ResponseHeaderBase(statusCode,reason,fields1,protocol);
	}
	,toString: function() {
		return "" + this.protocol + " " + this.statusCode + " " + this.reason + "\r\n" + tink_http_Header.prototype.toString.call(this);
	}
	,__class__: tink_http_ResponseHeaderBase
});
var tink_http__$Response_OutgoingResponseData = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http__$Response_OutgoingResponseData.__name__ = true;
tink_http__$Response_OutgoingResponseData.__super__ = tink_http_Message;
tink_http__$Response_OutgoingResponseData.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http__$Response_OutgoingResponseData
});
var tink_http_OutgoingResponse = {};
tink_http_OutgoingResponse._new = function(header,body) {
	return new tink_http__$Response_OutgoingResponseData(header,body);
};
tink_http_OutgoingResponse.blob = function(code,chunk,contentType,headers) {
	if(code == null) {
		code = 200;
	}
	return new tink_http__$Response_OutgoingResponseData(new tink_http_ResponseHeaderBase(code,httpstatus_HttpStatusMessage.fromCode(code),[new tink_http_HeaderField("Content-Type".toLowerCase(),contentType),new tink_http_HeaderField("Content-Length".toLowerCase(),Std.string(chunk.getLength()))].concat(headers == null ? [] : headers),"HTTP/1.1"),new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk)));
};
tink_http_OutgoingResponse.chunked = function(contentType,headers,source) {
};
tink_http_OutgoingResponse.ofString = function(s) {
	return tink_http_OutgoingResponse.blob(null,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s)),"text/plain");
};
tink_http_OutgoingResponse.ofChunk = function(c) {
	return tink_http_OutgoingResponse.blob(null,c,"application/octet-stream");
};
tink_http_OutgoingResponse.reportError = function(e) {
	var code = e.code;
	if(code < 100 || code > 999) {
		code = 500;
	}
	return new tink_http__$Response_OutgoingResponseData(new tink_http_ResponseHeaderBase(code,httpstatus_HttpStatusMessage.fromCode(code),[new tink_http_HeaderField("Content-Type".toLowerCase(),"application/json")],"HTTP/1.1"),new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(JSON.stringify({ error : e.message, details : e.data}))))));
};
var tink_http_IncomingResponse = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http_IncomingResponse.__name__ = true;
tink_http_IncomingResponse.readAll = function(res) {
	return tink_core_Promise.next(tink_io_RealSourceTools.all(res.body),function(b) {
		if(res.header.statusCode >= 400) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(tink_core_TypedError.withData(res.header.statusCode,res.header.reason,b.toString(),{ fileName : "tink/http/Response.hx", lineNumber : 115, className : "tink.http.IncomingResponse", methodName : "readAll"}))));
		} else {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(b)));
		}
	});
};
tink_http_IncomingResponse.reportError = function(e) {
	return new tink_http_IncomingResponse(new tink_http_ResponseHeaderBase(e.code,httpstatus_HttpStatusMessage.fromCode(e.code),[new tink_http_HeaderField("Content-Type".toLowerCase(),"application/json")],"HTTP/1.1"),new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(JSON.stringify({ error : e.message, details : e.data}))))));
};
tink_http_IncomingResponse.__super__ = tink_http_Message;
tink_http_IncomingResponse.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http_IncomingResponse
});
var tink_http_BodyPart = $hxEnums["tink.http.BodyPart"] = { __ename__:true,__constructs__:null
	,Value: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.http.BodyPart",toString:$estr}; },$_._hx_name="Value",$_.__params__ = ["v"],$_)
	,File: ($_=function(handle) { return {_hx_index:1,handle:handle,__enum__:"tink.http.BodyPart",toString:$estr}; },$_._hx_name="File",$_.__params__ = ["handle"],$_)
};
tink_http_BodyPart.__constructs__ = [tink_http_BodyPart.Value,tink_http_BodyPart.File];
var tink_http_UploadedFile = {};
tink_http_UploadedFile.ofBlob = function(name,type,data) {
	return { fileName : name, mimeType : type, size : data.length, read : function() {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(data)));
	}, saveTo : function(path) {
		var dest = tink_io_nodejs_NodejsSink.wrap("File sink " + path,js_node_Fs.createWriteStream(path));
		return tink_core_Future.map(tink_io_Source.pipeTo(new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(data))),dest,{ end : true}),function(r) {
			switch(r._hx_index) {
			case 0:
				return tink_core_Outcome.Success(null);
			case 1:
				return tink_core_Outcome.Failure(new tink_core_TypedError(null,"File $path closed unexpectedly",{ fileName : "tink/http/StructuredBody.hx", lineNumber : 37, className : "tink.http._StructuredBody.UploadedFile_Impl_", methodName : "ofBlob"}));
			case 2:
				return tink_core_Outcome.Failure(r.e);
			}
		});
	}};
};
var tink_http_containers_NodeContainer = function(kind,opt) {
	this.kind = kind;
	this.upgradable = opt != null && opt.upgradable;
};
tink_http_containers_NodeContainer.__name__ = true;
tink_http_containers_NodeContainer.__interfaces__ = [tink_http_Container];
tink_http_containers_NodeContainer.toUpgradeHandler = function(handler) {
	return function(req,socket,head) {
		var handler1 = handler;
		var req1 = req.socket.remoteAddress;
		var this1 = tink_http_IncomingRequestHeader.fromIncomingMessage(req);
		var options = null;
		options = { };
		handler1.process(new tink_http_IncomingRequest(req1,this1,tink_http_IncomingRequestBody.Plain(tink_io_nodejs_NodejsSource.wrap("Incoming HTTP message from " + req.socket.remoteAddress,socket,options.chunkSize,options.onEnd)))).handle(function(out) {
			tink_io_Source.pipeTo(out.body.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(out.header.toString()))))),tink_io_nodejs_NodejsSink.wrap("Outgoing HTTP response to " + req.socket.remoteAddress,socket)).handle(function(_) {
				socket.end();
			});
		});
	};
};
tink_http_containers_NodeContainer.prototype = {
	kind: null
	,upgradable: null
	,run: function(handler) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			var failures = tink_core_Signal.trigger();
			var server;
			var _g = _gthis.kind;
			switch(_g._hx_index) {
			case 0:
				var server1 = _g.server;
				server = server1;
				break;
			case 1:
				var port = _g.port;
				var server1 = new js_node_http_Server();
				server1.listen(port);
				server = server1;
				break;
			case 2:
				var host = _g.host;
				var server1 = new js_node_http_Server();
				server1.listen(tink_url_Host.get_port(host),tink_url_Host.get_name(host));
				server = server1;
				break;
			case 3:
				var path = _g.path;
				var server1 = new js_node_http_Server();
				server1.listen(path);
				server = server1;
				break;
			case 4:
				var fd = _g.fd;
				var server1 = new js_node_http_Server();
				server1.listen(fd);
				server = server1;
				break;
			}
			var tinkify = function(e) {
				return tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/http/containers/NodeContainer.hx", lineNumber : 69, className : "tink.http.containers.NodeContainer", methodName : "run"});
			};
			server.on("error",function(e) {
				cb(tink_http_ContainerResult.Failed(e));
			});
			if(_gthis.upgradable) {
				server.on("upgrade",tink_http_containers_NodeContainer.toUpgradeHandler(handler));
			}
			var onListen = function() {
				var onListen = tink_http_ContainerResult.Running({ shutdown : function(hard) {
					if(hard) {
						console.log("tink/http/containers/NodeContainer.hx:82:","Warning: hard shutdown not implemented");
					}
					return tink_core_Future.map(tink_core_Future.async(function(cb) {
						server.close(function() {
							cb(true);
						});
					}),tink_core_Outcome.Success);
				}, failures : failures});
				cb(onListen);
			};
			if(server.listening) {
				onListen();
			} else {
				server.on("listening",onListen);
			}
			server.on("request",tink_http_Handler.toNodeHandler(handler));
			server.on("error",function(e) {
				cb(tink_http_ContainerResult.Failed(e));
			});
		});
	}
	,__class__: tink_http_containers_NodeContainer
};
var tink_http_containers__$NodeContainer_ServerKindBase = $hxEnums["tink.http.containers._NodeContainer.ServerKindBase"] = { __ename__:true,__constructs__:null
	,Instance: ($_=function(server) { return {_hx_index:0,server:server,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_._hx_name="Instance",$_.__params__ = ["server"],$_)
	,Port: ($_=function(port) { return {_hx_index:1,port:port,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_._hx_name="Port",$_.__params__ = ["port"],$_)
	,Host: ($_=function(host) { return {_hx_index:2,host:host,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_._hx_name="Host",$_.__params__ = ["host"],$_)
	,Path: ($_=function(path) { return {_hx_index:3,path:path,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_._hx_name="Path",$_.__params__ = ["path"],$_)
	,Fd: ($_=function(fd) { return {_hx_index:4,fd:fd,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_._hx_name="Fd",$_.__params__ = ["fd"],$_)
};
tink_http_containers__$NodeContainer_ServerKindBase.__constructs__ = [tink_http_containers__$NodeContainer_ServerKindBase.Instance,tink_http_containers__$NodeContainer_ServerKindBase.Port,tink_http_containers__$NodeContainer_ServerKindBase.Host,tink_http_containers__$NodeContainer_ServerKindBase.Path,tink_http_containers__$NodeContainer_ServerKindBase.Fd];
var tink_http_containers_ServerKind = {};
tink_http_containers_ServerKind.fromInstance = function(server) {
	return tink_http_containers__$NodeContainer_ServerKindBase.Instance(server);
};
tink_http_containers_ServerKind.fromPort = function(port) {
	return tink_http_containers__$NodeContainer_ServerKindBase.Port(port);
};
tink_http_containers_ServerKind.fromHost = function(host) {
	return tink_http_containers__$NodeContainer_ServerKindBase.Host(host);
};
tink_http_containers_ServerKind.fromPath = function(path) {
	return tink_http_containers__$NodeContainer_ServerKindBase.Path(path);
};
tink_http_containers_ServerKind.fromFd = function(fd) {
	return tink_http_containers__$NodeContainer_ServerKindBase.Fd(fd);
};
var tink_io_PipeOptions = {};
tink_io_PipeOptions.get_end = function(this1) {
	if(this1 != null) {
		return this1.end;
	} else {
		return false;
	}
};
tink_io_PipeOptions.get_destructive = function(this1) {
	if(this1 != null) {
		return this1.destructive;
	} else {
		return false;
	}
};
var tink_io_PipeResult = $hxEnums["tink.io.PipeResult"] = { __ename__:true,__constructs__:null
	,AllWritten: {_hx_name:"AllWritten",_hx_index:0,__enum__:"tink.io.PipeResult",toString:$estr}
	,SinkEnded: ($_=function(result,rest) { return {_hx_index:1,result:result,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_._hx_name="SinkEnded",$_.__params__ = ["result","rest"],$_)
	,SinkFailed: ($_=function(e,rest) { return {_hx_index:2,e:e,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_._hx_name="SinkFailed",$_.__params__ = ["e","rest"],$_)
	,SourceFailed: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.io.PipeResult",toString:$estr}; },$_._hx_name="SourceFailed",$_.__params__ = ["e"],$_)
};
tink_io_PipeResult.__constructs__ = [tink_io_PipeResult.AllWritten,tink_io_PipeResult.SinkEnded,tink_io_PipeResult.SinkFailed,tink_io_PipeResult.SourceFailed];
var tink_io_PipeResultTools = function() { };
tink_io_PipeResultTools.__name__ = true;
tink_io_PipeResultTools.toOutcome = function(result) {
	switch(result._hx_index) {
	case 0:
		return tink_core_Outcome.Success(haxe_ds_Option.None);
	case 1:
		return tink_core_Outcome.Success(haxe_ds_Option.Some(result.result));
	case 2:
		return tink_core_Outcome.Failure(result.e);
	case 3:
		return tink_core_Outcome.Failure(result.e);
	}
};
tink_io_PipeResultTools.toResult = function(c,result,buffered) {
	var mk = function(s) {
		if(buffered == null) {
			return s;
		} else {
			return s.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(buffered)));
		}
	};
	switch(c._hx_index) {
	case 0:
		return tink_io_PipeResult.SinkEnded(result,mk(c.rest));
	case 1:
		return tink_io_PipeResult.SinkFailed(c.error,mk(c.at));
	case 2:
		return tink_io_PipeResult.SourceFailed(c.error);
	case 3:
		return tink_io_PipeResult.AllWritten;
	}
};
var tink_io_SinkObject = function() { };
tink_io_SinkObject.__name__ = true;
tink_io_SinkObject.__isInterface__ = true;
tink_io_SinkObject.prototype = {
	get_sealed: null
	,consume: null
	,__class__: tink_io_SinkObject
};
var tink_io_SinkBase = function() { };
tink_io_SinkBase.__name__ = true;
tink_io_SinkBase.__interfaces__ = [tink_io_SinkObject];
tink_io_SinkBase.prototype = {
	get_sealed: function() {
		return true;
	}
	,consume: function(source,options) {
		throw haxe_Exception.thrown("not implemented");
	}
	,__class__: tink_io_SinkBase
};
var tink_io__$Sink_Blackhole = function() {
};
tink_io__$Sink_Blackhole.__name__ = true;
tink_io__$Sink_Blackhole.__super__ = tink_io_SinkBase;
tink_io__$Sink_Blackhole.prototype = $extend(tink_io_SinkBase.prototype,{
	consume: function(source,options) {
		return tink_core_Future.map(source.forEach(tink_streams_Handler.ofSafe(function(_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		})),function(o) {
			switch(o._hx_index) {
			case 0:
				throw haxe_Exception.thrown("unreachable");
			case 2:
				return tink_io_PipeResult.SourceFailed(o.error);
			case 3:
				return tink_io_PipeResult.AllWritten;
			}
		});
	}
	,__class__: tink_io__$Sink_Blackhole
});
var tink_io_SinkYielding = {};
tink_io_SinkYielding.end = function(this1) {
	if(this1.get_sealed()) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(false)));
	} else {
		return tink_core_Future.map(this1.consume(tink_io_Source.EMPTY,{ end : true}),function(r) {
			switch(r._hx_index) {
			case 0:
				return tink_core_Outcome.Success(true);
			case 1:
				return tink_core_Outcome.Success(true);
			case 2:
				return tink_core_Outcome.Failure(r.e);
			}
		});
	}
};
tink_io_SinkYielding.dirty = function(this1) {
	return this1;
};
tink_io_SinkYielding.ofError = function(e) {
	return new tink_io__$Sink_ErrorSink(e);
};
tink_io_SinkYielding.ofPromised = function(p) {
	return new tink_io__$Sink_FutureSink(tink_core_Future.map(p,function(o) {
		switch(o._hx_index) {
		case 0:
			return o.data;
		case 1:
			return tink_io_SinkYielding.ofError(o.failure);
		}
	}));
};
tink_io_SinkYielding.ofNodeStream = function(name,r) {
	return tink_io_nodejs_NodejsSink.wrap(name,r);
};
tink_io_SinkYielding.ofOutput = function(name,target,options) {
	var tmp;
	if(options == null) {
		tmp = tink_io_Worker.get();
	} else {
		var _g = options.worker;
		tmp = _g == null ? tink_io_Worker.get() : _g;
	}
	return new tink_io_std_OutputSink(name,target,tmp);
};
var tink_io__$Sink_FutureSink = function(f) {
	this.f = f;
};
tink_io__$Sink_FutureSink.__name__ = true;
tink_io__$Sink_FutureSink.__super__ = tink_io_SinkBase;
tink_io__$Sink_FutureSink.prototype = $extend(tink_io_SinkBase.prototype,{
	f: null
	,consume: function(source,options) {
		return tink_core_Future.flatMap(this.f,function(sink) {
			return sink.consume(source,options);
		});
	}
	,__class__: tink_io__$Sink_FutureSink
});
var tink_io__$Sink_ErrorSink = function(error) {
	this.error = error;
};
tink_io__$Sink_ErrorSink.__name__ = true;
tink_io__$Sink_ErrorSink.__super__ = tink_io_SinkBase;
tink_io__$Sink_ErrorSink.prototype = $extend(tink_io_SinkBase.prototype,{
	error: null
	,get_sealed: function() {
		return false;
	}
	,consume: function(source,options) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_PipeResult.SinkFailed(this.error,source)));
	}
	,__class__: tink_io__$Sink_ErrorSink
});
var tink_streams_StreamObject = function() { };
tink_streams_StreamObject.__name__ = true;
tink_streams_StreamObject.__isInterface__ = true;
tink_streams_StreamObject.prototype = {
	get_depleted: null
	,next: null
	,regroup: null
	,map: null
	,filter: null
	,retain: null
	,idealize: null
	,append: null
	,prepend: null
	,blend: null
	,decompose: null
	,forEach: null
	,reduce: null
	,__class__: tink_streams_StreamObject
};
var tink_streams_StreamBase = function() {
	this.retainCount = 0;
};
tink_streams_StreamBase.__name__ = true;
tink_streams_StreamBase.__interfaces__ = [tink_streams_StreamObject];
tink_streams_StreamBase.prototype = {
	get_depleted: function() {
		return false;
	}
	,retainCount: null
	,retain: function() {
		var _gthis = this;
		this.retainCount++;
		var retained = true;
		return function() {
			if(retained) {
				retained = false;
				if(--_gthis.retainCount == 0) {
					_gthis.destroy();
				}
			}
		};
	}
	,next: function() {
		throw haxe_Exception.thrown("not implemented");
	}
	,regroup: function(f) {
		return new tink_streams__$Stream_RegroupStream(this,f);
	}
	,map: function(f) {
		return this.regroup(f);
	}
	,filter: function(f) {
		return this.regroup(f);
	}
	,destroy: function() {
	}
	,append: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([this,other]);
		}
	}
	,prepend: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([other,this]);
		}
	}
	,blend: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return new tink_streams_BlendStream(this,other);
		}
	}
	,decompose: function(into) {
		if(!this.get_depleted()) {
			into.push(this);
		}
	}
	,idealize: function(rescue) {
		if(this.get_depleted()) {
			return tink_streams_Empty.inst;
		} else {
			return new tink_streams_IdealizeStream(this,rescue);
		}
	}
	,reduce: function(initial,reducer) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.forEach(tink_streams_Handler.ofUnknown(function(item) {
				return tink_core_Future.map(reducer(initial,item),function(o) {
					switch(o._hx_index) {
					case 0:
						initial = o.result;
						return tink_streams_Handled.Resume;
					case 1:
						return tink_streams_Handled.Clog(o.e);
					}
				});
			})).handle(function(c) {
				switch(c._hx_index) {
				case 0:
					throw haxe_Exception.thrown("assert");
				case 1:
					cb(tink_streams_Reduction.Crashed(c.error,c.at));
					break;
				case 2:
					cb(tink_streams_Reduction.Failed(c.error));
					break;
				case 3:
					cb(tink_streams_Reduction.Reduced(initial));
					break;
				}
			});
		});
	}
	,forEach: function(handler) {
		throw haxe_Exception.thrown("not implemented");
	}
	,__class__: tink_streams_StreamBase
};
var tink_streams_Empty = function() {
	tink_streams_StreamBase.call(this);
};
tink_streams_Empty.__name__ = true;
tink_streams_Empty.make = function() {
	return tink_streams_Empty.inst;
};
tink_streams_Empty.__super__ = tink_streams_StreamBase;
tink_streams_Empty.prototype = $extend(tink_streams_StreamBase.prototype,{
	get_depleted: function() {
		return true;
	}
	,next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Depleted));
	}
	,__class__: tink_streams_Empty
});
var tink_io_Source = {};
tink_io_Source.dirty = function(this1) {
	return this1;
};
tink_io_Source.get_depleted = function(this1) {
	return this1.get_depleted();
};
tink_io_Source.ofNodeStream = function(name,r,options) {
	if(options == null) {
		options = { };
	}
	return tink_io_nodejs_NodejsSource.wrap(name,r,options.chunkSize,options.onEnd);
};
tink_io_Source.toNodeStream = function(this1) {
	var native = new js_node_stream_PassThrough();
	var source = tink_io_Source.chunked(this1);
	var write = null;
	write = function() {
		source.forEach(tink_streams_Handler.ofSafe(function(chunk) {
			var native1 = native;
			var b = chunk.toBytes();
			var data = b.b;
			if(native1.write(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length))) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Finish));
			}
		})).handle(function(o) {
			switch(o._hx_index) {
			case 0:
				source = o.rest;
				break;
			case 2:
				native.emit("error",new Error(o.error.message));
				break;
			case 3:
				native.removeListener("drain",write);
				native.end();
				break;
			}
		});
	};
	var f = write;
	var time_ms = 1;
	var tmp = function() {
		return haxe_Timer.delay(f,time_ms);
	};
	native.on("drain",tmp);
	write();
	return native;
};
tink_io_Source.ofJsFile = function(name,file,options) {
	return new tink_io_js_BlobSource(name,file,0,options == null || options.chunkSize == null ? 16777216 : options.chunkSize);
};
tink_io_Source.ofJsBlob = function(name,blob,options) {
	return new tink_io_js_BlobSource(name,blob,0,options == null || options.chunkSize == null ? 16777216 : options.chunkSize);
};
tink_io_Source.ofInput = function(name,input,options) {
	if(options == null) {
		options = { };
	}
	var tmp = tink_io_Worker.ensure(options.worker);
	var _g = options.chunkSize;
	return new tink_io_std_InputSource(name,input,tmp,new haxe_io_Bytes(new ArrayBuffer(_g == null ? 65536 : _g)),0);
};
tink_io_Source.chunked = function(this1) {
	return this1;
};
tink_io_Source.concatAll = function(s) {
	return s.reduce(tink_Chunk.EMPTY,tink_streams_Reducer.ofSafe(function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(tink_Chunk.concat(res,cur))));
	}));
};
tink_io_Source.pipeTo = function(this1,target,options) {
	return target.consume(this1,options);
};
tink_io_Source.append = function(this1,that) {
	return this1.append(that);
};
tink_io_Source.prepend = function(this1,that) {
	return this1.prepend(that);
};
tink_io_Source.transform = function(this1,transformer) {
	return transformer.transform(this1);
};
tink_io_Source.skip = function(this1,len) {
	return this1.regroup(tink_streams_Regrouper.ofIgnoranceSync(function(chunks) {
		var chunk = chunks[0];
		if(len <= 0) {
			return tink_streams_RegroupResult.Converted(tink_streams_Stream.single(chunk));
		}
		var length = chunk.getLength();
		var out = len < length ? tink_streams_Stream.single(chunk.slice(len,length)) : tink_streams_Empty.inst;
		len -= length;
		return tink_streams_RegroupResult.Converted(out);
	}));
};
tink_io_Source.limit = function(this1,len) {
	if(len == 0) {
		return tink_io_Source.EMPTY;
	}
	return this1.regroup(tink_streams_Regrouper.ofIgnoranceSync(function(chunks) {
		if(len <= 0) {
			return tink_streams_RegroupResult.Terminated(haxe_ds_Option.None);
		}
		var chunk = chunks[0];
		var length = chunk.getLength();
		var out = len == length ? tink_streams_RegroupResult.Terminated(haxe_ds_Option.Some(tink_streams_Stream.single(chunk))) : tink_streams_RegroupResult.Converted(tink_streams_Stream.single(len < length ? chunk.slice(0,len) : chunk));
		len -= length;
		return out;
	}));
};
tink_io_Source.ofError = function(e) {
	return tink_streams_Stream.ofError(e);
};
tink_io_Source.ofFuture = function(f) {
	return tink_streams_Stream.future(f);
};
tink_io_Source.ofPromised = function(p) {
	return tink_streams_Stream.future(tink_core_Future.map(p,function(o) {
		switch(o._hx_index) {
		case 0:
			return o.data;
		case 1:
			return tink_io_Source.ofError(o.failure);
		}
	}));
};
tink_io_Source.ofChunk = function(chunk) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk));
};
tink_io_Source.ofString = function(s) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s))));
};
tink_io_Source.ofBytes = function(b) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(b)));
};
tink_io_Source.ofFutureChunk = function(chunk) {
	return tink_io_Source.ofFuture(tink_core_Future.map(chunk,tink_io_Source.ofChunk));
};
tink_io_Source.ofFutureString = function(s) {
	return tink_io_Source.ofFuture(tink_core_Future.map(s,tink_io_Source.ofString));
};
tink_io_Source.ofFutureBytes = function(b) {
	return tink_io_Source.ofFuture(tink_core_Future.map(b,tink_io_Source.ofBytes));
};
tink_io_Source.ofPromiseChunk = function(chunk) {
	return tink_io_Source.ofPromised(tink_core_Promise.next(chunk,tink_core_Next.ofSafeSync(tink_io_Source.ofChunk)));
};
tink_io_Source.ofPromiseString = function(s) {
	return tink_io_Source.ofPromised(tink_core_Promise.next(s,tink_core_Next.ofSafeSync(tink_io_Source.ofString)));
};
tink_io_Source.ofPromiseBytes = function(b) {
	return tink_io_Source.ofPromised(tink_core_Promise.next(b,tink_core_Next.ofSafeSync(tink_io_Source.ofBytes)));
};
var tink_io_RealSourceTools = function() { };
tink_io_RealSourceTools.__name__ = true;
tink_io_RealSourceTools.all = function(s) {
	return tink_core_Future.map(tink_io_Source.concatAll(s),function(o) {
		switch(o._hx_index) {
		case 1:
			return tink_core_Outcome.Failure(o.error);
		case 2:
			return tink_core_Outcome.Success(o.result);
		}
	});
};
tink_io_RealSourceTools.parse = function(s,p) {
	return tink_core_Future.map(tink_io_StreamParser.parse(s,p),function(r) {
		switch(r._hx_index) {
		case 0:
			return tink_core_Outcome.Success(new tink_core_MPair(r.data,r.rest));
		case 1:
			return tink_core_Outcome.Failure(r.e);
		case 2:
			return tink_core_Outcome.Failure(r.e);
		}
	});
};
tink_io_RealSourceTools.split = function(src,delim) {
	var s = tink_io_RealSourceTools.parse(src,new tink_io_Splitter(delim));
	return { before : tink_streams_Stream.promise(tink_core_Promise.next(s,tink_core_Next.ofSafeSync(function(p) {
		var _g = p.a;
		switch(_g._hx_index) {
		case 0:
			return new tink_streams_Single(new tink_core__$Lazy_LazyConst(_g.v));
		case 1:
			return src;
		}
	}))), delimiter : tink_core_Promise.next(s,function(p) {
		switch(p.a._hx_index) {
		case 0:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(delim)));
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Delimiter not found",{ fileName : "tink/io/Source.hx", lineNumber : 213, className : "tink.io.RealSourceTools", methodName : "split"}))));
		}
	}), after : tink_streams_Stream.promise(tink_core_Promise.next(s,tink_core_Next.ofSafeSync(function(p) {
		return p.b;
	})))};
};
tink_io_RealSourceTools.parseStream = function(s,p) {
	return tink_io_StreamParser.parseStream(s,p);
};
tink_io_RealSourceTools.idealize = function(s,rescue) {
	return tink_io_Source.chunked(s).idealize(rescue);
};
var tink_io_IdealSourceTools = function() { };
tink_io_IdealSourceTools.__name__ = true;
tink_io_IdealSourceTools.all = function(s) {
	return tink_core_Future.map(tink_io_Source.concatAll(s),function(o) {
		return o.result;
	});
};
tink_io_IdealSourceTools.parse = function(s,p) {
	return tink_core_Future.map(tink_io_StreamParser.parse(s,p),function(r) {
		switch(r._hx_index) {
		case 0:
			return tink_core_Outcome.Success(new tink_core_MPair(r.data,r.rest));
		case 1:
			return tink_core_Outcome.Failure(r.e);
		}
	});
};
tink_io_IdealSourceTools.parseStream = function(s,p) {
	return tink_io_StreamParser.parseStream(s,p);
};
tink_io_IdealSourceTools.split = function(s,delim) {
	var s1 = tink_io_RealSourceTools.split(s,delim);
	return { before : tink_io_RealSourceTools.idealize(s1.before,function(e) {
		return tink_io_Source.EMPTY;
	}), delimiter : s1.delimiter, after : tink_io_RealSourceTools.idealize(s1.after,function(e) {
		return tink_io_Source.EMPTY;
	})};
};
var tink_io_ParseResult = $hxEnums["tink.io.ParseResult"] = { __ename__:true,__constructs__:null
	,Parsed: ($_=function(data,rest) { return {_hx_index:0,data:data,rest:rest,__enum__:"tink.io.ParseResult",toString:$estr}; },$_._hx_name="Parsed",$_.__params__ = ["data","rest"],$_)
	,Invalid: ($_=function(e,rest) { return {_hx_index:1,e:e,rest:rest,__enum__:"tink.io.ParseResult",toString:$estr}; },$_._hx_name="Invalid",$_.__params__ = ["e","rest"],$_)
	,Broke: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"tink.io.ParseResult",toString:$estr}; },$_._hx_name="Broke",$_.__params__ = ["e"],$_)
};
tink_io_ParseResult.__constructs__ = [tink_io_ParseResult.Parsed,tink_io_ParseResult.Invalid,tink_io_ParseResult.Broke];
var tink_io_StreamParser = {};
tink_io_StreamParser.doParse = function(source,p,consume,finish) {
	var cursor = tink_Chunk.EMPTY.getCursor();
	var resume = true;
	var mk = function(source) {
		if(cursor.currentPos < cursor.length) {
			return source.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(cursor.right())));
		} else {
			return source;
		}
	};
	var flush = function() {
		var _g = cursor.flush();
		if(_g.getLength() == 0) {
			return tink_io_Source.EMPTY;
		} else {
			return new tink_streams_Single(new tink_core__$Lazy_LazyConst(_g));
		}
	};
	return tink_core_Future.flatMap(source.forEach(tink_streams_Handler.ofUnknown(function(chunk) {
		if(chunk.getLength() == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		}
		cursor.shift(chunk);
		return tink_core_Future.async(function(cb) {
			var next = null;
			next = function() {
				cursor.shift();
				var lastPos = cursor.currentPos;
				var _g = p.progress(cursor);
				switch(_g._hx_index) {
				case 0:
					if(lastPos != cursor.currentPos && cursor.currentPos < cursor.length) {
						next();
					} else {
						cb(tink_streams_Handled.Resume);
					}
					break;
				case 1:
					consume(_g.r).handle(function(o) {
						resume = o.resume;
						if(resume) {
							if(lastPos != cursor.currentPos && cursor.currentPos < cursor.length) {
								next();
							} else {
								cb(tink_streams_Handled.Resume);
							}
						} else {
							cb(tink_streams_Handled.Finish);
						}
					});
					break;
				case 2:
					cb(tink_streams_Handled.Clog(_g.e));
					break;
				}
			};
			next();
		});
	})),function(c) {
		switch(c._hx_index) {
		case 0:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),mk(c.rest))));
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(c.error,mk(c.at))));
		case 2:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Broke(c.error)));
		case 3:
			if(cursor.currentPos < cursor.length) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),mk(new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_Chunk.EMPTY))))));
			} else if(!resume) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),flush())));
			} else {
				var _g = p.eof(cursor);
				switch(_g._hx_index) {
				case 0:
					return tink_core_Future.map(consume(_g.data),function(_) {
						return tink_io_ParseResult.Parsed(finish(),flush());
					});
				case 1:
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(_g.failure,flush())));
				}
			}
			break;
		}
	});
};
tink_io_StreamParser.parse = function(s,p) {
	var res = null;
	return tink_io_StreamParser.doParse(s,p,function(r) {
		res = r;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst({ resume : false}));
	},function() {
		return res;
	});
};
tink_io_StreamParser.parseStream = function(s,p) {
	var next = null;
	next = function(step) {
		if(s.get_depleted()) {
			step(tink_streams_Step.End);
		} else {
			tink_io_StreamParser.parse(s,p).handle(function(o) {
				switch(o._hx_index) {
				case 0:
					s = o.rest;
					step(tink_streams_Step.Link(o.data,tink_streams_Generator.stream(next)));
					break;
				case 1:
					step(tink_streams_Step.Fail(o.e));
					break;
				case 2:
					step(tink_streams_Step.Fail(o.e));
					break;
				}
			});
		}
	};
	return tink_streams_Generator.stream(next);
};
var tink_io_Splitter = function(delim) {
	this.buf = tink_Chunk.EMPTY;
	this.delim = delim;
};
tink_io_Splitter.__name__ = true;
tink_io_Splitter.__super__ = tink_io_BytewiseParser;
tink_io_Splitter.prototype = $extend(tink_io_BytewiseParser.prototype,{
	delim: null
	,buf: null
	,read: function(char) {
		if(char == -1) {
			return tink_io_ParseStep.Done(haxe_ds_Option.None);
		}
		this.buf = tink_Chunk.concat(this.buf,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(String.fromCodePoint(char))));
		if(this.buf.getLength() >= this.delim.getLength()) {
			var bcursor = this.buf.getCursor();
			var delta = this.buf.getLength() - this.delim.getLength();
			bcursor.moveTo(bcursor.currentPos + delta);
			var dcursor = this.delim.getCursor();
			var _g = 0;
			var _g1 = this.delim.getLength();
			while(_g < _g1) {
				_g++;
				if(bcursor.currentByte != dcursor.currentByte) {
					return tink_io_ParseStep.Progressed;
				} else {
					bcursor.next();
					dcursor.next();
				}
			}
			var out = tink_io_ParseStep.Done(haxe_ds_Option.Some(this.buf.slice(0,bcursor.currentPos - this.delim.getLength())));
			this.buf = tink_Chunk.EMPTY;
			return out;
		} else {
			return tink_io_ParseStep.Progressed;
		}
	}
	,__class__: tink_io_Splitter
});
var tink_io_SimpleBytewiseParser = function(f) {
	this._read = f;
};
tink_io_SimpleBytewiseParser.__name__ = true;
tink_io_SimpleBytewiseParser.__super__ = tink_io_BytewiseParser;
tink_io_SimpleBytewiseParser.prototype = $extend(tink_io_BytewiseParser.prototype,{
	_read: null
	,read: function(char) {
		return this._read(char);
	}
	,__class__: tink_io_SimpleBytewiseParser
});
var tink_io_WorkerObject = function() { };
tink_io_WorkerObject.__name__ = true;
tink_io_WorkerObject.__isInterface__ = true;
tink_io_WorkerObject.prototype = {
	work: null
	,__class__: tink_io_WorkerObject
};
var tink_io__$Worker_EagerWorker = function() {
};
tink_io__$Worker_EagerWorker.__name__ = true;
tink_io__$Worker_EagerWorker.__interfaces__ = [tink_io_WorkerObject];
tink_io__$Worker_EagerWorker.prototype = {
	work: function(task) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Lazy.get(task)));
	}
	,__class__: tink_io__$Worker_EagerWorker
};
var tink_io_Worker = {};
tink_io_Worker.ensure = function(this1) {
	if(this1 == null) {
		return tink_io_Worker.get();
	} else {
		return this1;
	}
};
tink_io_Worker.get = function() {
	return tink_io_Worker.pool[Std.random(tink_io_Worker.pool.length)];
};
tink_io_Worker.work = function(this1,task) {
	return this1.work(task);
};
var tink_streams_Generator = function(upcoming) {
	tink_streams_StreamBase.call(this);
	this.upcoming = upcoming;
};
tink_streams_Generator.__name__ = true;
tink_streams_Generator.stream = function(step) {
	return new tink_streams_Generator(tink_core_Future.async(step));
};
tink_streams_Generator.__super__ = tink_streams_StreamBase;
tink_streams_Generator.prototype = $extend(tink_streams_StreamBase.prototype,{
	upcoming: null
	,next: function() {
		return this.upcoming;
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.upcoming.handle(function(e) {
				switch(e._hx_index) {
				case 0:
					var then = e.next;
					handler(e.value).handle(function(s) {
						switch(s._hx_index) {
						case 0:
							cb(tink_streams_Conclusion.Halted(_gthis));
							break;
						case 1:
							cb(tink_streams_Conclusion.Halted(then));
							break;
						case 2:
							then.forEach(handler).handle(cb);
							break;
						case 3:
							cb(tink_streams_Conclusion.Clogged(s.e,_gthis));
							break;
						}
					});
					break;
				case 1:
					cb(tink_streams_Conclusion.Failed(e.e));
					break;
				case 2:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		});
	}
	,__class__: tink_streams_Generator
});
var tink_io_js_BlobSource = function(name,blob,pos,chunkSize) {
	this.name = name;
	tink_streams_Generator.call(this,tink_core_Future.async(function(cb) {
		if(pos >= blob.size) {
			cb(tink_streams_Step.End);
		} else {
			var end = pos + chunkSize;
			if(end > blob.size) {
				end = blob.size;
			}
			var reader = new FileReader();
			reader.onload = function() {
				var chunk = tink_chunk_ByteChunk.of(haxe_io_Bytes.ofData(reader.result));
				cb(tink_streams_Step.Link(chunk,new tink_io_js_BlobSource(name,blob,end,chunkSize)));
			};
			reader.onerror = function(e) {
				cb(tink_streams_Step.Fail(tink_core_TypedError.withData(500,e.message,e,{ fileName : "tink/io/js/BlobSource.hx", lineNumber : 29, className : "tink.io.js.BlobSource", methodName : "new"})));
			};
			reader.readAsArrayBuffer(blob.slice(pos,end));
		}
	},true));
};
tink_io_js_BlobSource.__name__ = true;
tink_io_js_BlobSource.wrap = function(name,blob,chunkSize) {
	return new tink_io_js_BlobSource(name,blob,0,chunkSize);
};
tink_io_js_BlobSource.__super__ = tink_streams_Generator;
tink_io_js_BlobSource.prototype = $extend(tink_streams_Generator.prototype,{
	name: null
	,__class__: tink_io_js_BlobSource
});
var tink_io_nodejs_NodejsSink = function(target) {
	this.target = target;
};
tink_io_nodejs_NodejsSink.__name__ = true;
tink_io_nodejs_NodejsSink.wrap = function(name,native) {
	return new tink_io_nodejs_NodejsSink(new tink_io_nodejs_WrappedWritable(name,native));
};
tink_io_nodejs_NodejsSink.__super__ = tink_io_SinkBase;
tink_io_nodejs_NodejsSink.prototype = $extend(tink_io_SinkBase.prototype,{
	target: null
	,consume: function(source,options) {
		var _gthis = this;
		var ret = source.forEach(tink_streams_Handler.ofUnknown(function(c) {
			return tink_core_Future.map(_gthis.target.write(c),function(w) {
				switch(w._hx_index) {
				case 0:
					if(w.data) {
						return tink_streams_Handled.Resume;
					} else {
						return tink_streams_Handled.BackOff;
					}
					break;
				case 1:
					return tink_streams_Handled.Clog(w.failure);
				}
			});
		}));
		if(options != null && options.end) {
			ret.handle(function(end) {
				_gthis.target.end();
			});
		}
		return tink_core_Future.map(ret,function(c) {
			return tink_io_PipeResultTools.toResult(c,null);
		});
	}
	,__class__: tink_io_nodejs_NodejsSink
});
var tink_io_nodejs_NodejsSource = function(target) {
	tink_streams_Generator.call(this,tink_core_Future.async(function(cb) {
		target.read().handle(function(o) {
			var cb1 = cb;
			var tmp;
			switch(o._hx_index) {
			case 0:
				var _g = o.data;
				tmp = _g == null ? tink_streams_Step.End : tink_streams_Step.Link(_g,new tink_io_nodejs_NodejsSource(target));
				break;
			case 1:
				tmp = tink_streams_Step.Fail(o.failure);
				break;
			}
			cb1(tmp);
		});
	},true));
};
tink_io_nodejs_NodejsSource.__name__ = true;
tink_io_nodejs_NodejsSource.wrap = function(name,native,chunkSize,onEnd) {
	return new tink_io_nodejs_NodejsSource(new tink_io_nodejs_WrappedReadable(name,native,chunkSize,onEnd));
};
tink_io_nodejs_NodejsSource.__super__ = tink_streams_Generator;
tink_io_nodejs_NodejsSource.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_io_nodejs_NodejsSource
});
var tink_io_nodejs_WrappedReadable = function(name,native,chunkSize,onEnd) {
	this.name = name;
	this.native = native;
	this.chunkSize = chunkSize;
	var this1 = tink_core_Future.async(function(cb) {
		native.once("end",function() {
			cb(tink_core_Outcome.Success(null));
		});
		native.once("error",function(e) {
			cb(tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + " - Failed reading from " + name + " because " + e.message,{ fileName : "tink/io/nodejs/WrappedReadable.hx", lineNumber : 22, className : "tink.io.nodejs.WrappedReadable", methodName : "new"})));
		});
	});
	this1.eager();
	this.end = this1;
	if(onEnd != null) {
		this.end.handle(function() {
			process.nextTick(onEnd);
		});
	}
};
tink_io_nodejs_WrappedReadable.__name__ = true;
tink_io_nodejs_WrappedReadable.prototype = {
	native: null
	,name: null
	,end: null
	,chunkSize: null
	,read: function() {
		var _gthis = this;
		return tink_core_Future.first(tink_core_Future.async(function(cb) {
			var attempt = null;
			attempt = function() {
				try {
					var _g = _gthis.native.read(_gthis.chunkSize);
					if(_g == null) {
						_gthis.native.once("readable",attempt);
					} else {
						var buf = typeof(_g) == "string" ? new js_node_buffer_Buffer(_g) : _g;
						cb(tink_core_Outcome.Success(new tink_chunk_nodejs_BufferChunk(buf)));
					}
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g).unwrap();
					cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error while reading from " + _gthis.name,_g1,{ fileName : "tink/io/nodejs/WrappedReadable.hx", lineNumber : 48, className : "tink.io.nodejs.WrappedReadable", methodName : "read"})));
				}
			};
			attempt();
		}),this.end);
	}
	,__class__: tink_io_nodejs_WrappedReadable
};
var tink_io_nodejs_WrappedWritable = function(name,native) {
	this.name = name;
	this.native = native;
	this.ended = tink_core_Future.async(function(cb) {
		native.once("end",function() {
			cb(tink_core_Outcome.Success(false));
		});
		native.once("finish",function() {
			cb(tink_core_Outcome.Success(false));
		});
		native.once("close",function() {
			cb(tink_core_Outcome.Success(false));
		});
		native.on("error",function(e) {
			cb(tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + ": " + e.message,{ fileName : "tink/io/nodejs/WrappedWritable.hx", lineNumber : 24, className : "tink.io.nodejs.WrappedWritable", methodName : "new"})));
		});
	});
};
tink_io_nodejs_WrappedWritable.__name__ = true;
tink_io_nodejs_WrappedWritable.prototype = {
	ended: null
	,name: null
	,native: null
	,end: function() {
		var didEnd = false;
		var this1 = this.ended.handle(function() {
			didEnd = true;
		});
		if(this1 != null) {
			this1.cancel();
		}
		if(didEnd) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(false)));
		}
		this.native.end();
		return tink_core_Promise.next(this.ended,function(_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(true)));
		});
	}
	,write: function(chunk) {
		var _gthis = this;
		return tink_core_Future.first(tink_core_Future.async(function(cb) {
			if(chunk.getLength() == 0) {
				cb(tink_core_Outcome.Success(true));
				return;
			}
			var buf;
			if(js_node_buffer_Buffer.isBuffer(chunk.buffer)) {
				buf = chunk.buffer;
			} else {
				var b = chunk.toBytes();
				var data = b.b;
				buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
			}
			var _g = cb;
			var a1 = tink_core_Outcome.Success(true);
			var tmp = function() {
				_g(a1);
			};
			_gthis.native.write(buf,null,tmp);
		}),this.ended);
	}
	,__class__: tink_io_nodejs_WrappedWritable
};
var tink_io_std_InputSource = function(name,target,worker,buf,offset) {
	var next = function(buf,offset) {
		return new tink_io_std_InputSource(name,target,worker,buf,offset);
	};
	var free = buf.length - offset;
	tink_streams_Generator.call(this,tink_core_Future.async(function(cb) {
		tink_io_Worker.work(worker,new tink_core__$Lazy_LazyFunc(function() {
			try {
				var read = target.readBytes(buf,offset,free);
				if(read == 0) {
					return tink_streams_Step.Link(tink_Chunk.EMPTY,next(buf,offset));
				} else {
					var nextOffset = free - read < 1024 ? 0 : offset + read;
					var nextBuf = nextOffset == 0 ? new haxe_io_Bytes(new ArrayBuffer(buf.length)) : buf;
					return tink_streams_Step.Link(tink_chunk_ByteChunk.of(buf).slice(offset,offset + read),next(nextBuf,nextOffset));
				}
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(((_g1) instanceof haxe_io_Eof)) {
					return tink_streams_Step.End;
				} else if(js_Boot.__instanceof(_g1,haxe_io_Error)) {
					var e = _g1;
					if(e._hx_index == 0) {
						return tink_streams_Step.Link(tink_Chunk.EMPTY,next(buf,offset));
					} else {
						return tink_streams_Step.Fail(tink_core_TypedError.withData(null,"Failed to read from " + name,e,{ fileName : "tink/io/std/InputSource.hx", lineNumber : 50, className : "tink.io.std.InputSource", methodName : "new"}));
					}
				} else {
					throw _g;
				}
			}
		})).handle(function(step) {
			switch(step._hx_index) {
			case 1:
				try {
					target.close();
				} catch( _g ) {
				}
				break;
			case 2:
				try {
					target.close();
				} catch( _g ) {
				}
				break;
			default:
			}
			cb(step);
		});
	},true));
};
tink_io_std_InputSource.__name__ = true;
tink_io_std_InputSource.__super__ = tink_streams_Generator;
tink_io_std_InputSource.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_io_std_InputSource
});
var tink_io_std_OutputSink = function(name,target,worker) {
	this.name = name;
	this.target = target;
	this.worker = worker;
};
tink_io_std_OutputSink.__name__ = true;
tink_io_std_OutputSink.__super__ = tink_io_SinkBase;
tink_io_std_OutputSink.prototype = $extend(tink_io_SinkBase.prototype,{
	name: null
	,target: null
	,worker: null
	,consume: function(source,options) {
		var _gthis = this;
		var rest = tink_Chunk.EMPTY;
		var ret = source.forEach(tink_streams_Handler.ofUnknown(function(c) {
			return tink_core_Future.async(function(cb) {
				var pos = 0;
				var bytes = c.toBytes();
				var write = null;
				write = function() {
					if(pos == bytes.length) {
						cb(tink_streams_Handled.Resume);
					} else {
						tink_io_Worker.work(_gthis.worker,new tink_core__$Lazy_LazyFunc(function() {
							try {
								return tink_core_Outcome.Success(_gthis.target.writeBytes(bytes,pos,bytes.length - pos));
							} catch( _g ) {
								var _g1 = haxe_Exception.caught(_g).unwrap();
								if(((_g1) instanceof haxe_io_Eof)) {
									return tink_core_Outcome.Success(-1);
								} else if(js_Boot.__instanceof(_g1,haxe_io_Error)) {
									var e = _g1;
									if(e._hx_index == 0) {
										return tink_core_Outcome.Success(0);
									} else {
										return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error writing to " + _gthis.name,e,{ fileName : "tink/io/std/OutputSink.hx", lineNumber : 40, className : "tink.io.std.OutputSink", methodName : "consume"}));
									}
								} else if(((_g1) instanceof tink_core_TypedError)) {
									return tink_core_Outcome.Failure(_g1);
								} else {
									return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error writing to " + _gthis.name,_g1,{ fileName : "tink/io/std/OutputSink.hx", lineNumber : 46, className : "tink.io.std.OutputSink", methodName : "consume"}));
								}
							}
						})).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								if(_g == -1) {
									rest = tink_chunk_ByteChunk.of(bytes).slice(pos,bytes.length);
									cb(tink_streams_Handled.Finish);
								} else {
									pos += _g;
									if(pos == bytes.length) {
										cb(tink_streams_Handled.Resume);
									} else {
										write();
									}
								}
								break;
							case 1:
								cb(tink_streams_Handled.Clog(o.failure));
								break;
							}
						});
					}
				};
				write();
			});
		}));
		if(options != null && options.end) {
			ret.handle(function(end) {
				try {
					_gthis.target.close();
				} catch( _g ) {
				}
			});
		}
		return tink_core_Future.map(ret,function(c) {
			return tink_io_PipeResultTools.toResult(c,null,rest);
		});
	}
	,__class__: tink_io_std_OutputSink
});
var tink_json_Char = {};
tink_json_Char.toString = function(this1) {
	return String.fromCodePoint(this1);
};
var tink_json_Parser = function() { };
tink_json_Parser.__name__ = true;
var tink_json__$Parser_RawData = {};
tink_json__$Parser_RawData._new = function(s,setLength) {
	setLength(s.length);
	return s;
};
tink_json__$Parser_RawData.hasBackslash = function(this1,min,max) {
	var _g = min;
	while(_g < max) if(this1.charCodeAt(_g++) == 92) {
		return true;
	}
	return false;
};
tink_json__$Parser_RawData.getChar = function(this1,i) {
	return this1.charCodeAt(i);
};
tink_json__$Parser_RawData.charPos = function(this1,char,start,end) {
	return this1.indexOf(char,start);
};
tink_json__$Parser_RawData.hasId = function(this1,s,min,max) {
	return this1.startsWith(s,min);
};
var tink_json__$Parser_Char = {};
tink_json__$Parser_Char._new = function(code) {
	return String.fromCodePoint(code);
};
var tink_json__$Parser_SliceData = function(source,min,max) {
	this.source = source;
	this.min = min;
	this.max = max;
};
tink_json__$Parser_SliceData.__name__ = true;
tink_json__$Parser_SliceData.prototype = {
	source: null
	,min: null
	,max: null
	,__class__: tink_json__$Parser_SliceData
};
var tink_json_JsonString = {};
tink_json_JsonString._new = function(raw,min,max) {
	return raw.substring(min,max);
};
tink_json_JsonString.toInt = function(this1) {
	return parseInt(this1);
};
tink_json_JsonString.toFloat = function(this1) {
	return parseFloat(this1);
};
tink_json_JsonString.toUInt = function(this1) {
	var ret = 0;
	var _g = 0;
	var _g1 = this1.length;
	while(_g < _g1) {
		var i = _g++;
		ret = ret + Std.parseInt(this1.charAt(i)) * (Math.pow(10,this1.length - i - 1) | 0);
	}
	return ret;
};
tink_json_JsonString.toString = function(this1) {
	if(this1.indexOf(tink_json_JsonString.BACKSLASH) == -1) {
		return this1;
	} else {
		return JSON.parse("\"" + this1 + "\"");
	}
};
var tink_json_BasicParser = function() {
	this.afterParsing = [];
	this.plugins = new tink_core_Annex(this);
};
tink_json_BasicParser.__name__ = true;
tink_json_BasicParser.isDigit = function(char) {
	if(char < 58) {
		return char > 47;
	} else {
		return false;
	}
};
tink_json_BasicParser.startsNumber = function(char) {
	if(!(char == 46 || char == 45)) {
		if(char < 58) {
			return char > 47;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
tink_json_BasicParser.prototype = {
	plugins: null
	,source: null
	,pos: null
	,max: null
	,afterParsing: null
	,init: function(source) {
		this.pos = 0;
		this.max = source.length;
		this.source = source;
		while(this.source.charCodeAt(this.pos) < 33) this.pos++;
	}
	,skipIgnored: function() {
		while(this.source.charCodeAt(this.pos) < 33) this.pos++;
	}
	,parseDynamic: function() {
		var start = this.pos;
		this.skipValue();
		return JSON.parse(this.source.substring(start,this.pos));
	}
	,copyFields: function(target,source) {
		Object.assign(target,source);
		return target;
	}
	,emptyInstance: function(cls) {
		return Object.create(cls.prototype);
	}
	,parseString: function() {
		while(this.source.charCodeAt(this.pos) < 33) this.pos++;
		var e;
		if(this.source.charCodeAt(this.pos) == 34) {
			this.pos += 1;
			e = true;
		} else {
			e = false;
		}
		if(!e) {
			this.die("Expected " + "string");
		}
		return this.parseRestOfString();
	}
	,parseRestOfString: function() {
		return this.slice(this.skipString(),this.pos - 1);
	}
	,skipString: function() {
		var start = this.pos;
		while(true) {
			var _g = this.source.indexOf(tink_json_BasicParser.DBQT,this.pos);
			if(_g == -1) {
				this.die("unterminated string",start);
			} else {
				this.pos = _g + 1;
				var p = this.pos - 2;
				while(this.source.charCodeAt(p) == 92) --p;
				if((p - this.pos & 1) == 0) {
					break;
				}
			}
		}
		return start;
	}
	,parseNumber: function() {
		var char = this.source.charCodeAt(this.pos);
		if(char == 46 || char == 45 || char < 58 && char > 47) {
			return this.doParseNumber();
		} else {
			return this.die("number expected");
		}
	}
	,doParseNumber: function() {
		return this.slice(this.skipNumber(this.source.charCodeAt(this.pos++)),this.pos);
	}
	,invalidNumber: function(start) {
		return this.die("Invalid number " + this.source.substring(start,this.pos),start);
	}
	,skipNumber: function(c) {
		var start = this.pos - 1;
		var minus = c == 45;
		var digit = !minus;
		var zero = c == 48;
		var point = false;
		var e = false;
		var pm = false;
		var end = false;
		while(this.pos < this.max) {
			c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 43:case 45:
				if(!e || pm) {
					this.invalidNumber(start);
				}
				digit = false;
				pm = true;
				break;
			case 46:
				if(minus || point) {
					this.invalidNumber(start);
				}
				digit = false;
				point = true;
				break;
			case 48:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
				}
				digit = true;
				zero = false;
				break;
			case 69:case 101:
				if(minus || zero || e) {
					this.invalidNumber(start);
				}
				digit = false;
				e = true;
				break;
			default:
				if(!digit) {
					this.invalidNumber(start);
				}
				this.pos--;
				end = true;
			}
			if(end) {
				break;
			}
		}
		return start;
	}
	,slice: function(from,to) {
		return this.source.substring(from,to);
	}
	,next: function() {
		return this.source.charCodeAt(this.pos++);
	}
	,toChar: function(code,expected) {
		while(true) {
			var _g = this.source.charCodeAt(this.pos++);
			var _hx_tmp;
			if(_g == code == true) {
				break;
			} else {
				_hx_tmp = _g < 33;
				if(_hx_tmp != true) {
					this.die("expected " + expected);
				}
			}
		}
	}
	,parseSerialized: function() {
		var start = this.pos;
		this.skipValue();
		return this.source.substring(start,this.pos);
	}
	,parseValue: function() {
		var _g = this.source.charCodeAt(this.pos++);
		switch(_g) {
		case 34:
			var this1 = this.parseRestOfString();
			return tink_json_Value.VString(this1.indexOf(tink_json_JsonString.BACKSLASH) == -1 ? this1 : JSON.parse("\"" + this1 + "\""));
		case 91:
			var ret = [];
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.source.charCodeAt(this.pos) == 93) {
				this.pos += 1;
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				while(true) {
					ret.push(this.parseValue());
					while(this.source.charCodeAt(this.pos) < 33) this.pos++;
					var tmp;
					if(this.source.charCodeAt(this.pos) == 44) {
						this.pos += 1;
						while(this.source.charCodeAt(this.pos) < 33) this.pos++;
						tmp = true;
					} else {
						tmp = false;
					}
					if(!tmp) {
						break;
					}
				}
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp;
				if(this.source.charCodeAt(this.pos) == 93) {
					this.pos += 1;
					tmp = true;
				} else {
					tmp = false;
				}
				if(!tmp) {
					this.die("Expected " + "]");
				}
			}
			return tink_json_Value.VArray(ret);
		case 102:
			var e;
			if(this.source.charCodeAt(this.pos) == 97 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 115 && this.source.charCodeAt(this.pos + 3) == 101) {
				this.pos += 4;
				e = true;
			} else {
				e = false;
			}
			if(!e) {
				this.die("Expected " + "alse");
			}
			return tink_json_Value.VBool(false);
		case 110:
			var e;
			if(this.source.charCodeAt(this.pos) == 117 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 108) {
				this.pos += 3;
				e = true;
			} else {
				e = false;
			}
			if(!e) {
				this.die("Expected " + "ull");
			}
			return tink_json_Value.VNull;
		case 116:
			var e;
			if(this.source.charCodeAt(this.pos) == 114 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 101) {
				this.pos += 3;
				e = true;
			} else {
				e = false;
			}
			if(!e) {
				this.die("Expected " + "rue");
			}
			return tink_json_Value.VBool(true);
		case 123:
			var fields = [];
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				while(true) {
					if(this.source.charCodeAt(this.pos++) != 34) {
						this.die("expected string",this.pos - 1);
					}
					var this1 = this.parseRestOfString();
					var tmp = this1.indexOf(tink_json_JsonString.BACKSLASH) == -1 ? this1 : JSON.parse("\"" + this1 + "\"");
					while(this.source.charCodeAt(this.pos) < 33) this.pos++;
					var e;
					if(this.source.charCodeAt(this.pos) == 58) {
						this.pos += 1;
						while(this.source.charCodeAt(this.pos) < 33) this.pos++;
						e = true;
					} else {
						e = false;
					}
					if(!e) {
						this.die("Expected " + ":");
					}
					fields.push(new tink_core_NamedWith(tmp,this.parseValue()));
					while(this.source.charCodeAt(this.pos) < 33) this.pos++;
					var tmp1;
					if(this.source.charCodeAt(this.pos) == 44) {
						this.pos += 1;
						while(this.source.charCodeAt(this.pos) < 33) this.pos++;
						tmp1 = true;
					} else {
						tmp1 = false;
					}
					if(!tmp1) {
						break;
					}
				}
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp;
				if(this.source.charCodeAt(this.pos) == 125) {
					this.pos += 1;
					tmp = true;
				} else {
					tmp = false;
				}
				if(!tmp) {
					this.die("Expected " + "}");
				}
			}
			return tink_json_Value.VObject(fields);
		default:
			if(_g == 46 || _g == 45 || _g < 58 && _g > 47) {
				this.pos--;
				return tink_json_Value.VNumber(parseFloat(this.doParseNumber()));
			} else {
				return this.invalidChar(_g);
			}
		}
	}
	,skipArray: function() {
		while(this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.source.charCodeAt(this.pos) == 93) {
			this.pos += 1;
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			return;
		}
		while(true) {
			this.skipValue();
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.source.charCodeAt(this.pos) == 44) {
				this.pos += 1;
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
		}
		while(this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.source.charCodeAt(this.pos) == 93) {
			this.pos += 1;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected " + "]");
		}
	}
	,skipValue: function() {
		var _g = this.source.charCodeAt(this.pos++);
		switch(_g) {
		case 34:
			this.skipString();
			break;
		case 91:
			this.skipArray();
			break;
		case 102:
			var tmp;
			if(this.source.charCodeAt(this.pos) == 97 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 115 && this.source.charCodeAt(this.pos + 3) == 101) {
				this.pos += 4;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected " + "alse");
			}
			break;
		case 110:
			var tmp;
			if(this.source.charCodeAt(this.pos) == 117 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 108) {
				this.pos += 3;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected " + "ull");
			}
			break;
		case 116:
			var tmp;
			if(this.source.charCodeAt(this.pos) == 114 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 101) {
				this.pos += 3;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected " + "rue");
			}
			break;
		case 123:
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				return;
			}
			while(true) {
				if(this.source.charCodeAt(this.pos++) != 34) {
					this.die("expected string",this.pos - 1);
				}
				this.skipString();
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp;
				if(this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp = true;
				} else {
					tmp = false;
				}
				if(!tmp) {
					this.die("Expected " + ":");
				}
				this.skipValue();
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp1;
				if(this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp1 = true;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					break;
				}
			}
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected " + "}");
			}
			break;
		default:
			if(_g == 46 || _g == 45 || _g < 58 && _g > 47) {
				this.skipNumber(_g);
			} else {
				this.invalidChar(_g);
			}
		}
	}
	,invalidChar: function(c) {
		return this.die("invalid char " + StringTools.hex(c,2),this.pos - 1);
	}
	,die: function(s,pos,end) {
		if(end == null) {
			end = -1;
		}
		if(pos == null) {
			pos = -1;
		}
		if(pos == -1) {
			pos = this.pos;
			end = pos;
		} else if(end == -1) {
			end = this.pos;
		}
		if(end <= pos) {
			end = pos + 1;
		}
		var clip = function(s,maxLength,left) {
			if(s.length > maxLength) {
				if(left) {
					return "... " + HxOverrides.substr(s,s.length - maxLength,null);
				} else {
					return HxOverrides.substr(s,0,maxLength) + " ...";
				}
			} else {
				return s;
			}
		};
		var center = pos + end >> 1;
		return tink_core_TypedError.withData(422,s + (" at " + (end > pos + 1 ? "characters " + pos + " - " + end : "character " + pos) + " in " + (clip(this.source.substring(0,pos),20,true) + "  ---->  " + clip(this.source.substring(pos,center),20,false) + clip(this.source.substring(center,end),20,true) + "  <----  " + clip(this.source.substring(end,this.max),20,false))),{ source : this.source, start : pos, end : end},{ fileName : "tink/json/Parser.hx", lineNumber : 472, className : "tink.json.BasicParser", methodName : "die"}).throwSelf();
	}
	,parseBool: function() {
		while(this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.source.charCodeAt(this.pos) == 116 && this.source.charCodeAt(this.pos + 1) == 114 && this.source.charCodeAt(this.pos + 2) == 117 && this.source.charCodeAt(this.pos + 3) == 101) {
			this.pos += 4;
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			return true;
		} else {
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.source.charCodeAt(this.pos) == 102 && this.source.charCodeAt(this.pos + 1) == 97 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 115 && this.source.charCodeAt(this.pos + 4) == 101) {
				this.pos += 5;
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			} else {
				return this.die("expected boolean value");
			}
		}
	}
	,__class__: tink_json_BasicParser
};
var tink_json_Parser0 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser0.__name__ = true;
tink_json_Parser0.__super__ = tink_json_BasicParser;
tink_json_Parser0.prototype = $extend(tink_json_BasicParser.prototype,{
	process0: function() {
		var _gthis = this;
		var cur = 0;
		var v_collections = null;
		var hasv_collections = false;
		var __start__ = this.pos;
		while(true) {
			var _g = this.source.charCodeAt(this.pos++);
			var _hx_tmp;
			if(_g == 123 == true) {
				break;
			} else {
				_hx_tmp = _g < 33;
				if(_hx_tmp != true) {
					this.die("expected " + "{");
				}
			}
		}
		while(this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			while(true) {
				while(true) {
					var _g = this.source.charCodeAt(this.pos++);
					var _hx_tmp;
					if(_g == 34 == true) {
						break;
					} else {
						_hx_tmp = _g < 33;
						if(_hx_tmp != true) {
							this.die("expected " + "\"");
						}
					}
				}
				cur = this.source.charCodeAt(this.pos++);
				if(cur == 99) {
					cur = this.source.charCodeAt(this.pos++);
					if(cur == 111) {
						cur = this.source.charCodeAt(this.pos++);
						if(cur == 108) {
							cur = this.source.charCodeAt(this.pos++);
							if(cur == 108) {
								cur = this.source.charCodeAt(this.pos++);
								if(cur == 101) {
									cur = this.source.charCodeAt(this.pos++);
									if(cur == 99) {
										cur = this.source.charCodeAt(this.pos++);
										if(cur == 116) {
											cur = this.source.charCodeAt(this.pos++);
											if(cur == 105) {
												cur = this.source.charCodeAt(this.pos++);
												if(cur == 111) {
													cur = this.source.charCodeAt(this.pos++);
													if(cur == 110) {
														cur = this.source.charCodeAt(this.pos++);
														if(cur == 115) {
															cur = this.source.charCodeAt(this.pos++);
															if(cur == 34) {
																while(true) {
																	var _g1 = this.source.charCodeAt(this.pos++);
																	var _hx_tmp1;
																	if(_g1 == 58 == true) {
																		break;
																	} else {
																		_hx_tmp1 = _g1 < 33;
																		if(_hx_tmp1 != true) {
																			this.die("expected " + ":");
																		}
																	}
																}
																while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																var v_collections1;
																if(this.source.charCodeAt(this.pos) == 91) {
																	this.pos += 1;
																	while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																	v_collections1 = true;
																} else {
																	v_collections1 = false;
																}
																if(!v_collections1) {
																	this.die("Expected " + "[");
																}
																var __ret = [];
																while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																var v_collections2;
																if(this.source.charCodeAt(this.pos) == 93) {
																	this.pos += 1;
																	while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																	v_collections2 = true;
																} else {
																	v_collections2 = false;
																}
																if(!v_collections2) {
																	while(true) {
																		__ret.push(this.process1());
																		while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																		var v_collections3;
																		if(this.source.charCodeAt(this.pos) == 44) {
																			this.pos += 1;
																			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																			v_collections3 = true;
																		} else {
																			v_collections3 = false;
																		}
																		if(!v_collections3) {
																			break;
																		}
																	}
																	while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																	var v_collections4;
																	if(this.source.charCodeAt(this.pos) == 93) {
																		this.pos += 1;
																		while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																		v_collections4 = true;
																	} else {
																		v_collections4 = false;
																	}
																	if(!v_collections4) {
																		this.die("Expected " + "]");
																	}
																}
																v_collections = __ret;
																hasv_collections = true;
																while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																var tmp;
																if(this.source.charCodeAt(this.pos) == 44) {
																	this.pos += 1;
																	tmp = true;
																} else {
																	tmp = false;
																}
																if(!tmp) {
																	break;
																} else {
																	continue;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				if(cur != 34) {
					this.skipString();
				}
				while(true) {
					var _g2 = this.source.charCodeAt(this.pos++);
					var _hx_tmp2;
					if(_g2 == 58 == true) {
						break;
					} else {
						_hx_tmp2 = _g2 < 33;
						if(_hx_tmp2 != true) {
							this.die("expected " + ":");
						}
					}
				}
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				this.skipValue();
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp1;
				if(this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					tmp1 = true;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					break;
				}
			}
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected " + "}");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { collections : hasv_collections ? v_collections : __missing__("collections")};
	}
	,process1: function() {
		var _gthis = this;
		var cur = 0;
		var v__data = null;
		var hasv__data = false;
		var v_name = null;
		var hasv_name = false;
		var __start__ = this.pos;
		while(true) {
			var _g = this.source.charCodeAt(this.pos++);
			var _hx_tmp;
			if(_g == 123 == true) {
				break;
			} else {
				_hx_tmp = _g < 33;
				if(_hx_tmp != true) {
					this.die("expected " + "{");
				}
			}
		}
		while(this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_hx_loop4: while(true) {
				while(true) {
					var _g = this.source.charCodeAt(this.pos++);
					var _hx_tmp;
					if(_g == 34 == true) {
						break;
					} else {
						_hx_tmp = _g < 33;
						if(_hx_tmp != true) {
							this.die("expected " + "\"");
						}
					}
				}
				cur = this.source.charCodeAt(this.pos++);
				switch(cur) {
				case 95:
					cur = this.source.charCodeAt(this.pos++);
					if(cur == 100) {
						cur = this.source.charCodeAt(this.pos++);
						if(cur == 97) {
							cur = this.source.charCodeAt(this.pos++);
							if(cur == 116) {
								cur = this.source.charCodeAt(this.pos++);
								if(cur == 97) {
									cur = this.source.charCodeAt(this.pos++);
									if(cur == 34) {
										while(true) {
											var _g1 = this.source.charCodeAt(this.pos++);
											var _hx_tmp1;
											if(_g1 == 58 == true) {
												break;
											} else {
												_hx_tmp1 = _g1 < 33;
												if(_hx_tmp1 != true) {
													this.die("expected " + ":");
												}
											}
										}
										while(this.source.charCodeAt(this.pos) < 33) this.pos++;
										while(this.source.charCodeAt(this.pos) < 33) this.pos++;
										var v__data1;
										if(this.source.charCodeAt(this.pos) == 91) {
											this.pos += 1;
											while(this.source.charCodeAt(this.pos) < 33) this.pos++;
											v__data1 = true;
										} else {
											v__data1 = false;
										}
										if(!v__data1) {
											this.die("Expected " + "[");
										}
										var __ret = [];
										while(this.source.charCodeAt(this.pos) < 33) this.pos++;
										var v__data2;
										if(this.source.charCodeAt(this.pos) == 93) {
											this.pos += 1;
											while(this.source.charCodeAt(this.pos) < 33) this.pos++;
											v__data2 = true;
										} else {
											v__data2 = false;
										}
										if(!v__data2) {
											while(true) {
												__ret.push(this.process2());
												while(this.source.charCodeAt(this.pos) < 33) this.pos++;
												var v__data3;
												if(this.source.charCodeAt(this.pos) == 44) {
													this.pos += 1;
													while(this.source.charCodeAt(this.pos) < 33) this.pos++;
													v__data3 = true;
												} else {
													v__data3 = false;
												}
												if(!v__data3) {
													break;
												}
											}
											while(this.source.charCodeAt(this.pos) < 33) this.pos++;
											var v__data4;
											if(this.source.charCodeAt(this.pos) == 93) {
												this.pos += 1;
												while(this.source.charCodeAt(this.pos) < 33) this.pos++;
												v__data4 = true;
											} else {
												v__data4 = false;
											}
											if(!v__data4) {
												this.die("Expected " + "]");
											}
										}
										v__data = __ret;
										hasv__data = true;
										while(this.source.charCodeAt(this.pos) < 33) this.pos++;
										var tmp;
										if(this.source.charCodeAt(this.pos) == 44) {
											this.pos += 1;
											tmp = true;
										} else {
											tmp = false;
										}
										if(!tmp) {
											break _hx_loop4;
										} else {
											continue;
										}
									}
								}
							}
						}
					}
					break;
				case 110:
					cur = this.source.charCodeAt(this.pos++);
					if(cur == 97) {
						cur = this.source.charCodeAt(this.pos++);
						if(cur == 109) {
							cur = this.source.charCodeAt(this.pos++);
							if(cur == 101) {
								cur = this.source.charCodeAt(this.pos++);
								if(cur == 34) {
									while(true) {
										var _g2 = this.source.charCodeAt(this.pos++);
										var _hx_tmp2;
										if(_g2 == 58 == true) {
											break;
										} else {
											_hx_tmp2 = _g2 < 33;
											if(_hx_tmp2 != true) {
												this.die("expected " + ":");
											}
										}
									}
									while(this.source.charCodeAt(this.pos) < 33) this.pos++;
									var this1 = this.parseString();
									v_name = this1.indexOf(tink_json_JsonString.BACKSLASH) == -1 ? this1 : JSON.parse("\"" + this1 + "\"");
									hasv_name = true;
									while(this.source.charCodeAt(this.pos) < 33) this.pos++;
									var tmp1;
									if(this.source.charCodeAt(this.pos) == 44) {
										this.pos += 1;
										tmp1 = true;
									} else {
										tmp1 = false;
									}
									if(!tmp1) {
										break _hx_loop4;
									} else {
										continue;
									}
								}
							}
						}
					}
					break;
				}
				if(cur != 34) {
					this.skipString();
				}
				while(true) {
					var _g3 = this.source.charCodeAt(this.pos++);
					var _hx_tmp3;
					if(_g3 == 58 == true) {
						break;
					} else {
						_hx_tmp3 = _g3 < 33;
						if(_hx_tmp3 != true) {
							this.die("expected " + ":");
						}
					}
				}
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				this.skipValue();
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					break;
				}
			}
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected " + "}");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { _data : hasv__data ? v__data : __missing__("_data"), name : hasv_name ? v_name : __missing__("name")};
	}
	,process2: function() {
		var _gthis = this;
		var cur = 0;
		var v_desc = null;
		var hasv_desc = false;
		var v_id = 0;
		var hasv_id = false;
		var v_image = null;
		var hasv_image = false;
		var v_name = null;
		var hasv_name = false;
		var v_price = .0;
		var hasv_price = false;
		var v_vendor = null;
		var hasv_vendor = false;
		var __start__ = this.pos;
		while(true) {
			var _g = this.source.charCodeAt(this.pos++);
			var _hx_tmp;
			if(_g == 123 == true) {
				break;
			} else {
				_hx_tmp = _g < 33;
				if(_hx_tmp != true) {
					this.die("expected " + "{");
				}
			}
		}
		while(this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_hx_loop4: while(true) {
				while(true) {
					var _g = this.source.charCodeAt(this.pos++);
					var _hx_tmp;
					if(_g == 34 == true) {
						break;
					} else {
						_hx_tmp = _g < 33;
						if(_hx_tmp != true) {
							this.die("expected " + "\"");
						}
					}
				}
				cur = this.source.charCodeAt(this.pos++);
				switch(cur) {
				case 100:
					cur = this.source.charCodeAt(this.pos++);
					if(cur == 101) {
						cur = this.source.charCodeAt(this.pos++);
						if(cur == 115) {
							cur = this.source.charCodeAt(this.pos++);
							if(cur == 99) {
								cur = this.source.charCodeAt(this.pos++);
								if(cur == 34) {
									while(true) {
										var _g1 = this.source.charCodeAt(this.pos++);
										var _hx_tmp1;
										if(_g1 == 58 == true) {
											break;
										} else {
											_hx_tmp1 = _g1 < 33;
											if(_hx_tmp1 != true) {
												this.die("expected " + ":");
											}
										}
									}
									while(this.source.charCodeAt(this.pos) < 33) this.pos++;
									var this1 = this.parseString();
									v_desc = this1.indexOf(tink_json_JsonString.BACKSLASH) == -1 ? this1 : JSON.parse("\"" + this1 + "\"");
									hasv_desc = true;
									while(this.source.charCodeAt(this.pos) < 33) this.pos++;
									var tmp;
									if(this.source.charCodeAt(this.pos) == 44) {
										this.pos += 1;
										tmp = true;
									} else {
										tmp = false;
									}
									if(!tmp) {
										break _hx_loop4;
									} else {
										continue;
									}
								}
							}
						}
					}
					break;
				case 105:
					cur = this.source.charCodeAt(this.pos++);
					switch(cur) {
					case 100:
						cur = this.source.charCodeAt(this.pos++);
						if(cur == 34) {
							while(true) {
								var _g2 = this.source.charCodeAt(this.pos++);
								var _hx_tmp2;
								if(_g2 == 58 == true) {
									break;
								} else {
									_hx_tmp2 = _g2 < 33;
									if(_hx_tmp2 != true) {
										this.die("expected " + ":");
									}
								}
							}
							while(this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_id = parseInt(this.parseNumber());
							hasv_id = true;
							while(this.source.charCodeAt(this.pos) < 33) this.pos++;
							var tmp1;
							if(this.source.charCodeAt(this.pos) == 44) {
								this.pos += 1;
								tmp1 = true;
							} else {
								tmp1 = false;
							}
							if(!tmp1) {
								break _hx_loop4;
							} else {
								continue;
							}
						}
						break;
					case 109:
						cur = this.source.charCodeAt(this.pos++);
						if(cur == 97) {
							cur = this.source.charCodeAt(this.pos++);
							if(cur == 103) {
								cur = this.source.charCodeAt(this.pos++);
								if(cur == 101) {
									cur = this.source.charCodeAt(this.pos++);
									if(cur == 34) {
										while(true) {
											var _g3 = this.source.charCodeAt(this.pos++);
											var _hx_tmp3;
											if(_g3 == 58 == true) {
												break;
											} else {
												_hx_tmp3 = _g3 < 33;
												if(_hx_tmp3 != true) {
													this.die("expected " + ":");
												}
											}
										}
										while(this.source.charCodeAt(this.pos) < 33) this.pos++;
										var this2 = this.parseString();
										v_image = this2.indexOf(tink_json_JsonString.BACKSLASH) == -1 ? this2 : JSON.parse("\"" + this2 + "\"");
										hasv_image = true;
										while(this.source.charCodeAt(this.pos) < 33) this.pos++;
										var tmp2;
										if(this.source.charCodeAt(this.pos) == 44) {
											this.pos += 1;
											tmp2 = true;
										} else {
											tmp2 = false;
										}
										if(!tmp2) {
											break _hx_loop4;
										} else {
											continue;
										}
									}
								}
							}
						}
						break;
					}
					break;
				case 110:
					cur = this.source.charCodeAt(this.pos++);
					if(cur == 97) {
						cur = this.source.charCodeAt(this.pos++);
						if(cur == 109) {
							cur = this.source.charCodeAt(this.pos++);
							if(cur == 101) {
								cur = this.source.charCodeAt(this.pos++);
								if(cur == 34) {
									while(true) {
										var _g4 = this.source.charCodeAt(this.pos++);
										var _hx_tmp4;
										if(_g4 == 58 == true) {
											break;
										} else {
											_hx_tmp4 = _g4 < 33;
											if(_hx_tmp4 != true) {
												this.die("expected " + ":");
											}
										}
									}
									while(this.source.charCodeAt(this.pos) < 33) this.pos++;
									var this3 = this.parseString();
									v_name = this3.indexOf(tink_json_JsonString.BACKSLASH) == -1 ? this3 : JSON.parse("\"" + this3 + "\"");
									hasv_name = true;
									while(this.source.charCodeAt(this.pos) < 33) this.pos++;
									var tmp3;
									if(this.source.charCodeAt(this.pos) == 44) {
										this.pos += 1;
										tmp3 = true;
									} else {
										tmp3 = false;
									}
									if(!tmp3) {
										break _hx_loop4;
									} else {
										continue;
									}
								}
							}
						}
					}
					break;
				case 112:
					cur = this.source.charCodeAt(this.pos++);
					if(cur == 114) {
						cur = this.source.charCodeAt(this.pos++);
						if(cur == 105) {
							cur = this.source.charCodeAt(this.pos++);
							if(cur == 99) {
								cur = this.source.charCodeAt(this.pos++);
								if(cur == 101) {
									cur = this.source.charCodeAt(this.pos++);
									if(cur == 34) {
										while(true) {
											var _g5 = this.source.charCodeAt(this.pos++);
											var _hx_tmp5;
											if(_g5 == 58 == true) {
												break;
											} else {
												_hx_tmp5 = _g5 < 33;
												if(_hx_tmp5 != true) {
													this.die("expected " + ":");
												}
											}
										}
										while(this.source.charCodeAt(this.pos) < 33) this.pos++;
										v_price = parseFloat(this.parseNumber());
										hasv_price = true;
										while(this.source.charCodeAt(this.pos) < 33) this.pos++;
										var tmp4;
										if(this.source.charCodeAt(this.pos) == 44) {
											this.pos += 1;
											tmp4 = true;
										} else {
											tmp4 = false;
										}
										if(!tmp4) {
											break _hx_loop4;
										} else {
											continue;
										}
									}
								}
							}
						}
					}
					break;
				case 115:
					cur = this.source.charCodeAt(this.pos++);
					if(cur == 117) {
						cur = this.source.charCodeAt(this.pos++);
						if(cur == 112) {
							cur = this.source.charCodeAt(this.pos++);
							if(cur == 112) {
								cur = this.source.charCodeAt(this.pos++);
								if(cur == 108) {
									cur = this.source.charCodeAt(this.pos++);
									if(cur == 105) {
										cur = this.source.charCodeAt(this.pos++);
										if(cur == 101) {
											cur = this.source.charCodeAt(this.pos++);
											if(cur == 114) {
												cur = this.source.charCodeAt(this.pos++);
												if(cur == 78) {
													cur = this.source.charCodeAt(this.pos++);
													if(cur == 97) {
														cur = this.source.charCodeAt(this.pos++);
														if(cur == 109) {
															cur = this.source.charCodeAt(this.pos++);
															if(cur == 101) {
																cur = this.source.charCodeAt(this.pos++);
																if(cur == 34) {
																	while(true) {
																		var _g6 = this.source.charCodeAt(this.pos++);
																		var _hx_tmp6;
																		if(_g6 == 58 == true) {
																			break;
																		} else {
																			_hx_tmp6 = _g6 < 33;
																			if(_hx_tmp6 != true) {
																				this.die("expected " + ":");
																			}
																		}
																	}
																	while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																	var this4 = this.parseString();
																	v_vendor = this4.indexOf(tink_json_JsonString.BACKSLASH) == -1 ? this4 : JSON.parse("\"" + this4 + "\"");
																	hasv_vendor = true;
																	while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																	var tmp5;
																	if(this.source.charCodeAt(this.pos) == 44) {
																		this.pos += 1;
																		tmp5 = true;
																	} else {
																		tmp5 = false;
																	}
																	if(!tmp5) {
																		break _hx_loop4;
																	} else {
																		continue;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				}
				if(cur != 34) {
					this.skipString();
				}
				while(true) {
					var _g7 = this.source.charCodeAt(this.pos++);
					var _hx_tmp7;
					if(_g7 == 58 == true) {
						break;
					} else {
						_hx_tmp7 = _g7 < 33;
						if(_hx_tmp7 != true) {
							this.die("expected " + ":");
						}
					}
				}
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				this.skipValue();
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp6;
				if(this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					tmp6 = true;
				} else {
					tmp6 = false;
				}
				if(!tmp6) {
					break;
				}
			}
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected " + "}");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { desc : hasv_desc ? v_desc : __missing__("desc"), id : hasv_id ? v_id : __missing__("id"), image : hasv_image ? v_image : __missing__("image"), name : hasv_name ? v_name : __missing__("name"), price : hasv_price ? v_price : __missing__("price"), vendor : hasv_vendor ? v_vendor : __missing__("supplierName")};
	}
	,parse: function(source) {
		if(this.afterParsing.length > 0) {
			this.afterParsing = [];
		}
		this.init(source);
		var ret = this.process0();
		var _g = 0;
		var _g1 = this.afterParsing;
		while(_g < _g1.length) _g1[_g++]();
		if(this.afterParsing.length > 0) {
			this.afterParsing = [];
		}
		return ret;
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			var ret = _gthis.parse(source);
			while(_gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
			if(_gthis.pos < _gthis.max) {
				_gthis.die("Invalid data after JSON document");
			}
			return ret;
		},null,{ fileName : "tink/json/macros/Macro.hx", lineNumber : 107, className : "tink.json.Parser0", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser0
});
var tink_json_Parser1 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser1.__name__ = true;
tink_json_Parser1.__super__ = tink_json_BasicParser;
tink_json_Parser1.prototype = $extend(tink_json_BasicParser.prototype,{
	process0: function() {
		var _gthis = this;
		var cur = 0;
		var v_connectionStrings = null;
		var hasv_connectionStrings = false;
		var __start__ = this.pos;
		while(true) {
			var _g = this.source.charCodeAt(this.pos++);
			var _hx_tmp;
			if(_g == 123 == true) {
				break;
			} else {
				_hx_tmp = _g < 33;
				if(_hx_tmp != true) {
					this.die("expected " + "{");
				}
			}
		}
		while(this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			while(true) {
				while(true) {
					var _g = this.source.charCodeAt(this.pos++);
					var _hx_tmp;
					if(_g == 34 == true) {
						break;
					} else {
						_hx_tmp = _g < 33;
						if(_hx_tmp != true) {
							this.die("expected " + "\"");
						}
					}
				}
				cur = this.source.charCodeAt(this.pos++);
				if(cur == 99) {
					cur = this.source.charCodeAt(this.pos++);
					if(cur == 111) {
						cur = this.source.charCodeAt(this.pos++);
						if(cur == 110) {
							cur = this.source.charCodeAt(this.pos++);
							if(cur == 110) {
								cur = this.source.charCodeAt(this.pos++);
								if(cur == 101) {
									cur = this.source.charCodeAt(this.pos++);
									if(cur == 99) {
										cur = this.source.charCodeAt(this.pos++);
										if(cur == 116) {
											cur = this.source.charCodeAt(this.pos++);
											if(cur == 105) {
												cur = this.source.charCodeAt(this.pos++);
												if(cur == 111) {
													cur = this.source.charCodeAt(this.pos++);
													if(cur == 110) {
														cur = this.source.charCodeAt(this.pos++);
														if(cur == 83) {
															cur = this.source.charCodeAt(this.pos++);
															if(cur == 116) {
																cur = this.source.charCodeAt(this.pos++);
																if(cur == 114) {
																	cur = this.source.charCodeAt(this.pos++);
																	if(cur == 105) {
																		cur = this.source.charCodeAt(this.pos++);
																		if(cur == 110) {
																			cur = this.source.charCodeAt(this.pos++);
																			if(cur == 103) {
																				cur = this.source.charCodeAt(this.pos++);
																				if(cur == 115) {
																					cur = this.source.charCodeAt(this.pos++);
																					if(cur == 34) {
																						while(true) {
																							var _g1 = this.source.charCodeAt(this.pos++);
																							var _hx_tmp1;
																							if(_g1 == 58 == true) {
																								break;
																							} else {
																								_hx_tmp1 = _g1 < 33;
																								if(_hx_tmp1 != true) {
																									this.die("expected " + ":");
																								}
																							}
																						}
																						while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																						while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																						var v_connectionStrings1;
																						if(this.source.charCodeAt(this.pos) == 91) {
																							this.pos += 1;
																							while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																							v_connectionStrings1 = true;
																						} else {
																							v_connectionStrings1 = false;
																						}
																						if(!v_connectionStrings1) {
																							this.die("Expected " + "[");
																						}
																						var __ret = new haxe_ds_StringMap();
																						while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																						var v_connectionStrings2;
																						if(this.source.charCodeAt(this.pos) == 93) {
																							this.pos += 1;
																							while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																							v_connectionStrings2 = true;
																						} else {
																							v_connectionStrings2 = false;
																						}
																						if(!v_connectionStrings2) {
																							while(true) {
																								while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																								var v_connectionStrings3;
																								if(this.source.charCodeAt(this.pos) == 91) {
																									this.pos += 1;
																									while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																									v_connectionStrings3 = true;
																								} else {
																									v_connectionStrings3 = false;
																								}
																								if(!v_connectionStrings3) {
																									this.die("Expected " + "[");
																								}
																								var this1 = this.parseString();
																								var _e0 = this1.indexOf(tink_json_JsonString.BACKSLASH) == -1 ? this1 : JSON.parse("\"" + this1 + "\"");
																								while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																								var e;
																								if(this.source.charCodeAt(this.pos) == 44) {
																									this.pos += 1;
																									while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																									e = true;
																								} else {
																									e = false;
																								}
																								if(!e) {
																									this.die("Expected " + ",");
																								}
																								var this2 = this.parseString();
																								var a = this2.indexOf(tink_json_JsonString.BACKSLASH) == -1 ? this2 : JSON.parse("\"" + this2 + "\"");
																								__ret.h[_e0] = a;
																								while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																								var v_connectionStrings4;
																								if(this.source.charCodeAt(this.pos) == 93) {
																									this.pos += 1;
																									while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																									v_connectionStrings4 = true;
																								} else {
																									v_connectionStrings4 = false;
																								}
																								if(!v_connectionStrings4) {
																									this.die("Expected " + "]");
																								}
																								while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																								var v_connectionStrings5;
																								if(this.source.charCodeAt(this.pos) == 44) {
																									this.pos += 1;
																									while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																									v_connectionStrings5 = true;
																								} else {
																									v_connectionStrings5 = false;
																								}
																								if(!v_connectionStrings5) {
																									break;
																								}
																							}
																							while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																							var v_connectionStrings6;
																							if(this.source.charCodeAt(this.pos) == 93) {
																								this.pos += 1;
																								while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																								v_connectionStrings6 = true;
																							} else {
																								v_connectionStrings6 = false;
																							}
																							if(!v_connectionStrings6) {
																								this.die("Expected " + "]");
																							}
																						}
																						v_connectionStrings = __ret;
																						hasv_connectionStrings = true;
																						while(this.source.charCodeAt(this.pos) < 33) this.pos++;
																						var tmp;
																						if(this.source.charCodeAt(this.pos) == 44) {
																							this.pos += 1;
																							tmp = true;
																						} else {
																							tmp = false;
																						}
																						if(!tmp) {
																							break;
																						} else {
																							continue;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				if(cur != 34) {
					this.skipString();
				}
				while(true) {
					var _g2 = this.source.charCodeAt(this.pos++);
					var _hx_tmp2;
					if(_g2 == 58 == true) {
						break;
					} else {
						_hx_tmp2 = _g2 < 33;
						if(_hx_tmp2 != true) {
							this.die("expected " + ":");
						}
					}
				}
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				this.skipValue();
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp1;
				if(this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					tmp1 = true;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					break;
				}
			}
			while(this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected " + "}");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { connectionStrings : hasv_connectionStrings ? v_connectionStrings : __missing__("connectionStrings")};
	}
	,parse: function(source) {
		if(this.afterParsing.length > 0) {
			this.afterParsing = [];
		}
		this.init(source);
		var ret = this.process0();
		var _g = 0;
		var _g1 = this.afterParsing;
		while(_g < _g1.length) _g1[_g++]();
		if(this.afterParsing.length > 0) {
			this.afterParsing = [];
		}
		return ret;
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			var ret = _gthis.parse(source);
			while(_gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
			if(_gthis.pos < _gthis.max) {
				_gthis.die("Invalid data after JSON document");
			}
			return ret;
		},null,{ fileName : "tink/json/macros/Macro.hx", lineNumber : 107, className : "tink.json.Parser1", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser1
});
var tink_json_Representation = {};
tink_json_Representation.get = function(this1) {
	return this1;
};
tink_json_Representation._new = function(v) {
	return v;
};
tink_json_Representation.of = function(v) {
	return v;
};
var tink_json_Value = $hxEnums["tink.json.Value"] = { __ename__:true,__constructs__:null
	,VNumber: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"tink.json.Value",toString:$estr}; },$_._hx_name="VNumber",$_.__params__ = ["f"],$_)
	,VString: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"tink.json.Value",toString:$estr}; },$_._hx_name="VString",$_.__params__ = ["s"],$_)
	,VNull: {_hx_name:"VNull",_hx_index:2,__enum__:"tink.json.Value",toString:$estr}
	,VBool: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"tink.json.Value",toString:$estr}; },$_._hx_name="VBool",$_.__params__ = ["b"],$_)
	,VArray: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"tink.json.Value",toString:$estr}; },$_._hx_name="VArray",$_.__params__ = ["a"],$_)
	,VObject: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"tink.json.Value",toString:$estr}; },$_._hx_name="VObject",$_.__params__ = ["a"],$_)
};
tink_json_Value.__constructs__ = [tink_json_Value.VNumber,tink_json_Value.VString,tink_json_Value.VNull,tink_json_Value.VBool,tink_json_Value.VArray,tink_json_Value.VObject];
var tink_json_Writer = function() { };
tink_json_Writer.__name__ = true;
var tink_json_BasicWriter = function() {
	this.plugins = new tink_core_Annex(this);
};
tink_json_BasicWriter.__name__ = true;
tink_json_BasicWriter.prototype = {
	plugins: null
	,buf: null
	,init: function() {
		this.buf = "";
	}
	,output: function(s) {
		this.buf += s;
	}
	,char: function(c) {
		this.buf += String.fromCodePoint(c);
	}
	,writeInt: function(v) {
		this.buf += v == null ? "null" : "" + v;
	}
	,writeFloat: function(v) {
		this.buf += v == null ? "null" : "" + v;
	}
	,writeBool: function(b) {
		this.buf += b ? "true" : "false";
	}
	,writeString: function(s) {
		var s1 = JSON.stringify(s);
		this.buf += s1;
	}
	,writeDynamic: function(value) {
		var s = JSON.stringify(value);
		this.buf += s;
	}
	,writeValue: function(value) {
		var _gthis = this;
		switch(value._hx_index) {
		case 0:
			var f = value.f;
			this.buf += f == null ? "null" : "" + f;
			break;
		case 1:
			var s = JSON.stringify(value.s);
			this.buf += s;
			break;
		case 2:
			this.buf += "null";
			break;
		case 3:
			this.buf += value.b ? "true" : "false";
			break;
		case 4:
			var _g = value.a;
			if(_g.length == 0) {
				this.buf += "[]";
			} else {
				var a = _g;
				this.buf += String.fromCodePoint(91);
				this.writeValue(a[0]);
				var _g = 1;
				var _g1 = a.length;
				while(_g < _g1) {
					this.buf += String.fromCodePoint(44);
					this.writeValue(a[_g++]);
				}
				this.buf += String.fromCodePoint(93);
			}
			break;
		case 5:
			var _g = value.a;
			if(_g.length == 0) {
				this.buf += "{}";
			} else {
				var a = _g;
				this.buf += String.fromCodePoint(123);
				var p = a[0];
				var s = JSON.stringify(p.name);
				_gthis.buf += s;
				_gthis.buf += String.fromCodePoint(58);
				_gthis.writeValue(p.value);
				var _g = 1;
				var _g1 = a.length;
				while(_g < _g1) {
					this.buf += String.fromCodePoint(44);
					var p = a[_g++];
					var s = JSON.stringify(p.name);
					_gthis.buf += s;
					_gthis.buf += String.fromCodePoint(58);
					_gthis.writeValue(p.value);
				}
				this.buf += String.fromCodePoint(125);
			}
			break;
		}
	}
	,expandScientificNotation: function(v) {
		var _g = v.toLowerCase().split("e");
		switch(_g.length) {
		case 1:
			return _g[0];
		case 2:
			var _g1 = _g[1];
			var _g2 = _g[0].split(".");
			switch(_g2.length) {
			case 1:
				return _g2[0] + StringTools.rpad("","0",Std.parseInt(_g1));
			case 2:
				return _g2[0] + StringTools.rpad(_g2[1],"0",Std.parseInt(_g1));
			default:
				throw haxe_Exception.thrown("Invalid value");
			}
			break;
		default:
			throw haxe_Exception.thrown("Invalid value");
		}
	}
	,__class__: tink_json_BasicWriter
};
var tink_json__$Writer_StringBuf = {};
tink_json__$Writer_StringBuf._new = function() {
	return "";
};
tink_json__$Writer_StringBuf.addChar = function(this1,c) {
	this1 += String.fromCodePoint(c);
};
tink_json__$Writer_StringBuf.add = function(this1,s) {
	this1 += s;
};
var tink_json__$Writer_StdWriter = function() { };
tink_json__$Writer_StdWriter.__name__ = true;
tink_json__$Writer_StdWriter.stringify = function(v) {
	return haxe_format_JsonPrinter.print(v);
};
var tink_json_Writer0 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer0.__name__ = true;
tink_json_Writer0.__super__ = tink_json_BasicWriter;
tink_json_Writer0.prototype = $extend(tink_json_BasicWriter.prototype,{
	process0: function(value) {
		var __first = true;
		this.buf += String.fromCodePoint(123);
		var value1 = value.desc;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"desc\":";
		var s = JSON.stringify(value1);
		this.buf += s;
		var value1 = value.id;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"id\":";
		this.buf += value1 == null ? "null" : "" + value1;
		var value1 = value.image;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"image\":";
		var s = JSON.stringify(value1);
		this.buf += s;
		var value1 = value.name;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"name\":";
		var s = JSON.stringify(value1);
		this.buf += s;
		var value1 = value.price;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"price\":";
		this.buf += value1 == null ? "null" : "" + value1;
		var value1 = value.vendor;
		if(__first) {
			__first = false;
		} else {
			this.buf += String.fromCodePoint(44);
		}
		this.buf += "\"supplierName\":";
		var s = JSON.stringify(value1);
		this.buf += s;
		this.buf += String.fromCodePoint(125);
	}
	,write: function(value) {
		this.init();
		this.buf += String.fromCodePoint(91);
		var first = true;
		var _g = 0;
		while(_g < value.length) {
			var value1 = value[_g++];
			if(first) {
				first = false;
			} else {
				this.buf += String.fromCodePoint(44);
			}
			this.process0(value1);
		}
		this.buf += String.fromCodePoint(93);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer0
});
var tink_macro_DirectType = function() { };
tink_macro_DirectType.__name__ = true;
var tink_querystring_Pairs = {};
tink_querystring_Pairs.portions = function(s) {
	return new tink_url__$Query_QueryStringParser(s,"&","=",0);
};
tink_querystring_Pairs.portionsOfUrl = function(u) {
	return tink_querystring_Pairs.portions(u.query);
};
tink_querystring_Pairs.ofIterable = function(i) {
	return $getIterator(i);
};
var tink_querystring_Parser = function() { };
tink_querystring_Parser.__name__ = true;
var tink_querystring_ParserBase = function(onError,pos) {
	this.pos = pos;
	this.onError = onError == null ? $bind(this,this.abort) : onError;
};
tink_querystring_ParserBase.__name__ = true;
tink_querystring_ParserBase.prototype = {
	params: null
	,exists: null
	,onError: null
	,pos: null
	,result: null
	,init: function(input,name,value) {
		this.params = new haxe_ds_StringMap();
		this.exists = new haxe_ds_StringMap();
		if(input != null) {
			while(input.hasNext()) {
				var pair = input.next();
				var name1 = name(pair);
				var this1 = this.params;
				var v = value(pair);
				this1.h[name1] = v;
				var end = name1.length;
				while(end > 0) {
					name1 = name1.substring(0,end);
					if(this.exists.h[name1]) {
						break;
					}
					this.exists.h[name1] = true;
					var _g = name1.lastIndexOf("[",end - 1);
					var _g1 = name1.lastIndexOf(".",end - 1);
					if(_g > _g1) {
						end = _g;
					} else {
						end = _g1;
					}
				}
			}
		}
	}
	,abort: function(e) {
		throw haxe_Exception.thrown(this.error("" + e.reason + " for " + e.name));
	}
	,parse: function(input) {
		throw haxe_Exception.thrown(tink_core_TypedError.withData(501,"not implemented",this.pos,{ fileName : "tink/querystring/Parser.hx", lineNumber : 58, className : "tink.querystring.ParserBase", methodName : "parse"}));
	}
	,tryParse: function(input) {
		try {
			return tink_core_Outcome.Success(this.parse(input));
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof tink_core_TypedError)) {
				return tink_core_Outcome.Failure(_g1);
			} else {
				return tink_core_Outcome.Failure(this.error("Parse Error",_g1));
			}
		}
	}
	,attempt: function(field,o) {
		switch(o._hx_index) {
		case 0:
			return o.data;
		case 1:
			return this.fail(field,o.failure.message);
		}
	}
	,error: function(reason,data) {
		return tink_core_TypedError.withData(422,reason,data,this.pos);
	}
	,fail: function(field,reason) {
		tink_core_Callback.invoke(this.onError,{ name : field, reason : reason});
		return null;
	}
	,missing: function(name) {
		return this.fail(name,"Missing value");
	}
	,__class__: tink_querystring_ParserBase
};
var tink_querystring_Parser0 = function(onError,pos) {
	tink_querystring_ParserBase.call(this,onError,pos);
};
tink_querystring_Parser0.__name__ = true;
tink_querystring_Parser0.__super__ = tink_querystring_ParserBase;
tink_querystring_Parser0.prototype = $extend(tink_querystring_ParserBase.prototype,{
	getName: function(p) {
		return p.name;
	}
	,getValue: function(p) {
		return p.value;
	}
	,parse: function(input) {
		this.init(input,$bind(this,this.getName),$bind(this,this.getValue));
		return this.process0("");
	}
	,process0: function(prefix) {
		var prefix1 = prefix == "" ? "page" : prefix + ".page";
		return { _0 : this.attempt(prefix1,tink_Stringly.parseInt(this.exists.h[prefix1] ? tink_url_Portion.stringly(this.params.h[prefix1]) : this.missing(prefix1)))};
	}
	,__class__: tink_querystring_Parser0
});
var tink_querystring_Parser1 = function(onError,pos) {
	tink_querystring_ParserBase.call(this,onError,pos);
};
tink_querystring_Parser1.__name__ = true;
tink_querystring_Parser1.__super__ = tink_querystring_ParserBase;
tink_querystring_Parser1.prototype = $extend(tink_querystring_ParserBase.prototype,{
	getName: function(p) {
		return p.name;
	}
	,getValue: function(p) {
		return p.value;
	}
	,parse: function(input) {
		this.init(input,$bind(this,this.getName),$bind(this,this.getValue));
		return this.process0("");
	}
	,process0: function(prefix) {
		var prefix1 = prefix == "" ? "page" : prefix + ".page";
		return { _1 : this.attempt(prefix1,tink_Stringly.parseInt(this.exists.h[prefix1] ? tink_url_Portion.stringly(this.params.h[prefix1]) : this.missing(prefix1)))};
	}
	,__class__: tink_querystring_Parser1
});
var tink_querystring_Parser2 = function(onError,pos) {
	tink_querystring_ParserBase.call(this,onError,pos);
};
tink_querystring_Parser2.__name__ = true;
tink_querystring_Parser2.__super__ = tink_querystring_ParserBase;
tink_querystring_Parser2.prototype = $extend(tink_querystring_ParserBase.prototype,{
	getName: function(p) {
		return p.name;
	}
	,getValue: function(p) {
		return p.value;
	}
	,parse: function(input) {
		this.init(input,$bind(this,this.getName),$bind(this,this.getValue));
		return this.process0("");
	}
	,process0: function(prefix) {
		var prefix1 = prefix == "" ? "skip" : prefix + ".skip";
		var __o = this.attempt(prefix1,tink_Stringly.parseInt(this.exists.h[prefix1] ? tink_url_Portion.stringly(this.params.h[prefix1]) : this.missing(prefix1)));
		var prefix1 = prefix == "" ? "limit" : prefix + ".limit";
		return { _2 : __o, _3 : this.attempt(prefix1,tink_Stringly.parseInt(this.exists.h[prefix1] ? tink_url_Portion.stringly(this.params.h[prefix1]) : this.missing(prefix1)))};
	}
	,__class__: tink_querystring_Parser2
});
var tink_streams_IdealStream = {};
tink_streams_IdealStream.promiseOfIdealStream = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_streams_IdealStream.promiseOfStreamNoise = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_streams_IdealStream.collect = function(this1) {
	var buf = [];
	return tink_core_Future.map(this1.forEach(tink_streams_Handler.ofSafe(function(x) {
		buf.push(x);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
	})),function(c) {
		return buf;
	});
};
var tink_streams_IdealStreamBase = function() {
	tink_streams_StreamBase.call(this);
};
tink_streams_IdealStreamBase.__name__ = true;
tink_streams_IdealStreamBase.__super__ = tink_streams_StreamBase;
tink_streams_IdealStreamBase.prototype = $extend(tink_streams_StreamBase.prototype,{
	idealize: function(rescue) {
		return this;
	}
	,__class__: tink_streams_IdealStreamBase
});
var tink_streams_RealStream = {};
tink_streams_RealStream.promiseOfIdealStream = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_streams_RealStream.promiseOfStreamNoise = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_streams_RealStream.promiseOfRealStream = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_streams_RealStream.promiseOfStreamError = function(p) {
	return tink_streams_Stream.promise(p);
};
tink_streams_RealStream.collect = function(this1) {
	var buf = [];
	return tink_core_Future.map(this1.forEach(tink_streams_Handler.ofSafe(function(x) {
		buf.push(x);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
	})),function(c) {
		switch(c._hx_index) {
		case 0:
			throw haxe_Exception.thrown("unreachable");
		case 2:
			return tink_core_Outcome.Failure(c.error);
		case 3:
			return tink_core_Outcome.Success(buf);
		}
	});
};
var tink_streams_Stream = {};
tink_streams_Stream.get_depleted = function(this1) {
	return this1.get_depleted();
};
tink_streams_Stream.dirty = function(this1) {
	return this1;
};
tink_streams_Stream.single = function(i) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(i));
};
tink_streams_Stream.ofIterator = function(i) {
	var next = null;
	next = function(step) {
		step(i.hasNext() ? tink_streams_Step.Link(i.next(),tink_streams_Generator.stream(next)) : tink_streams_Step.End);
	};
	return tink_streams_Generator.stream(next);
};
tink_streams_Stream.flatten = function(stream) {
	return stream.regroup(tink_streams_Regrouper.ofIgnoranceSync(function(arr) {
		return tink_streams_RegroupResult.Converted(arr[0]);
	}));
};
tink_streams_Stream.future = function(f) {
	return new tink_streams_FutureStream(f);
};
tink_streams_Stream.promiseIdeal = function(f) {
	return tink_streams_Stream.promise(f);
};
tink_streams_Stream.promiseReal = function(f) {
	return tink_streams_Stream.promise(f);
};
tink_streams_Stream.promise = function(f) {
	return tink_streams_Stream.future(tink_core_Future.map(f,function(o) {
		switch(o._hx_index) {
		case 0:
			return tink_streams_Stream.dirty(o.data);
		case 1:
			return tink_streams_Stream.ofError(o.failure);
		}
	}));
};
tink_streams_Stream.ofError = function(e) {
	return new tink_streams__$Stream_ErrorStream(e);
};
tink_streams_Stream.ofNodeStream = function(name,r,options) {
	return tink_streams_nodejs_NodejsStream.wrap(name,r,options == null ? null : options.onEnd);
};
var tink_streams_RegroupStatus = $hxEnums["tink.streams.RegroupStatus"] = { __ename__:true,__constructs__:null
	,Flowing: {_hx_name:"Flowing",_hx_index:0,__enum__:"tink.streams.RegroupStatus",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.RegroupStatus",toString:$estr}; },$_._hx_name="Errored",$_.__params__ = ["e"],$_)
	,Ended: {_hx_name:"Ended",_hx_index:2,__enum__:"tink.streams.RegroupStatus",toString:$estr}
};
tink_streams_RegroupStatus.__constructs__ = [tink_streams_RegroupStatus.Flowing,tink_streams_RegroupStatus.Errored,tink_streams_RegroupStatus.Ended];
var tink_streams_RegroupResult = $hxEnums["tink.streams.RegroupResult"] = { __ename__:true,__constructs__:null
	,Converted: ($_=function(data,untouched) { return {_hx_index:0,data:data,untouched:untouched,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_._hx_name="Converted",$_.__params__ = ["data","untouched"],$_)
	,Terminated: ($_=function(data) { return {_hx_index:1,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_._hx_name="Terminated",$_.__params__ = ["data"],$_)
	,Untouched: {_hx_name:"Untouched",_hx_index:2,__enum__:"tink.streams.RegroupResult",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_._hx_name="Errored",$_.__params__ = ["e"],$_)
};
tink_streams_RegroupResult.__constructs__ = [tink_streams_RegroupResult.Converted,tink_streams_RegroupResult.Terminated,tink_streams_RegroupResult.Untouched,tink_streams_RegroupResult.Errored];
var tink_streams_Regrouper = {};
tink_streams_Regrouper.ofIgnorance = function(f) {
	return { apply : function(i,_) {
		return f(i);
	}};
};
tink_streams_Regrouper.ofIgnoranceSync = function(f) {
	return { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	}};
};
tink_streams_Regrouper.ofFunc = function(f) {
	return { apply : f};
};
tink_streams_Regrouper.ofFuncSync = function(f) {
	return { apply : function(i,s) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i,s)));
	}};
};
var tink_streams__$Stream_CompoundStream = function(parts) {
	tink_streams_StreamBase.call(this);
	this.parts = parts;
};
tink_streams__$Stream_CompoundStream.__name__ = true;
tink_streams__$Stream_CompoundStream.consumeParts = function(parts,handler,cb) {
	if(parts.length == 0) {
		cb(tink_streams_Conclusion.Depleted);
	} else {
		parts[0].forEach(handler).handle(function(o) {
			switch(o._hx_index) {
			case 0:
				parts = parts.slice();
				parts[0] = o.rest;
				cb(tink_streams_Conclusion.Halted(new tink_streams__$Stream_CompoundStream(parts)));
				break;
			case 1:
				var _g = o.at;
				if(_g.get_depleted()) {
					parts = parts.slice(1);
				} else {
					parts = parts.slice();
					parts[0] = _g;
				}
				cb(tink_streams_Conclusion.Clogged(o.error,new tink_streams__$Stream_CompoundStream(parts)));
				break;
			case 2:
				cb(tink_streams_Conclusion.Failed(o.error));
				break;
			case 3:
				tink_streams__$Stream_CompoundStream.consumeParts(parts.slice(1),handler,cb);
				break;
			}
		});
	}
};
tink_streams__$Stream_CompoundStream.of = function(streams) {
	var ret = [];
	var _g = 0;
	while(_g < streams.length) streams[_g++].decompose(ret);
	if(ret.length == 0) {
		return tink_streams_Empty.inst;
	} else {
		return new tink_streams__$Stream_CompoundStream(ret);
	}
};
tink_streams__$Stream_CompoundStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_CompoundStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	parts: null
	,get_depleted: function() {
		switch(this.parts.length) {
		case 0:
			return true;
		case 1:
			return this.parts[0].get_depleted();
		default:
			return false;
		}
	}
	,next: function() {
		var _gthis = this;
		if(this.parts.length == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
		} else {
			return tink_core_Future.flatMap(this.parts[0].next(),function(v) {
				switch(v._hx_index) {
				case 0:
					var copy = _gthis.parts.slice();
					copy[0] = v.next;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(v.value,new tink_streams__$Stream_CompoundStream(copy))));
				case 2:
					if(_gthis.parts.length > 1) {
						return _gthis.parts[1].next();
					} else {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
					}
					break;
				default:
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
				}
			});
		}
	}
	,decompose: function(into) {
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) _g1[_g++].decompose(into);
	}
	,forEach: function(handler) {
		var parts = this.parts;
		var handler1 = handler;
		return tink_core_Future.async(function(cb) {
			tink_streams__$Stream_CompoundStream.consumeParts(parts,handler1,cb);
		});
	}
	,__class__: tink_streams__$Stream_CompoundStream
});
var tink_streams__$Stream_RegroupStream = function(source,f,prev,buf) {
	if(prev == null) {
		prev = tink_streams_Empty.inst;
	}
	if(buf == null) {
		buf = [];
	}
	var ret = null;
	var terminated = false;
	tink_streams__$Stream_CompoundStream.call(this,[prev,tink_streams_Stream.future(tink_core_Future.map(source.forEach(tink_streams_Handler.ofUnknown(function(item) {
		buf.push(item);
		return tink_core_Future.map(f.apply(buf,tink_streams_RegroupStatus.Flowing),function(o) {
			switch(o._hx_index) {
			case 0:
				ret = o.data;
				buf = o.untouched;
				return tink_streams_Handled.Finish;
			case 1:
				var _g = o.data;
				ret = _g._hx_index == 0 ? _g.v : tink_core_Lazy.get(new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make));
				terminated = true;
				return tink_streams_Handled.Finish;
			case 2:
				return tink_streams_Handled.Resume;
			case 3:
				return tink_streams_Handled.Clog(o.e);
			}
		});
	})),function(o) {
		switch(o._hx_index) {
		case 0:
			if(terminated) {
				return ret;
			} else {
				return new tink_streams__$Stream_RegroupStream(o.rest,f,ret,buf);
			}
			break;
		case 1:
			return new tink_streams__$Stream_ErrorStream(o.error);
		case 2:
			return tink_streams_Stream.ofError(o.error);
		case 3:
			if(buf.length == 0) {
				return tink_streams_Empty.inst;
			} else {
				return tink_streams_Stream.future(tink_core_Future.map(f.apply(buf,tink_streams_RegroupStatus.Ended),function(o) {
					switch(o._hx_index) {
					case 0:
						return o.data;
					case 1:
						var _g = o.data;
						if(_g._hx_index == 0) {
							return _g.v;
						} else {
							return tink_core_Lazy.get(new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make));
						}
						break;
					case 2:
						return tink_streams_Empty.inst;
					case 3:
						return tink_streams_Stream.ofError(o.e);
					}
				}));
			}
			break;
		}
	}))]);
};
tink_streams__$Stream_RegroupStream.__name__ = true;
tink_streams__$Stream_RegroupStream.__super__ = tink_streams__$Stream_CompoundStream;
tink_streams__$Stream_RegroupStream.prototype = $extend(tink_streams__$Stream_CompoundStream.prototype,{
	__class__: tink_streams__$Stream_RegroupStream
});
var tink_streams_Handled = $hxEnums["tink.streams.Handled"] = { __ename__:true,__constructs__:null
	,BackOff: {_hx_name:"BackOff",_hx_index:0,__enum__:"tink.streams.Handled",toString:$estr}
	,Finish: {_hx_name:"Finish",_hx_index:1,__enum__:"tink.streams.Handled",toString:$estr}
	,Resume: {_hx_name:"Resume",_hx_index:2,__enum__:"tink.streams.Handled",toString:$estr}
	,Clog: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.Handled",toString:$estr}; },$_._hx_name="Clog",$_.__params__ = ["e"],$_)
};
tink_streams_Handled.__constructs__ = [tink_streams_Handled.BackOff,tink_streams_Handled.Finish,tink_streams_Handled.Resume,tink_streams_Handled.Clog];
var tink_streams_Conclusion = $hxEnums["tink.streams.Conclusion"] = { __ename__:true,__constructs__:null
	,Halted: ($_=function(rest) { return {_hx_index:0,rest:rest,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_._hx_name="Halted",$_.__params__ = ["rest"],$_)
	,Clogged: ($_=function(error,at) { return {_hx_index:1,error:error,at:at,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_._hx_name="Clogged",$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_._hx_name="Failed",$_.__params__ = ["error"],$_)
	,Depleted: {_hx_name:"Depleted",_hx_index:3,__enum__:"tink.streams.Conclusion",toString:$estr}
};
tink_streams_Conclusion.__constructs__ = [tink_streams_Conclusion.Halted,tink_streams_Conclusion.Clogged,tink_streams_Conclusion.Failed,tink_streams_Conclusion.Depleted];
var tink_streams_ReductionStep = $hxEnums["tink.streams.ReductionStep"] = { __ename__:true,__constructs__:null
	,Progress: ($_=function(result) { return {_hx_index:0,result:result,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_._hx_name="Progress",$_.__params__ = ["result"],$_)
	,Crash: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_._hx_name="Crash",$_.__params__ = ["e"],$_)
};
tink_streams_ReductionStep.__constructs__ = [tink_streams_ReductionStep.Progress,tink_streams_ReductionStep.Crash];
var tink_streams_Reduction = $hxEnums["tink.streams.Reduction"] = { __ename__:true,__constructs__:null
	,Crashed: ($_=function(error,at) { return {_hx_index:0,error:error,at:at,__enum__:"tink.streams.Reduction",toString:$estr}; },$_._hx_name="Crashed",$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:1,error:error,__enum__:"tink.streams.Reduction",toString:$estr}; },$_._hx_name="Failed",$_.__params__ = ["error"],$_)
	,Reduced: ($_=function(result) { return {_hx_index:2,result:result,__enum__:"tink.streams.Reduction",toString:$estr}; },$_._hx_name="Reduced",$_.__params__ = ["result"],$_)
};
tink_streams_Reduction.__constructs__ = [tink_streams_Reduction.Crashed,tink_streams_Reduction.Failed,tink_streams_Reduction.Reduced];
var tink_streams__$Stream_CloggedStream = function(rest,error) {
	tink_streams_StreamBase.call(this);
	this.rest = rest;
	this.error = error;
};
tink_streams__$Stream_CloggedStream.__name__ = true;
tink_streams__$Stream_CloggedStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_CloggedStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	rest: null
	,error: null
	,next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Clogged(this.error,this.rest)));
	}
	,__class__: tink_streams__$Stream_CloggedStream
});
var tink_streams__$Stream_ErrorStream = function(error) {
	tink_streams_StreamBase.call(this);
	this.error = error;
};
tink_streams__$Stream_ErrorStream.__name__ = true;
tink_streams__$Stream_ErrorStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_ErrorStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	error: null
	,next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Failed(this.error)));
	}
	,__class__: tink_streams__$Stream_ErrorStream
});
var tink_streams_Mapping = {};
tink_streams_Mapping._new = function(o) {
	return o;
};
tink_streams_Mapping.ofNext = function(n) {
	return { apply : function(i,_) {
		var this1 = tink_core_Promise.next(n(i[0]),function(o) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(tink_streams_Stream.single(o)))));
		});
		var f = tink_core_Recover.ofSync(tink_streams_RegroupResult.Errored);
		return tink_core_Future.flatMap(this1,function(o) {
			switch(o._hx_index) {
			case 0:
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o.data));
			case 1:
				return f(o.failure);
			}
		});
	}};
};
tink_streams_Mapping.ofAsync = function(f) {
	return { apply : function(i,_) {
		return tink_core_Future.map(f(i[0]),function(o) {
			return tink_streams_RegroupResult.Converted(tink_streams_Stream.single(o));
		});
	}};
};
tink_streams_Mapping.ofSync = function(f) {
	return { apply : function(i,_) {
		var v;
		var _g = f(i[0]);
		switch(_g._hx_index) {
		case 0:
			v = tink_streams_RegroupResult.Converted(tink_streams_Stream.single(_g.data));
			break;
		case 1:
			v = tink_streams_RegroupResult.Errored(_g.failure);
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}};
};
tink_streams_Mapping.ofPlain = function(f) {
	return { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(tink_streams_Stream.single(f(i[0])))));
	}};
};
var tink_streams_Filter = {};
tink_streams_Filter._new = function(o) {
	return o;
};
tink_streams_Filter.ofNext = function(n) {
	return { apply : function(i,_) {
		var this1 = tink_core_Promise.next(n(i[0]),function(matched) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(matched ? tink_streams_Stream.single(i[0]) : tink_streams_Empty.inst))));
		});
		var f = tink_core_Recover.ofSync(tink_streams_RegroupResult.Errored);
		return tink_core_Future.flatMap(this1,function(o) {
			switch(o._hx_index) {
			case 0:
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o.data));
			case 1:
				return f(o.failure);
			}
		});
	}};
};
tink_streams_Filter.ofAsync = function(f) {
	return { apply : function(i,_) {
		return tink_core_Future.map(f(i[0]),function(matched) {
			return tink_streams_RegroupResult.Converted(matched ? tink_streams_Stream.single(i[0]) : tink_streams_Empty.inst);
		});
	}};
};
tink_streams_Filter.ofSync = function(f) {
	return { apply : function(i,_) {
		var v;
		var _g = f(i[0]);
		switch(_g._hx_index) {
		case 0:
			v = tink_streams_RegroupResult.Converted(_g.data ? tink_streams_Stream.single(i[0]) : tink_streams_Empty.inst);
			break;
		case 1:
			v = tink_streams_RegroupResult.Errored(_g.failure);
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}};
};
tink_streams_Filter.ofPlain = function(f) {
	return { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(f(i[0]) ? tink_streams_Stream.single(i[0]) : tink_streams_Empty.inst)));
	}};
};
var tink_streams_IdealizeStream = function(target,rescue) {
	tink_streams_IdealStreamBase.call(this);
	this.target = target;
	this.rescue = rescue;
};
tink_streams_IdealizeStream.__name__ = true;
tink_streams_IdealizeStream.__super__ = tink_streams_IdealStreamBase;
tink_streams_IdealizeStream.prototype = $extend(tink_streams_IdealStreamBase.prototype,{
	target: null
	,rescue: null
	,get_depleted: function() {
		return this.target.get_depleted();
	}
	,next: function() {
		var _gthis = this;
		return tink_core_Future.flatMap(this.target.next(),function(v) {
			if(v._hx_index == 1) {
				return _gthis.rescue(v.e).idealize(_gthis.rescue).next();
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
			}
		});
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.target.forEach(handler).handle(function(end) {
				switch(end._hx_index) {
				case 0:
					cb(tink_streams_Conclusion.Halted(end.rest.idealize(_gthis.rescue)));
					break;
				case 1:
					cb(tink_streams_Conclusion.Clogged(end.error,end.at.idealize(_gthis.rescue)));
					break;
				case 2:
					_gthis.rescue(end.error).idealize(_gthis.rescue).forEach(handler).handle(cb);
					break;
				case 3:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		});
	}
	,__class__: tink_streams_IdealizeStream
});
var tink_streams_Single = function(value) {
	tink_streams_StreamBase.call(this);
	this.value = value;
};
tink_streams_Single.__name__ = true;
tink_streams_Single.__super__ = tink_streams_StreamBase;
tink_streams_Single.prototype = $extend(tink_streams_StreamBase.prototype,{
	value: null
	,next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(tink_core_Lazy.get(this.value),tink_streams_Empty.inst)));
	}
	,forEach: function(handle) {
		var _gthis = this;
		return tink_core_Future.map(handle(tink_core_Lazy.get(this.value)),function(step) {
			switch(step._hx_index) {
			case 0:
				return tink_streams_Conclusion.Halted(_gthis);
			case 1:
				return tink_streams_Conclusion.Halted(tink_streams_Empty.inst);
			case 2:
				return tink_streams_Conclusion.Depleted;
			case 3:
				return tink_streams_Conclusion.Clogged(step.e,_gthis);
			}
		});
	}
	,__class__: tink_streams_Single
});
var tink_streams_Handler = {};
tink_streams_Handler._new = function(f) {
	return f;
};
tink_streams_Handler.apply = function(this1,item) {
	return this1(item);
};
tink_streams_Handler.ofSafeSync = function(f) {
	return function(i) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	};
};
tink_streams_Handler.ofUnknownSync = function(f) {
	return function(i) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	};
};
tink_streams_Handler.ofSafe = function(f) {
	return f;
};
tink_streams_Handler.ofUnknown = function(f) {
	return f;
};
var tink_streams_Reducer = {};
tink_streams_Reducer._new = function(f) {
	return f;
};
tink_streams_Reducer.apply = function(this1,res,item) {
	return this1(res,item);
};
tink_streams_Reducer.ofSafeSync = function(f) {
	return function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
	};
};
tink_streams_Reducer.ofUnknownSync = function(f) {
	return function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
	};
};
tink_streams_Reducer.ofSafe = function(f) {
	return f;
};
tink_streams_Reducer.ofPlainSync = function(f) {
	return function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(f(res,cur))));
	};
};
tink_streams_Reducer.ofUnknown = function(f) {
	return f;
};
tink_streams_Reducer.ofPromiseBased = function(f) {
	return function(res,cur) {
		return tink_core_Future.map(f(res,cur),function(s) {
			switch(s._hx_index) {
			case 0:
				return tink_streams_ReductionStep.Progress(s.data);
			case 1:
				return tink_streams_ReductionStep.Crash(s.failure);
			}
		});
	};
};
var tink_streams_FutureStream = function(f) {
	tink_streams_StreamBase.call(this);
	this.f = f;
};
tink_streams_FutureStream.__name__ = true;
tink_streams_FutureStream.__super__ = tink_streams_StreamBase;
tink_streams_FutureStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	f: null
	,next: function() {
		return tink_core_Future.flatMap(this.f,function(s) {
			return s.next();
		});
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core_Future.async(function(cb) {
			_gthis.f.handle(function(s) {
				s.forEach(handler).handle(cb);
			});
		});
	}
	,__class__: tink_streams_FutureStream
});
var tink_streams_BlendStream = function(a,b) {
	var first = null;
	var wait = function(s) {
		return tink_core_Future.map(s.next(),function(o) {
			if(first == null) {
				first = s;
			}
			return o;
		});
	};
	var n1 = wait(a);
	var n2 = wait(b);
	tink_streams_Generator.call(this,tink_core_Future.async(function(cb) {
		tink_core_Future.first(n1,n2).handle(function(o) {
			switch(o._hx_index) {
			case 0:
				cb(tink_streams_Step.Link(o.value,new tink_streams_BlendStream(o.next,first == a ? b : a)));
				break;
			case 1:
				cb(tink_streams_Step.Fail(o.e));
				break;
			case 2:
				(first == a ? n2 : n1).handle(cb);
				break;
			}
		});
	}));
};
tink_streams_BlendStream.__name__ = true;
tink_streams_BlendStream.__super__ = tink_streams_Generator;
tink_streams_BlendStream.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_streams_BlendStream
});
var tink_streams_Step = $hxEnums["tink.streams.Step"] = { __ename__:true,__constructs__:null
	,Link: ($_=function(value,next) { return {_hx_index:0,value:value,next:next,__enum__:"tink.streams.Step",toString:$estr}; },$_._hx_name="Link",$_.__params__ = ["value","next"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Step",toString:$estr}; },$_._hx_name="Fail",$_.__params__ = ["e"],$_)
	,End: {_hx_name:"End",_hx_index:2,__enum__:"tink.streams.Step",toString:$estr}
};
tink_streams_Step.__constructs__ = [tink_streams_Step.Link,tink_streams_Step.Fail,tink_streams_Step.End];
var tink_streams_SignalStream = function(signal) {
	var this1 = tink_core_Future.map(tink_core_Signal.nextTime(signal),function(o) {
		switch(o._hx_index) {
		case 0:
			return tink_streams_Step.Link(o.data,new tink_streams_SignalStream(signal));
		case 1:
			return tink_streams_Step.Fail(o.e);
		case 2:
			return tink_streams_Step.End;
		}
	});
	this1.eager();
	tink_streams_Generator.call(this,this1);
};
tink_streams_SignalStream.__name__ = true;
tink_streams_SignalStream.__super__ = tink_streams_Generator;
tink_streams_SignalStream.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_streams_SignalStream
});
var tink_streams_Yield = $hxEnums["tink.streams.Yield"] = { __ename__:true,__constructs__:null
	,Data: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.Yield",toString:$estr}; },$_._hx_name="Data",$_.__params__ = ["data"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Yield",toString:$estr}; },$_._hx_name="Fail",$_.__params__ = ["e"],$_)
	,End: {_hx_name:"End",_hx_index:2,__enum__:"tink.streams.Yield",toString:$estr}
};
tink_streams_Yield.__constructs__ = [tink_streams_Yield.Data,tink_streams_Yield.Fail,tink_streams_Yield.End];
var tink_streams_nodejs_NodejsStream = function(target) {
	tink_streams_Generator.call(this,tink_core_Future.async(function(cb) {
		target.read().handle(function(o) {
			var cb1 = cb;
			var tmp;
			switch(o._hx_index) {
			case 0:
				var _g = o.data;
				tmp = _g == null ? tink_streams_Step.End : tink_streams_Step.Link(_g,new tink_streams_nodejs_NodejsStream(target));
				break;
			case 1:
				tmp = tink_streams_Step.Fail(o.failure);
				break;
			}
			cb1(tmp);
		});
	}));
};
tink_streams_nodejs_NodejsStream.__name__ = true;
tink_streams_nodejs_NodejsStream.wrap = function(name,native,onEnd) {
	return new tink_streams_nodejs_NodejsStream(new tink_streams_nodejs_WrappedReadable(name,native,onEnd));
};
tink_streams_nodejs_NodejsStream.__super__ = tink_streams_Generator;
tink_streams_nodejs_NodejsStream.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_streams_nodejs_NodejsStream
});
var tink_streams_nodejs_WrappedReadable = function(name,native,onEnd) {
	this.name = name;
	this.native = native;
	var this1 = tink_core_Future.async(function(cb) {
		native.once("end",function() {
			cb(tink_core_Outcome.Success(null));
		});
		native.once("close",function() {
			cb(tink_core_Outcome.Success(null));
		});
		native.once("error",function(e) {
			cb(tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + " - Failed reading from " + name + " because " + e.message,{ fileName : "tink/streams/nodejs/WrappedReadable.hx", lineNumber : 21, className : "tink.streams.nodejs.WrappedReadable", methodName : "new"})));
		});
	});
	this1.eager();
	this.end = this1;
	if(onEnd != null) {
		this.end.handle(function() {
			process.nextTick(onEnd);
		});
	}
};
tink_streams_nodejs_WrappedReadable.__name__ = true;
tink_streams_nodejs_WrappedReadable.prototype = {
	native: null
	,name: null
	,end: null
	,read: function() {
		var _gthis = this;
		return tink_core_Future.first(tink_core_Future.async(function(cb) {
			var attempt = null;
			attempt = function() {
				try {
					var _g = _gthis.native.read();
					if(_g == null) {
						_gthis.native.once("readable",attempt);
					} else {
						cb(tink_core_Outcome.Success(_g));
					}
				} catch( _g ) {
					var _g1 = haxe_Exception.caught(_g).unwrap();
					cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error while reading from " + _gthis.name,_g1,{ fileName : "tink/streams/nodejs/WrappedReadable.hx", lineNumber : 41, className : "tink.streams.nodejs.WrappedReadable", methodName : "read"})));
				}
			};
			attempt();
		}),this.end);
	}
	,__class__: tink_streams_nodejs_WrappedReadable
};
var tink_template_Html = {};
tink_template_Html._new = function(s) {
	return s;
};
tink_template_Html.escape = function(s) {
	return s == null ? "" : tink_HtmlString.htmlEscape(s);
};
tink_template_Html.toString = function(this1) {
	return this1;
};
tink_template_Html.ofMultiple = function(parts) {
	return parts.join("");
};
tink_template_Html.of = function(a) {
	return tink_template_Html.escape(Std.string(a));
};
tink_template_Html.buffer = function() {
	return new tink_htmlstring_RawBuffer();
};
var tink_template_HtmlBuffer = {};
tink_template_HtmlBuffer._new = function() {
	return new tink_htmlstring_RawBuffer();
};
tink_template_HtmlBuffer.collapse = function(this1) {
	return this1.out;
};
tink_template_HtmlBuffer.toString = function(this1) {
	return this1.out;
};
tink_template_HtmlBuffer.add = function(this1,b) {
	this1.out += b;
};
tink_template_HtmlBuffer.addRaw = function(this1,s) {
	this1.out += s;
};
var tink_url_Auth = {};
tink_url_Auth._new = function(user,password) {
	return "" + user + ":" + password;
};
tink_url_Auth.get_user = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return this1.split(":")[0];
	}
};
tink_url_Auth.get_password = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return this1.split(":")[1];
	}
};
tink_url_Auth.toString = function(this1) {
	if(this1 == null) {
		return "";
	} else {
		return "" + this1 + "@";
	}
};
var tink_url_Host = {};
tink_url_Host._new = function(name,port) {
	var this1;
	if(port == null) {
		this1 = name;
	} else if(port > 65535 || port <= 0) {
		throw haxe_Exception.thrown("Invalid port");
	} else {
		this1 = "" + name + ":" + port;
	}
	return this1;
};
tink_url_Host.get_name = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			return _g[0].split(":")[0];
		case 2:
			return _g[0] + "]";
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
};
tink_url_Host.get_port = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			var _g1 = _g[0].split(":")[1];
			if(_g1 == null) {
				return null;
			} else {
				return Std.parseInt(_g1);
			}
			break;
		case 2:
			var _g1 = _g[1].split(":")[1];
			if(_g1 == null) {
				return null;
			} else {
				return Std.parseInt(_g1);
			}
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
};
tink_url_Host.toString = function(this1) {
	return this1;
};
var tink_url_Path = {};
tink_url_Path.parts = function(this1) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.split("/");
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		if(p != "") {
			_g.push(p);
		}
	}
	return _g;
};
tink_url_Path.get_absolute = function(this1) {
	return this1.charAt(0) == "/";
};
tink_url_Path.get_isDir = function(this1) {
	return this1.charAt(this1.length - 1) == "/";
};
tink_url_Path._new = function(s) {
	return s;
};
tink_url_Path.join = function(this1,that) {
	if(that == "") {
		return this1;
	} else if(that.charAt(0) == "/") {
		return that;
	} else if(this1.charAt(this1.length - 1) == "/") {
		return tink_url_Path.ofString(this1 + that);
	} else {
		var _g = this1.lastIndexOf("/");
		if(_g == -1) {
			return that;
		} else {
			return tink_url_Path.ofString(HxOverrides.substr(this1,0,_g + 1) + (that == null ? "null" : that));
		}
	}
};
tink_url_Path.ofString = function(s) {
	return tink_url_Path.normalize(s);
};
tink_url_Path.normalize = function(s) {
	s = StringTools.trim(StringTools.replace(s,"\\","/"));
	if(s == ".") {
		return "./";
	}
	var isDir = StringTools.endsWith(s,"/..") || StringTools.endsWith(s,"/") || StringTools.endsWith(s,"/.");
	var parts = [];
	var isAbsolute = StringTools.startsWith(s,"/");
	var up = 0;
	var _g = 0;
	var _g1 = s.split("/");
	while(_g < _g1.length) {
		var _g2 = StringTools.trim(_g1[_g++]);
		switch(_g2) {
		case "":
			break;
		case ".":
			break;
		case "..":
			if(parts.pop() == null) {
				++up;
			}
			break;
		default:
			parts.push(_g2);
		}
	}
	if(isAbsolute) {
		parts.unshift("");
	} else {
		var _g = 0;
		var _g1 = up;
		while(_g < _g1) {
			++_g;
			parts.unshift("..");
		}
	}
	if(isDir) {
		parts.push("");
	}
	return parts.join("/");
};
tink_url_Path.toString = function(this1) {
	return this1;
};
var tink_url_Portion = {};
tink_url_Portion.get_raw = function(this1) {
	return this1;
};
tink_url_Portion.isValid = function(this1) {
	if(this1 != null) {
		try {
			decodeURIComponent(this1.split("+").join(" "));
			return true;
		} catch( _g ) {
			return false;
		}
	} else {
		return true;
	}
};
tink_url_Portion._new = function(v) {
	return v;
};
tink_url_Portion.stringly = function(this1) {
	return tink_url_Portion.toString(this1);
};
tink_url_Portion.toString = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		try {
			return decodeURIComponent(this1.split("+").join(" "));
		} catch( _g ) {
			return "";
		}
	}
};
tink_url_Portion.ofString = function(s) {
	return s == null ? "" : encodeURIComponent(s);
};
var tink_url_PortionArray = {};
tink_url_PortionArray.toStringArray = function(this1) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < this1.length) _g.push(tink_url_Portion.toString(this1[_g1++]));
	return _g;
};
var tink_url_Query = {};
tink_url_Query.parse = function(this1) {
	return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
};
tink_url_Query.with = function(this1,values) {
	var ret = [];
	var _g = [];
	var key = new haxe_ds__$StringMap_StringMapKeyIterator(values.h);
	while(key.hasNext()) _g.push(key.next());
	var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		var key = tink_url_Portion.ofString(p1.name);
		if(Object.prototype.hasOwnProperty.call(values.h,key)) {
			var name = tink_url_Portion.ofString(p1.name);
			var key1 = tink_url_Portion.ofString(p1.name);
			ret.push(name + "=" + values.h[key1]);
			HxOverrides.remove(_g,tink_url_Portion.ofString(p1.name));
		} else {
			ret.push(tink_url_Portion.ofString(p1.name) + "=" + p1.value);
		}
	}
	var _g1 = 0;
	while(_g1 < _g.length) {
		var name = _g[_g1];
		++_g1;
		ret.push(name + "=" + values.h[name]);
	}
	return ret.join("&");
};
tink_url_Query.iterator = function(this1) {
	return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
};
tink_url_Query.toMap = function(this1) {
	var _g = new haxe_ds_StringMap();
	var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		_g.h[p1.name.toString()] = p1.value;
	}
	return _g;
};
tink_url_Query.ofObj = function(v) {
	var ret = [];
	var v1 = v;
	var _g = 0;
	var _g1 = Reflect.fields(v1);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		ret.push(tink_url_Portion.ofString(k) + "=" + tink_url_Portion.ofString(v1[k]));
	}
	return ret.join("&");
};
tink_url_Query.toString = function(this1) {
	return this1;
};
tink_url_Query.build = function() {
	return [];
};
tink_url_Query.parseString = function(s,sep,set,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(set == null) {
		set = "=";
	}
	if(sep == null) {
		sep = "&";
	}
	return new tink_url__$Query_QueryStringParser(s,sep,set,pos);
};
var tink_url_QueryStringBuilder = {};
tink_url_QueryStringBuilder._new = function() {
	return [];
};
tink_url_QueryStringBuilder.add = function(this1,name,value) {
	this1.push(name + "=" + value);
	return this1;
};
tink_url_QueryStringBuilder.toString = function(this1,sep) {
	if(sep == null) {
		sep = "&";
	}
	return this1.join(sep);
};
tink_url_QueryStringBuilder.copy = function(this1) {
	return this1.slice();
};
var tink_url__$Query_QueryStringParser = function(s,sep,set,pos) {
	this.s = s == null ? "" : s;
	this.sep = sep;
	this.set = set;
	this.pos = pos;
};
tink_url__$Query_QueryStringParser.__name__ = true;
tink_url__$Query_QueryStringParser.trimmedSub = function(s,start,end) {
	if(start >= s.length) {
		return "";
	}
	while(s.charCodeAt(start) < 33) ++start;
	if(end < s.length - 1) {
		while(s.charCodeAt(end - 1) < 33) --end;
	}
	return s.substring(start,end);
};
tink_url__$Query_QueryStringParser.prototype = {
	s: null
	,sep: null
	,set: null
	,pos: null
	,hasNext: function() {
		return this.pos < this.s.length;
	}
	,next: function() {
		var next = this.s.indexOf(this.sep,this.pos);
		if(next == -1) {
			next = this.s.length;
		}
		var split = this.s.indexOf(this.set,this.pos);
		var start = this.pos;
		this.pos = next + this.sep.length;
		if(split == -1 || split > next) {
			return new tink_core_NamedWith(tink_url_Portion.toString(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,next)),tink_url_Portion.ofString(""));
		} else {
			return new tink_core_NamedWith(tink_url_Portion.toString(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,split)),tink_url__$Query_QueryStringParser.trimmedSub(this.s,split + this.set.length,next));
		}
	}
	,__class__: tink_url__$Query_QueryStringParser
};
var tink_web_Response = {};
tink_web_Response._new = function(header,body) {
	return new tink_http_Message(header,body);
};
tink_web_Response.getData = function(this1) {
	return this1.body;
};
var tink_web_forms_FormField = {};
tink_web_forms_FormField.getValue = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return this1.v;
	case 1:
		throw haxe_Exception.thrown("expected plain value but received file");
	}
};
tink_web_forms_FormField.toFloat = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseFloat(tink_web_forms_FormField.getValue(this1)));
};
tink_web_forms_FormField.toInt = function(this1) {
	return tink_core_OutcomeTools.sure(tink_Stringly.parseInt(tink_web_forms_FormField.getValue(this1)));
};
tink_web_forms_FormField.toString = function(this1) {
	return tink_web_forms_FormField.getValue(this1);
};
tink_web_forms_FormField.getFile = function(this1) {
	switch(this1._hx_index) {
	case 0:
		throw haxe_Exception.thrown("expected file but got plain value");
	case 1:
		return this1.handle;
	}
};
var tink_web_forms_FormFile = {};
tink_web_forms_FormFile._new = function(v) {
	return v;
};
tink_web_forms_FormFile.toJson = function(this1) {
	var this2 = this1.fileName;
	var this3 = this1.mimeType;
	var src = this1.read();
	var chunk = null;
	var write = tink_io_RealSourceTools.all(src).handle(function(c) {
		chunk = tink_core_OutcomeTools.sure(c);
	});
	var v;
	if(chunk != null) {
		v = chunk.toBytes();
	} else {
		if(write != null) {
			write.cancel();
		}
		throw haxe_Exception.thrown(new tink_core_TypedError(501,"Can only upload files through JSON backed by with sync sources but got a " + Std.string(src),{ fileName : "tink/web/forms/FormFile.hx", lineNumber : 34, className : "tink.web.forms._FormFile.FormFile_Impl_", methodName : "toJson"}));
	}
	return { fileName : this2, mimeType : this3, content : v};
};
tink_web_forms_FormFile.ofJson = function(rep) {
	var data = tink_json_Representation.get(rep);
	return tink_http_UploadedFile.ofBlob(data.fileName,data.mimeType,data.content);
};
tink_web_forms_FormFile.ofBlob = function(name,type,data) {
	return tink_http_UploadedFile.ofBlob(name,type,data);
};
var tink_web_routing_Path = {};
tink_web_routing_Path.toString = function(this1) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < this1.length) _g.push(tink_url_Portion.toString(this1[_g1++]));
	return "/" + _g.join("/");
};
var tink_web_routing_Context = function(parent,accepts,request,depth,parts,params) {
	this.parent = parent;
	this.accepts = accepts;
	this.request = request;
	this.depth = depth;
	this.parts = parts;
	this.params = params;
};
tink_web_routing_Context.__name__ = true;
tink_web_routing_Context.toCamelCase = function(header) {
	var header1 = header;
	var ret_b = "";
	var pos = 0;
	var max = header1.length;
	while(pos < max) {
		var _g = header1.charCodeAt(pos++);
		if(_g == 45) {
			if(pos < max) {
				ret_b += Std.string(header1.charAt(pos++).toLowerCase());
			}
		} else {
			var v = _g;
			ret_b += String.fromCodePoint(v);
		}
	}
	return ret_b;
};
tink_web_routing_Context.ofRequest = function(request) {
	return new tink_web_routing_Context(null,tink_web_routing_Context.parseAcceptHeader(request.header),request,0,tink_url_Path.parts(request.header.url.path),tink_url_Query.toMap(request.header.url.query));
};
tink_web_routing_Context.authed = function(request,getSession) {
	var tmp = tink_web_routing_Context.parseAcceptHeader(request.header);
	var tmp1 = tink_url_Path.parts(request.header.url.path);
	var _g = getSession;
	var a1 = request.header;
	var tmp2 = new tink_core__$Lazy_LazyFunc(function() {
		return _g(a1);
	});
	return new tink_web_routing_AuthedContext(null,tmp,request,0,tmp1,tink_url_Query.toMap(request.header.url.query),tmp2);
};
tink_web_routing_Context.parseAcceptHeader = function(h) {
	var _g = h.get("accept");
	if(_g.length == 0) {
		return tink_web_routing_Context.acceptsAll;
	} else {
		var accepted_h = Object.create(null);
		var _g1 = 0;
		while(_g1 < _g.length) {
			var _g2 = 0;
			var _g3 = tink_http_HeaderValue.parse(_g[_g1++]);
			while(_g2 < _g3.length) accepted_h[_g3[_g2++].value] = true;
		}
		if(accepted_h["*/*"]) {
			return tink_web_routing_Context.acceptsAll;
		} else {
			return function(t) {
				return Object.prototype.hasOwnProperty.call(accepted_h,t);
			};
		}
	}
};
tink_web_routing_Context.acceptsAll = function(s) {
	return true;
};
tink_web_routing_Context.prototype = {
	request: null
	,depth: null
	,parent: null
	,parts: null
	,params: null
	,get_header: function() {
		return this.request.header;
	}
	,accepts: null
	,allRaw: function() {
		var _g = this.request.body;
		return tink_io_RealSourceTools.all(_g._hx_index == 0 ? _g.source : tink_io_Source.ofError(new tink_core_TypedError(501,"not implemented",{ fileName : "tink/web/routing/Context.hx", lineNumber : 47, className : "tink.web.routing.Context", methodName : "get_rawBody"})));
	}
	,get_rawBody: function() {
		var _g = this.request.body;
		if(_g._hx_index == 0) {
			return _g.source;
		} else {
			return tink_io_Source.ofError(new tink_core_TypedError(501,"not implemented",{ fileName : "tink/web/routing/Context.hx", lineNumber : 47, className : "tink.web.routing.Context", methodName : "get_rawBody"}));
		}
	}
	,headers: function() {
		var _g = [];
		var _this = this.request.header.fields;
		var _g1_current = 0;
		while(_g1_current < _this.length) {
			var f = _this[_g1_current++];
			_g.push(new tink_core_NamedWith(f.name,f.value));
		}
		return tink_querystring_Pairs.ofIterable(_g);
	}
	,parse: function() {
		var _g = this.request.body;
		switch(_g._hx_index) {
		case 0:
			var src = _g.source;
			return (function() {
				return tink_core_Promise.next(tink_io_RealSourceTools.all(src),tink_core_Next.ofSafeSync(function(chunk) {
					var _g = [];
					var part = new tink_url__$Query_QueryStringParser(chunk.toString(),"&","=",0);
					while(part.hasNext()) {
						var part1 = part.next();
						_g.push(new tink_core_NamedWith(part1.name,tink_http_BodyPart.Value(tink_url_Portion.toString(part1.value))));
					}
					return _g;
				}));
			})();
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(_g.parts)));
		}
	}
	,get_pathLength: function() {
		return this.parts.length - this.depth;
	}
	,getPrefix: function() {
		return this.parts.slice(0,this.depth);
	}
	,getPath: function() {
		return this.parts.slice(this.depth);
	}
	,hasParam: function(name) {
		return Object.prototype.hasOwnProperty.call(this.params.h,name);
	}
	,part: function(index) {
		if(this.depth + index >= this.parts.length) {
			return "";
		} else {
			return tink_url_Portion.stringly(this.parts[this.depth + index]);
		}
	}
	,param: function(name) {
		return tink_url_Portion.stringly(this.params.h[name]);
	}
	,sub: function(descend) {
		return new tink_web_routing_Context(this,this.accepts,this.request,this.depth + descend,this.parts,this.params);
	}
	,__class__: tink_web_routing_Context
};
var tink_web_routing_AuthedContext = function(parent,accepts,request,depth,parts,params,session,user) {
	this.session = session;
	var tmp;
	if(user == null) {
		var this1 = session;
		var f = function(s) {
			return s.getUser();
		};
		tmp = new tink_core__$Lazy_LazyFunc(function() {
			return f(this1.get());
		},this1);
	} else {
		tmp = user;
	}
	this.user = tmp;
	tink_web_routing_Context.call(this,parent,accepts,request,depth,parts,params);
};
tink_web_routing_AuthedContext.__name__ = true;
tink_web_routing_AuthedContext.__super__ = tink_web_routing_Context;
tink_web_routing_AuthedContext.prototype = $extend(tink_web_routing_Context.prototype,{
	session: null
	,user: null
	,sub: function(descend) {
		return new tink_web_routing_AuthedContext(this,this.accepts,this.request,this.depth + descend,this.parts,this.params,this.session,this.user);
	}
	,__class__: tink_web_routing_AuthedContext
});
var tink_web_routing_RequestReader = {};
tink_web_routing_RequestReader.ofStringReader = function(read) {
	return function(ctx) {
		return tink_core_Promise.next(ctx.allRaw(),function(body) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(read(body.toString())));
		});
	};
};
tink_web_routing_RequestReader.ofSafeStringReader = function(read) {
	return tink_web_routing_RequestReader.ofStringReader(function(s) {
		return tink_core_Outcome.Success(read(s));
	});
};
var tink_web_routing_Response = {};
tink_web_routing_Response.ofChunk = function(c,contentType) {
	if(contentType == null) {
		contentType = "application/octet-stream";
	}
	return tink_web_routing_Response.binary(null,contentType,c.toBytes());
};
tink_web_routing_Response.ofString = function(s) {
	return tink_web_routing_Response.textual(null,"text/plain",s);
};
tink_web_routing_Response.ofBytes = function(b) {
	return tink_web_routing_Response.binary(null,"application/octet-stream",b);
};
tink_web_routing_Response.fromChunk = function(c) {
	return tink_web_routing_Response.ofChunk(c);
};
tink_web_routing_Response.ofRealSource = function(source,contentType) {
	if(contentType == null) {
		contentType = "application/octet-stream";
	}
	return new tink_http__$Response_OutgoingResponseData(new tink_http_ResponseHeaderBase(200,httpstatus_HttpStatusMessage.fromCode(200),[new tink_http_HeaderField("content-type",contentType)],"HTTP/1.1"),tink_io_RealSourceTools.idealize(source,function(_) {
		return tink_io_Source.EMPTY;
	}));
};
tink_web_routing_Response.ofIdealSource = function(source,contentType) {
	if(contentType == null) {
		contentType = "application/octet-stream";
	}
	return new tink_http__$Response_OutgoingResponseData(new tink_http_ResponseHeaderBase(200,httpstatus_HttpStatusMessage.fromCode(200),[new tink_http_HeaderField("content-type",contentType)],"HTTP/1.1"),source);
};
tink_web_routing_Response.fromRealSource = function(source) {
	return tink_web_routing_Response.ofRealSource(tink_io_RealSourceTools.idealize(source,function(_) {
		return tink_io_Source.EMPTY;
	}));
};
tink_web_routing_Response.fromIdealSource = function(source) {
	return tink_web_routing_Response.ofIdealSource(source);
};
tink_web_routing_Response.ofHtml = function(h) {
	return tink_web_routing_Response.textual(null,"text/html",h);
};
tink_web_routing_Response.ofUrl = function(u) {
	return new tink_http__$Response_OutgoingResponseData(new tink_http_ResponseHeaderBase(302,httpstatus_HttpStatusMessage.fromCode(302),[new tink_http_HeaderField("location".toLowerCase(),tink_Url.toString(u))],"HTTP/1.1"),new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_Chunk.EMPTY)));
};
tink_web_routing_Response.binary = function(code,contentType,bytes,headers) {
	if(code == null) {
		code = 200;
	}
	return tink_http_OutgoingResponse.blob(code,tink_chunk_ByteChunk.of(bytes),contentType,headers);
};
tink_web_routing_Response.empty = function(code) {
	if(code == null) {
		code = 200;
	}
	return new tink_http__$Response_OutgoingResponseData(new tink_http_ResponseHeaderBase(code,httpstatus_HttpStatusMessage.fromCode(code),[new tink_http_HeaderField("content-length","0")],"HTTP/1.1"),new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_Chunk.EMPTY)));
};
tink_web_routing_Response.textual = function(code,contentType,string,headers) {
	if(code == null) {
		code = 200;
	}
	return tink_web_routing_Response.binary(code,contentType,haxe_io_Bytes.ofString(string),headers);
};
var tink_web_routing_Router = function() { };
tink_web_routing_Router.__name__ = true;
var tink_web_routing_Router0 = function(target) {
	this.target = target;
};
tink_web_routing_Router0.__name__ = true;
tink_web_routing_Router0.prototype = {
	target: null
	,route: function(ctx) {
		var l = ctx.parts.length - ctx.depth;
		var _g = ctx.request.header.method;
		var _g1 = ctx.part(0);
		var _g2 = l > 0;
		var _g3 = l > 1;
		if(_g == "GET") {
			switch(_g1) {
			case "api":
				if(_g2 == true) {
					if(_g3 == false) {
						return this.get_content(ctx,_g1);
					} else {
						return this.beautiful_rest_api(ctx,1);
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 31, className : "tink.web.routing.Router0", methodName : "route"}))));
				}
				break;
			case "test":
				if(_g2 == true) {
					if(_g3 == false) {
						return this.test_template(ctx);
					} else {
						var this1 = ctx.request.header.url;
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 31, className : "tink.web.routing.Router0", methodName : "route"}))));
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 31, className : "tink.web.routing.Router0", methodName : "route"}))));
				}
				break;
			case "views":
				if(_g2 == true) {
					if(_g3 == false) {
						return this.get_content(ctx,_g1);
					} else {
						return this.crappy_server_pages_sub(ctx,1);
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 31, className : "tink.web.routing.Router0", methodName : "route"}))));
				}
				break;
			default:
				if(_g2 == true) {
					if(_g3 == false) {
						return this.get_content(ctx,_g1);
					} else {
						var this1 = ctx.request.header.url;
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 31, className : "tink.web.routing.Router0", methodName : "route"}))));
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 31, className : "tink.web.routing.Router0", methodName : "route"}))));
				}
			}
		} else {
			switch(_g1) {
			case "api":
				if(_g2 == true) {
					return this.beautiful_rest_api(ctx,1);
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 31, className : "tink.web.routing.Router0", methodName : "route"}))));
				}
				break;
			case "views":
				if(_g2 == true) {
					return this.crappy_server_pages_sub(ctx,1);
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 31, className : "tink.web.routing.Router0", methodName : "route"}))));
				}
				break;
			default:
				var this1 = ctx.request.header.url;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 31, className : "tink.web.routing.Router0", methodName : "route"}))));
			}
		}
	}
	,test_template: function(ctx) {
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this.target.test_template()))),function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_web_routing_Response.ofHtml(v))));
		});
	}
	,get_content: function(ctx,content) {
		var d = this.target;
		var _g = function(s) {
			return s;
		};
		var a1 = content;
		var _g1 = tink_core_TypedError.catchExceptions(function() {
			return _g(a1);
		},null,{ fileName : "tink/Stringly.hx", lineNumber : 164, className : "tink._Stringly.Stringly_Impl_", methodName : "parse"});
		var d1;
		switch(_g1._hx_index) {
		case 0:
			d1 = _g1.data;
			break;
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(_g1.failure)));
		}
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d.get_content(d1)))),function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
		});
	}
	,crappy_server_pages_sub: function(ctx,__depth__) {
		var ctx1 = ctx.sub(__depth__);
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this.target.crappy_server_pages_sub()))),function(__target__) {
			return new tink_web_routing_Router1(__target__).route(ctx1);
		});
	}
	,beautiful_rest_api: function(ctx,__depth__) {
		var ctx1 = ctx.sub(__depth__);
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this.target.beautiful_rest_api()))),function(__target__) {
			return new tink_web_routing_Router2(__target__).route(ctx1);
		});
	}
	,__class__: tink_web_routing_Router0
};
var tink_web_routing_Router1 = function(target) {
	this.target = target;
};
tink_web_routing_Router1.__name__ = true;
tink_web_routing_Router1.prototype = {
	target: null
	,route: function(ctx) {
		var l = ctx.parts.length - ctx.depth;
		var _g = ctx.request.header.method;
		var _g1 = ctx.part(0);
		var _g2 = ctx.part(1);
		var _g3 = l > 0;
		var _g4 = l > 1;
		var _g5 = l > 2;
		if(_g == "GET") {
			switch(_g1) {
			case "api":
				if(_g3 == true) {
					if(_g4 == false) {
						return this.get_content(ctx,_g1);
					} else {
						return this.beautiful_rest_api(ctx,1);
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 69, className : "tink.web.routing.Router1", methodName : "route"}))));
				}
				break;
			case "products":
				if(_g3 == true) {
					if(_g4) {
						if(_g2 == "list") {
							if(_g5 == false) {
								return this.products_list_view(ctx);
							} else {
								var this1 = ctx.request.header.url;
								return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 69, className : "tink.web.routing.Router1", methodName : "route"}))));
							}
						} else {
							var this1 = ctx.request.header.url;
							return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 69, className : "tink.web.routing.Router1", methodName : "route"}))));
						}
					} else {
						return this.products_view(ctx);
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 69, className : "tink.web.routing.Router1", methodName : "route"}))));
				}
				break;
			case "test":
				if(_g3 == true) {
					if(_g4 == false) {
						return this.test_template(ctx);
					} else {
						var this1 = ctx.request.header.url;
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 69, className : "tink.web.routing.Router1", methodName : "route"}))));
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 69, className : "tink.web.routing.Router1", methodName : "route"}))));
				}
				break;
			case "views":
				if(_g3 == true) {
					if(_g4 == false) {
						return this.get_content(ctx,_g1);
					} else {
						return this.crappy_server_pages_sub(ctx,1);
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 69, className : "tink.web.routing.Router1", methodName : "route"}))));
				}
				break;
			default:
				if(_g3 == true) {
					if(_g4 == false) {
						return this.get_content(ctx,_g1);
					} else {
						var this1 = ctx.request.header.url;
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 69, className : "tink.web.routing.Router1", methodName : "route"}))));
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 69, className : "tink.web.routing.Router1", methodName : "route"}))));
				}
			}
		} else {
			switch(_g1) {
			case "api":
				if(_g3 == true) {
					return this.beautiful_rest_api(ctx,1);
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 69, className : "tink.web.routing.Router1", methodName : "route"}))));
				}
				break;
			case "views":
				if(_g3 == true) {
					return this.crappy_server_pages_sub(ctx,1);
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 69, className : "tink.web.routing.Router1", methodName : "route"}))));
				}
				break;
			default:
				var this1 = ctx.request.header.url;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 69, className : "tink.web.routing.Router1", methodName : "route"}))));
			}
		}
	}
	,products_view: function(ctx) {
		var _gthis = this;
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(new tink_querystring_Parser0(null,{ fileName : "src/Server.hx", lineNumber : 107, className : "tink.web.routing.Router1", methodName : "products_view"}).tryParse(new tink_url__$Query_QueryStringParser(ctx.request.header.url.query,"&","=",0)))),function(__query__) {
			return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(_gthis.target.products_view(__query__._0)))),function(v) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_web_routing_Response.ofHtml(v))));
			});
		});
	}
	,products_list_view: function(ctx) {
		var _gthis = this;
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(new tink_querystring_Parser1(null,{ fileName : "src/Server.hx", lineNumber : 120, className : "tink.web.routing.Router1", methodName : "products_list_view"}).tryParse(new tink_url__$Query_QueryStringParser(ctx.request.header.url.query,"&","=",0)))),function(__query__) {
			return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(_gthis.target.products_list_view(__query__._1)))),function(v) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_web_routing_Response.ofHtml(v))));
			});
		});
	}
	,test_template: function(ctx) {
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this.target.test_template()))),function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_web_routing_Response.ofHtml(v))));
		});
	}
	,get_content: function(ctx,content) {
		var d = this.target;
		var _g = function(s) {
			return s;
		};
		var a1 = content;
		var _g1 = tink_core_TypedError.catchExceptions(function() {
			return _g(a1);
		},null,{ fileName : "tink/Stringly.hx", lineNumber : 164, className : "tink._Stringly.Stringly_Impl_", methodName : "parse"});
		var d1;
		switch(_g1._hx_index) {
		case 0:
			d1 = _g1.data;
			break;
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(_g1.failure)));
		}
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d.get_content(d1)))),function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
		});
	}
	,crappy_server_pages_sub: function(ctx,__depth__) {
		var ctx1 = ctx.sub(__depth__);
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this.target.crappy_server_pages_sub()))),function(__target__) {
			return new tink_web_routing_Router1(__target__).route(ctx1);
		});
	}
	,beautiful_rest_api: function(ctx,__depth__) {
		var ctx1 = ctx.sub(__depth__);
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this.target.beautiful_rest_api()))),function(__target__) {
			return new tink_web_routing_Router2(__target__).route(ctx1);
		});
	}
	,__class__: tink_web_routing_Router1
};
var tink_web_routing_Router2 = function(target) {
	this.target = target;
};
tink_web_routing_Router2.__name__ = true;
tink_web_routing_Router2.prototype = {
	target: null
	,route: function(ctx) {
		var l = ctx.parts.length - ctx.depth;
		var _g = ctx.request.header.method;
		var _g1 = ctx.part(0);
		var _g2 = l > 0;
		var _g3 = l > 1;
		if(_g == "GET") {
			switch(_g1) {
			case "api":
				if(_g2 == true) {
					if(_g3 == false) {
						return this.get_content(ctx,_g1);
					} else {
						return this.beautiful_rest_api(ctx,1);
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 73, className : "tink.web.routing.Router2", methodName : "route"}))));
				}
				break;
			case "products":
				if(_g2 == true) {
					if(_g3 == false) {
						return this.getProducts(ctx);
					} else {
						var this1 = ctx.request.header.url;
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 73, className : "tink.web.routing.Router2", methodName : "route"}))));
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 73, className : "tink.web.routing.Router2", methodName : "route"}))));
				}
				break;
			case "test":
				if(_g2 == true) {
					if(_g3 == false) {
						return this.test_template(ctx);
					} else {
						var this1 = ctx.request.header.url;
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 73, className : "tink.web.routing.Router2", methodName : "route"}))));
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 73, className : "tink.web.routing.Router2", methodName : "route"}))));
				}
				break;
			case "views":
				if(_g2 == true) {
					if(_g3 == false) {
						return this.get_content(ctx,_g1);
					} else {
						return this.crappy_server_pages_sub(ctx,1);
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 73, className : "tink.web.routing.Router2", methodName : "route"}))));
				}
				break;
			default:
				if(_g2 == true) {
					if(_g3 == false) {
						return this.get_content(ctx,_g1);
					} else {
						var this1 = ctx.request.header.url;
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 73, className : "tink.web.routing.Router2", methodName : "route"}))));
					}
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 73, className : "tink.web.routing.Router2", methodName : "route"}))));
				}
			}
		} else {
			switch(_g1) {
			case "api":
				if(_g2 == true) {
					return this.beautiful_rest_api(ctx,1);
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 73, className : "tink.web.routing.Router2", methodName : "route"}))));
				}
				break;
			case "views":
				if(_g2 == true) {
					return this.crappy_server_pages_sub(ctx,1);
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 73, className : "tink.web.routing.Router2", methodName : "route"}))));
				}
				break;
			default:
				var this1 = ctx.request.header.url;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : (this1.path == null ? "null" : this1.path) + "?" + (this1.query == null ? "null" : this1.query)),{ fileName : "src/Server.hx", lineNumber : 73, className : "tink.web.routing.Router2", methodName : "route"}))));
			}
		}
	}
	,getProducts: function(ctx) {
		var _gthis = this;
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(new tink_querystring_Parser2(null,{ fileName : "src/Server.hx", lineNumber : 81, className : "tink.web.routing.Router2", methodName : "getProducts"}).tryParse(new tink_url__$Query_QueryStringParser(ctx.request.header.url.query,"&","=",0)))),function(__query__) {
			return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(_gthis.target.getProducts(__query__._2,__query__._3)))),function(__data__) {
				if(ctx.accepts("application/json")) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_web_routing_Response.textual(200,"application/json",new tink_json_Writer0().write(__data__),[]))));
				}
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(415,"Unsupported Media Type",{ fileName : "src/Server.hx", lineNumber : 81, className : "tink.web.routing.Router2", methodName : "getProducts"}))));
			});
		});
	}
	,test_template: function(ctx) {
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this.target.test_template()))),function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_web_routing_Response.ofHtml(v))));
		});
	}
	,get_content: function(ctx,content) {
		var d = this.target;
		var _g = function(s) {
			return s;
		};
		var a1 = content;
		var _g1 = tink_core_TypedError.catchExceptions(function() {
			return _g(a1);
		},null,{ fileName : "tink/Stringly.hx", lineNumber : 164, className : "tink._Stringly.Stringly_Impl_", methodName : "parse"});
		var d1;
		switch(_g1._hx_index) {
		case 0:
			d1 = _g1.data;
			break;
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(_g1.failure)));
		}
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d.get_content(d1)))),function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
		});
	}
	,crappy_server_pages_sub: function(ctx,__depth__) {
		var ctx1 = ctx.sub(__depth__);
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this.target.crappy_server_pages_sub()))),function(__target__) {
			return new tink_web_routing_Router1(__target__).route(ctx1);
		});
	}
	,beautiful_rest_api: function(ctx,__depth__) {
		var ctx1 = ctx.sub(__depth__);
		return tink_core_Promise.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this.target.beautiful_rest_api()))),function(__target__) {
			return new tink_web_routing_Router2(__target__).route(ctx1);
		});
	}
	,__class__: tink_web_routing_Router2
};
var views_ProductIndexView = function(data) {
	if(data != null) {
		this.page = data.page;
		this.pageStart = data.pageStart;
		this.pageEnd = data.pageEnd;
		this.numPages = data.numPages;
	}
};
views_ProductIndexView.__name__ = true;
views_ProductIndexView.prototype = {
	page: null
	,pageStart: null
	,pageEnd: null
	,numPages: null
	,render: function() {
		var ret = tink_template_Html.buffer();
		ret.out += "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Archivo:wght@400;500;700&display=swap\" rel=\"stylesheet\">\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.24.0/axios.min.js\" integrity=\"sha512-u9akINsQsAkG9xjc1cnGF4zw5TFDwkxuc9vUp5dltDWYCSmyd0meygbvgXrlc/z7/o4a19Fb5V0OUE58J7dcyw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/dialog-polyfill/0.5.6/dialog-polyfill.min.js\" integrity=\"sha512-qUIG93zKzcLBVD5RGRbx2PBmbVRu+tJIl+EPLTus0z8I1AMru9sQYdlf6cBacSzYmZVncB9rcc8rYBnazqgrxA==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\" integrity=\"sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu\" crossorigin=\"anonymous\">\r\n    <link rel=\"stylesheet\" href=\"/site.css\" />\r\n</head>\r\n\r\n<body>\r\n    <div id=\"app\">\r\n        <div class=\"app-body\">\r\n            <div id=\"products\" class=\"container\">\r\n            </div>\r\n            <nav aria-label=\"product nav\">\r\n                <ul class=\"pagination\">\r\n                    ";
		if(this.page != 1) {
			ret.out += "\r\n                    <li class=\"page-item\"><a href=\"/products?page=";
			var b = tink_template_Html.of(this.page - 1);
			ret.out += b;
			ret.out += "\" aria-label=\"Previous\">\r\n                        <span aria-hidden=\"true\">&laquo;</span>\r\n                    </a></li>\r\n                    ";
		} else {
			ret.out += "\r\n                    <li class=\"page-item\"><a href=\"#\" aria-label=\"Previous\" class=\"disabled\">\r\n                        <span aria-hidden=\"true\">&laquo;</span>\r\n                    </a></li>\r\n                    ";
		}
		var _g = this.pageStart;
		var _g1 = this.pageEnd;
		while(_g < _g1) {
			var i = _g++;
			ret.out += " \r\n                        ";
			if(i == this.page) {
				ret.out += "\r\n                            <li class=\"page-item active\"><a class=\"page-link\" href=\"#\">";
				var b = tink_template_Html.of(i);
				ret.out += b;
				ret.out += "</a></li>\r\n                        ";
			} else {
				ret.out += "\r\n                            <li class=\"page-item\"><a class=\"page-link\" href=\"/products?page=";
				var b1 = tink_template_Html.of(i);
				ret.out += b1;
				ret.out += "\">";
				var b2 = tink_template_Html.of(i);
				ret.out += b2;
				ret.out += "</a></li>\r\n                        ";
			}
		}
		ret.out += " \r\n                    \r\n\r\n                    \r\n                    ";
		if(this.page != this.numPages) {
			ret.out += "\r\n                    <li class=\"page-item\"><a href=\"/products?page=";
			var b = tink_template_Html.of(this.page + 1);
			ret.out += b;
			ret.out += "\" aria-label=\"Previous\">\r\n                        <span aria-hidden=\"true\">&raquo;</span>\r\n                    </a></li>\r\n                    ";
		} else {
			ret.out += "\r\n                    <li class=\"page-item\"><a href=\"#\" aria-label=\"Previous\" class=\"disabled\">\r\n                        <span aria-hidden=\"true\">&raquo;</span>\r\n                    </a></li>\r\n                    ";
		}
		ret.out += "</ul>\r\n            </nav>\r\n        </div>\r\n    </div>\r\n</body>\r\n<script type=\"text/javascript\" src=\"scripts.js\"></script>\r\n\r\n</html>";
		return ret.out;
	}
	,__class__: views_ProductIndexView
};
var views_ProductListView = function(products) {
	this.products = products;
};
views_ProductListView.__name__ = true;
views_ProductListView.prototype = {
	products: null
	,render: function() {
		var ret = tink_template_Html.buffer();
		ret.out += "<div class=\"row\">\r\n\r\n    ";
		var _g = 0;
		var _g1 = this.products;
		while(_g < _g1.length) {
			var product = _g1[_g];
			++_g;
			ret.out += "\r\n    <div class=\"col-sm-6 col-md-3\">\r\n        <div class=\"card\">\r\n            <img class=\"card-img-top\" src=\"";
			var b = tink_template_Html.escape(product.image);
			ret.out += b;
			ret.out += "\" alt=\"Facilis Group, or something like that\" />\r\n            <div class=\"card-body\">\r\n                <div class=\"card-title\">\r\n                    <h5>";
			var b1 = tink_template_Html.escape(product.name);
			ret.out += b1;
			ret.out += "</h5>\r\n                    <img src=\"https://avatars.dicebear.com/api/initials/";
			var b2 = tink_template_Html.escape(product.vendor);
			ret.out += b2;
			ret.out += ".svg?size=32\"/>\r\n                </div>\r\n                <div class=\"card-text\">\r\n                    <strong class=\"text-muted\">$";
			var b3 = tink_template_Html.of(product.price);
			ret.out += b3;
			ret.out += "</strong>\r\n                    <button type=\"button\" class=\"btn btn-primary\" id=\"view-product-";
			var b4 = tink_template_Html.of(product.id);
			ret.out += b4;
			ret.out += "\">View</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <dialog class=\"card\" id=\"product-dialog-";
			var b5 = tink_template_Html.of(product.id);
			ret.out += b5;
			ret.out += "\">\r\n        <img class=\"card-img-top\" src=\"";
			var b6 = tink_template_Html.escape(product.image);
			ret.out += b6;
			ret.out += "\" alt=\"Facilis Group, or something like that\" />\r\n            <div class=\"card-body\">\r\n                <form method=\"dialog\">\r\n                    <div class=\"card-title\">\r\n                        <h3>";
			var b7 = tink_template_Html.escape(product.name);
			ret.out += b7;
			ret.out += "</h3>\r\n                        <h5><div class=\"panel d-flex align-items-center\"><img src=\"https://avatars.dicebear.com/api/initials/";
			var b8 = tink_template_Html.escape(product.vendor);
			ret.out += b8;
			ret.out += ".svg?size=64\"/></div> ";
			var b9 = tink_template_Html.escape(product.vendor);
			ret.out += b9;
			ret.out += " </h5>\r\n                    </div>\r\n                    <em>";
			var b10 = tink_template_Html.escape(product.desc);
			ret.out += b10;
			ret.out += "</em>\r\n                    <strong>$";
			var b11 = tink_template_Html.of(product.price);
			ret.out += b11;
			ret.out += "</strong>\r\n                    <<menu>\r\n                        <button class=\"btn btn-secondary\" value=\"cancel\">Close</button>                \r\n                    </menu>\r\n                </form>\r\n            </div>\r\n    </dialog>\r\n    <!-- IE POLYFILL -->\r\n    \r\n    <script type=\"text/javascript\">\r\n        // IE POLYFILL\r\n        \r\n\r\n        var dialog = document.getElementById('product-dialog-'+";
			var b12 = tink_template_Html.of(product.id);
			ret.out += b12;
			ret.out += ");\r\n        // dialogPolyfill.registerDialog(dialog);\r\n        var trigger = document.getElementById('view-product-'+";
			var b13 = tink_template_Html.of(product.id);
			ret.out += b13;
			ret.out += ");\r\n        trigger.addEventListener('click', function(e) {\r\n            dialog.showModal();\r\n        });\r\n        \r\n    </script>\r\n    ";
		}
		ret.out += "\r\n</div>";
		return ret.out;
	}
	,__class__: views_ProductListView
};
var views_TestView = function(name) {
	this.name = name;
	this.friends = [];
};
views_TestView.__name__ = true;
views_TestView.prototype = {
	name: null
	,friends: null
	,renderTest: function() {
		var ret = tink_template_Html.buffer();
		ret.out += "User <em>";
		var b = tink_template_Html.escape(this.name);
		ret.out += b;
		ret.out += "</em>'s friends:\r\n<ul>\r\n";
		var _g = 0;
		var _g1 = this.friends;
		while(_g < _g1.length) {
			var friend = _g1[_g++];
			ret.out += "\r\n  <li>\r\n    ";
			var b = tink_template_Html.escape(friend);
			ret.out += b;
			ret.out += "\r\n  </li>\r\n";
		}
		ret.out += "\r\n</ul>";
		return ret.out;
	}
	,__class__: views_TestView
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
CrappyServerPagesRouter.PRODUCTS_PER_PAGE = 20;
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_crypto_Salsa20.sigmas_array = [1634760805,824206446,2036477238,1797285236,1634760805,857760878,2036477234,1797285236];
haxe_crypto_Salsa20.buffer = new Array(16);
haxe_crypto_Salsa20.expandState = new haxe_io_Bytes(new ArrayBuffer(64));
haxe_io_FPHelper.i64tmp = new haxe__$Int64__$_$_$Int64(0,0);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
httpstatus_HttpStatusCode.Continue = 100;
httpstatus_HttpStatusCode.SwitchingProtocols = 101;
httpstatus_HttpStatusCode.Processing = 102;
httpstatus_HttpStatusCode.OK = 200;
httpstatus_HttpStatusCode.Created = 201;
httpstatus_HttpStatusCode.Accepted = 202;
httpstatus_HttpStatusCode.NonAuthoritativeInformation = 203;
httpstatus_HttpStatusCode.NoContent = 204;
httpstatus_HttpStatusCode.ResetContent = 205;
httpstatus_HttpStatusCode.PartialContent = 206;
httpstatus_HttpStatusCode.MultiStatus = 207;
httpstatus_HttpStatusCode.AlreadyReported = 208;
httpstatus_HttpStatusCode.IMUsed = 226;
httpstatus_HttpStatusCode.MultipleChoices = 300;
httpstatus_HttpStatusCode.MovedPermanently = 301;
httpstatus_HttpStatusCode.Found = 302;
httpstatus_HttpStatusCode.SeeOther = 303;
httpstatus_HttpStatusCode.NotModified = 304;
httpstatus_HttpStatusCode.UseProxy = 305;
httpstatus_HttpStatusCode.SwitchProxy = 306;
httpstatus_HttpStatusCode.TemporaryRedirect = 307;
httpstatus_HttpStatusCode.PermanentRedirect = 308;
httpstatus_HttpStatusCode.BadRequest = 400;
httpstatus_HttpStatusCode.Unauthorized = 401;
httpstatus_HttpStatusCode.PaymentRequired = 402;
httpstatus_HttpStatusCode.Forbidden = 403;
httpstatus_HttpStatusCode.NotFound = 404;
httpstatus_HttpStatusCode.MethodNotAllowed = 405;
httpstatus_HttpStatusCode.NotAcceptable = 406;
httpstatus_HttpStatusCode.ProxyAuthenticationRequired = 407;
httpstatus_HttpStatusCode.RequestTimeout = 408;
httpstatus_HttpStatusCode.Conflict = 409;
httpstatus_HttpStatusCode.Gone = 410;
httpstatus_HttpStatusCode.LengthRequired = 411;
httpstatus_HttpStatusCode.PreconditionFailed = 412;
httpstatus_HttpStatusCode.PayloadTooLarge = 413;
httpstatus_HttpStatusCode.URITooLong = 414;
httpstatus_HttpStatusCode.UnsupportedMediaType = 415;
httpstatus_HttpStatusCode.RangeNotSatisfiable = 416;
httpstatus_HttpStatusCode.ExpectationFailed = 417;
httpstatus_HttpStatusCode.ImATeapot = 418;
httpstatus_HttpStatusCode.MisdirectedRequest = 421;
httpstatus_HttpStatusCode.UnprocessableEntity = 422;
httpstatus_HttpStatusCode.Locked = 423;
httpstatus_HttpStatusCode.FailedDependency = 424;
httpstatus_HttpStatusCode.UpgradeRequired = 426;
httpstatus_HttpStatusCode.PreconditionRequired = 428;
httpstatus_HttpStatusCode.TooManyRequests = 429;
httpstatus_HttpStatusCode.RequestHeaderFieldsTooLarge = 431;
httpstatus_HttpStatusCode.UnavailableForLegalReasons = 451;
httpstatus_HttpStatusCode.InternalServerError = 500;
httpstatus_HttpStatusCode.NotImplemented = 501;
httpstatus_HttpStatusCode.BadGateway = 502;
httpstatus_HttpStatusCode.ServiceUnavailable = 503;
httpstatus_HttpStatusCode.GatewayTimeout = 504;
httpstatus_HttpStatusCode.HTTPVersionNotSupported = 505;
httpstatus_HttpStatusCode.VariantAlsoNegotiates = 506;
httpstatus_HttpStatusCode.InsufficientStorage = 507;
httpstatus_HttpStatusCode.LoopDetected = 508;
httpstatus_HttpStatusCode.NotExtended = 510;
httpstatus_HttpStatusCode.NetworkAuthenticationRequired = 511;
mime_Mime.db = { "application/1d-interleaved-parityfec" : { "source" : "iana"}, "application/3gpdash-qoe-report+xml" : { "source" : "iana", "compressible" : true}, "application/3gpp-ims+xml" : { "source" : "iana", "compressible" : true}, "application/a2l" : { "source" : "iana"}, "application/activemessage" : { "source" : "iana"}, "application/activity+json" : { "source" : "iana", "compressible" : true}, "application/alto-costmap+json" : { "source" : "iana", "compressible" : true}, "application/alto-costmapfilter+json" : { "source" : "iana", "compressible" : true}, "application/alto-directory+json" : { "source" : "iana", "compressible" : true}, "application/alto-endpointcost+json" : { "source" : "iana", "compressible" : true}, "application/alto-endpointcostparams+json" : { "source" : "iana", "compressible" : true}, "application/alto-endpointprop+json" : { "source" : "iana", "compressible" : true}, "application/alto-endpointpropparams+json" : { "source" : "iana", "compressible" : true}, "application/alto-error+json" : { "source" : "iana", "compressible" : true}, "application/alto-networkmap+json" : { "source" : "iana", "compressible" : true}, "application/alto-networkmapfilter+json" : { "source" : "iana", "compressible" : true}, "application/aml" : { "source" : "iana"}, "application/andrew-inset" : { "source" : "iana", "extensions" : ["ez"]}, "application/applefile" : { "source" : "iana"}, "application/applixware" : { "source" : "apache", "extensions" : ["aw"]}, "application/atf" : { "source" : "iana"}, "application/atfx" : { "source" : "iana"}, "application/atom+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["atom"]}, "application/atomcat+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["atomcat"]}, "application/atomdeleted+xml" : { "source" : "iana", "compressible" : true}, "application/atomicmail" : { "source" : "iana"}, "application/atomsvc+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["atomsvc"]}, "application/atxml" : { "source" : "iana"}, "application/auth-policy+xml" : { "source" : "iana", "compressible" : true}, "application/bacnet-xdd+zip" : { "source" : "iana", "compressible" : false}, "application/batch-smtp" : { "source" : "iana"}, "application/bdoc" : { "compressible" : false, "extensions" : ["bdoc"]}, "application/beep+xml" : { "source" : "iana", "compressible" : true}, "application/calendar+json" : { "source" : "iana", "compressible" : true}, "application/calendar+xml" : { "source" : "iana", "compressible" : true}, "application/call-completion" : { "source" : "iana"}, "application/cals-1840" : { "source" : "iana"}, "application/cbor" : { "source" : "iana"}, "application/cccex" : { "source" : "iana"}, "application/ccmp+xml" : { "source" : "iana", "compressible" : true}, "application/ccxml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["ccxml"]}, "application/cdfx+xml" : { "source" : "iana", "compressible" : true}, "application/cdmi-capability" : { "source" : "iana", "extensions" : ["cdmia"]}, "application/cdmi-container" : { "source" : "iana", "extensions" : ["cdmic"]}, "application/cdmi-domain" : { "source" : "iana", "extensions" : ["cdmid"]}, "application/cdmi-object" : { "source" : "iana", "extensions" : ["cdmio"]}, "application/cdmi-queue" : { "source" : "iana", "extensions" : ["cdmiq"]}, "application/cdni" : { "source" : "iana"}, "application/cea" : { "source" : "iana"}, "application/cea-2018+xml" : { "source" : "iana", "compressible" : true}, "application/cellml+xml" : { "source" : "iana", "compressible" : true}, "application/cfw" : { "source" : "iana"}, "application/clue_info+xml" : { "source" : "iana", "compressible" : true}, "application/cms" : { "source" : "iana"}, "application/cnrp+xml" : { "source" : "iana", "compressible" : true}, "application/coap-group+json" : { "source" : "iana", "compressible" : true}, "application/coap-payload" : { "source" : "iana"}, "application/commonground" : { "source" : "iana"}, "application/conference-info+xml" : { "source" : "iana", "compressible" : true}, "application/cose" : { "source" : "iana"}, "application/cose-key" : { "source" : "iana"}, "application/cose-key-set" : { "source" : "iana"}, "application/cpl+xml" : { "source" : "iana", "compressible" : true}, "application/csrattrs" : { "source" : "iana"}, "application/csta+xml" : { "source" : "iana", "compressible" : true}, "application/cstadata+xml" : { "source" : "iana", "compressible" : true}, "application/csvm+json" : { "source" : "iana", "compressible" : true}, "application/cu-seeme" : { "source" : "apache", "extensions" : ["cu"]}, "application/cwt" : { "source" : "iana"}, "application/cybercash" : { "source" : "iana"}, "application/dart" : { "compressible" : true}, "application/dash+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mpd"]}, "application/dashdelta" : { "source" : "iana"}, "application/davmount+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["davmount"]}, "application/dca-rft" : { "source" : "iana"}, "application/dcd" : { "source" : "iana"}, "application/dec-dx" : { "source" : "iana"}, "application/dialog-info+xml" : { "source" : "iana", "compressible" : true}, "application/dicom" : { "source" : "iana"}, "application/dicom+json" : { "source" : "iana", "compressible" : true}, "application/dicom+xml" : { "source" : "iana", "compressible" : true}, "application/dii" : { "source" : "iana"}, "application/dit" : { "source" : "iana"}, "application/dns" : { "source" : "iana"}, "application/dns+json" : { "source" : "iana", "compressible" : true}, "application/dns-message" : { "source" : "iana"}, "application/docbook+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["dbk"]}, "application/dskpp+xml" : { "source" : "iana", "compressible" : true}, "application/dssc+der" : { "source" : "iana", "extensions" : ["dssc"]}, "application/dssc+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xdssc"]}, "application/dvcs" : { "source" : "iana"}, "application/ecmascript" : { "source" : "iana", "compressible" : true, "extensions" : ["ecma","es"]}, "application/edi-consent" : { "source" : "iana"}, "application/edi-x12" : { "source" : "iana", "compressible" : false}, "application/edifact" : { "source" : "iana", "compressible" : false}, "application/efi" : { "source" : "iana"}, "application/emergencycalldata.comment+xml" : { "source" : "iana", "compressible" : true}, "application/emergencycalldata.control+xml" : { "source" : "iana", "compressible" : true}, "application/emergencycalldata.deviceinfo+xml" : { "source" : "iana", "compressible" : true}, "application/emergencycalldata.ecall.msd" : { "source" : "iana"}, "application/emergencycalldata.providerinfo+xml" : { "source" : "iana", "compressible" : true}, "application/emergencycalldata.serviceinfo+xml" : { "source" : "iana", "compressible" : true}, "application/emergencycalldata.subscriberinfo+xml" : { "source" : "iana", "compressible" : true}, "application/emergencycalldata.veds+xml" : { "source" : "iana", "compressible" : true}, "application/emma+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["emma"]}, "application/emotionml+xml" : { "source" : "iana", "compressible" : true}, "application/encaprtp" : { "source" : "iana"}, "application/epp+xml" : { "source" : "iana", "compressible" : true}, "application/epub+zip" : { "source" : "iana", "compressible" : false, "extensions" : ["epub"]}, "application/eshop" : { "source" : "iana"}, "application/exi" : { "source" : "iana", "extensions" : ["exi"]}, "application/expect-ct-report+json" : { "source" : "iana", "compressible" : true}, "application/fastinfoset" : { "source" : "iana"}, "application/fastsoap" : { "source" : "iana"}, "application/fdt+xml" : { "source" : "iana", "compressible" : true}, "application/fhir+json" : { "source" : "iana", "compressible" : true}, "application/fhir+xml" : { "source" : "iana", "compressible" : true}, "application/fido.trusted-apps+json" : { "compressible" : true}, "application/fits" : { "source" : "iana"}, "application/font-sfnt" : { "source" : "iana"}, "application/font-tdpfr" : { "source" : "iana", "extensions" : ["pfr"]}, "application/font-woff" : { "source" : "iana", "compressible" : false}, "application/framework-attributes+xml" : { "source" : "iana", "compressible" : true}, "application/geo+json" : { "source" : "iana", "compressible" : true, "extensions" : ["geojson"]}, "application/geo+json-seq" : { "source" : "iana"}, "application/geopackage+sqlite3" : { "source" : "iana"}, "application/geoxacml+xml" : { "source" : "iana", "compressible" : true}, "application/gltf-buffer" : { "source" : "iana"}, "application/gml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["gml"]}, "application/gpx+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["gpx"]}, "application/gxf" : { "source" : "apache", "extensions" : ["gxf"]}, "application/gzip" : { "source" : "iana", "compressible" : false, "extensions" : ["gz"]}, "application/h224" : { "source" : "iana"}, "application/held+xml" : { "source" : "iana", "compressible" : true}, "application/hjson" : { "extensions" : ["hjson"]}, "application/http" : { "source" : "iana"}, "application/hyperstudio" : { "source" : "iana", "extensions" : ["stk"]}, "application/ibe-key-request+xml" : { "source" : "iana", "compressible" : true}, "application/ibe-pkg-reply+xml" : { "source" : "iana", "compressible" : true}, "application/ibe-pp-data" : { "source" : "iana"}, "application/iges" : { "source" : "iana"}, "application/im-iscomposing+xml" : { "source" : "iana", "compressible" : true}, "application/index" : { "source" : "iana"}, "application/index.cmd" : { "source" : "iana"}, "application/index.obj" : { "source" : "iana"}, "application/index.response" : { "source" : "iana"}, "application/index.vnd" : { "source" : "iana"}, "application/inkml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["ink","inkml"]}, "application/iotp" : { "source" : "iana"}, "application/ipfix" : { "source" : "iana", "extensions" : ["ipfix"]}, "application/ipp" : { "source" : "iana"}, "application/isup" : { "source" : "iana"}, "application/its+xml" : { "source" : "iana", "compressible" : true}, "application/java-archive" : { "source" : "apache", "compressible" : false, "extensions" : ["jar","war","ear"]}, "application/java-serialized-object" : { "source" : "apache", "compressible" : false, "extensions" : ["ser"]}, "application/java-vm" : { "source" : "apache", "compressible" : false, "extensions" : ["class"]}, "application/javascript" : { "source" : "iana", "charset" : "UTF-8", "compressible" : true, "extensions" : ["js","mjs"]}, "application/jf2feed+json" : { "source" : "iana", "compressible" : true}, "application/jose" : { "source" : "iana"}, "application/jose+json" : { "source" : "iana", "compressible" : true}, "application/jrd+json" : { "source" : "iana", "compressible" : true}, "application/json" : { "source" : "iana", "charset" : "UTF-8", "compressible" : true, "extensions" : ["json","map"]}, "application/json-patch+json" : { "source" : "iana", "compressible" : true}, "application/json-seq" : { "source" : "iana"}, "application/json5" : { "extensions" : ["json5"]}, "application/jsonml+json" : { "source" : "apache", "compressible" : true, "extensions" : ["jsonml"]}, "application/jwk+json" : { "source" : "iana", "compressible" : true}, "application/jwk-set+json" : { "source" : "iana", "compressible" : true}, "application/jwt" : { "source" : "iana"}, "application/kpml-request+xml" : { "source" : "iana", "compressible" : true}, "application/kpml-response+xml" : { "source" : "iana", "compressible" : true}, "application/ld+json" : { "source" : "iana", "compressible" : true, "extensions" : ["jsonld"]}, "application/lgr+xml" : { "source" : "iana", "compressible" : true}, "application/link-format" : { "source" : "iana"}, "application/load-control+xml" : { "source" : "iana", "compressible" : true}, "application/lost+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["lostxml"]}, "application/lostsync+xml" : { "source" : "iana", "compressible" : true}, "application/lxf" : { "source" : "iana"}, "application/mac-binhex40" : { "source" : "iana", "extensions" : ["hqx"]}, "application/mac-compactpro" : { "source" : "apache", "extensions" : ["cpt"]}, "application/macwriteii" : { "source" : "iana"}, "application/mads+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mads"]}, "application/manifest+json" : { "charset" : "UTF-8", "compressible" : true, "extensions" : ["webmanifest"]}, "application/marc" : { "source" : "iana", "extensions" : ["mrc"]}, "application/marcxml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mrcx"]}, "application/mathematica" : { "source" : "iana", "extensions" : ["ma","nb","mb"]}, "application/mathml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mathml"]}, "application/mathml-content+xml" : { "source" : "iana", "compressible" : true}, "application/mathml-presentation+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-associated-procedure-description+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-deregister+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-envelope+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-msk+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-msk-response+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-protection-description+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-reception-report+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-register+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-register-response+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-schedule+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-user-service-description+xml" : { "source" : "iana", "compressible" : true}, "application/mbox" : { "source" : "iana", "extensions" : ["mbox"]}, "application/media-policy-dataset+xml" : { "source" : "iana", "compressible" : true}, "application/media_control+xml" : { "source" : "iana", "compressible" : true}, "application/mediaservercontrol+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mscml"]}, "application/merge-patch+json" : { "source" : "iana", "compressible" : true}, "application/metalink+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["metalink"]}, "application/metalink4+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["meta4"]}, "application/mets+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mets"]}, "application/mf4" : { "source" : "iana"}, "application/mikey" : { "source" : "iana"}, "application/mmt-usd+xml" : { "source" : "iana", "compressible" : true}, "application/mods+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mods"]}, "application/moss-keys" : { "source" : "iana"}, "application/moss-signature" : { "source" : "iana"}, "application/mosskey-data" : { "source" : "iana"}, "application/mosskey-request" : { "source" : "iana"}, "application/mp21" : { "source" : "iana", "extensions" : ["m21","mp21"]}, "application/mp4" : { "source" : "iana", "extensions" : ["mp4s","m4p"]}, "application/mpeg4-generic" : { "source" : "iana"}, "application/mpeg4-iod" : { "source" : "iana"}, "application/mpeg4-iod-xmt" : { "source" : "iana"}, "application/mrb-consumer+xml" : { "source" : "iana", "compressible" : true}, "application/mrb-publish+xml" : { "source" : "iana", "compressible" : true}, "application/msc-ivr+xml" : { "source" : "iana", "compressible" : true}, "application/msc-mixer+xml" : { "source" : "iana", "compressible" : true}, "application/msword" : { "source" : "iana", "compressible" : false, "extensions" : ["doc","dot"]}, "application/mud+json" : { "source" : "iana", "compressible" : true}, "application/mxf" : { "source" : "iana", "extensions" : ["mxf"]}, "application/n-quads" : { "source" : "iana", "extensions" : ["nq"]}, "application/n-triples" : { "source" : "iana", "extensions" : ["nt"]}, "application/nasdata" : { "source" : "iana"}, "application/news-checkgroups" : { "source" : "iana"}, "application/news-groupinfo" : { "source" : "iana"}, "application/news-transmission" : { "source" : "iana"}, "application/nlsml+xml" : { "source" : "iana", "compressible" : true}, "application/node" : { "source" : "iana"}, "application/nss" : { "source" : "iana"}, "application/ocsp-request" : { "source" : "iana"}, "application/ocsp-response" : { "source" : "iana"}, "application/octet-stream" : { "source" : "iana", "compressible" : false, "extensions" : ["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]}, "application/oda" : { "source" : "iana", "extensions" : ["oda"]}, "application/odm+xml" : { "source" : "iana", "compressible" : true}, "application/odx" : { "source" : "iana"}, "application/oebps-package+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["opf"]}, "application/ogg" : { "source" : "iana", "compressible" : false, "extensions" : ["ogx"]}, "application/omdoc+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["omdoc"]}, "application/onenote" : { "source" : "apache", "extensions" : ["onetoc","onetoc2","onetmp","onepkg"]}, "application/oxps" : { "source" : "iana", "extensions" : ["oxps"]}, "application/p2p-overlay+xml" : { "source" : "iana", "compressible" : true}, "application/parityfec" : { "source" : "iana"}, "application/passport" : { "source" : "iana"}, "application/patch-ops-error+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xer"]}, "application/pdf" : { "source" : "iana", "compressible" : false, "extensions" : ["pdf"]}, "application/pdx" : { "source" : "iana"}, "application/pem-certificate-chain" : { "source" : "iana"}, "application/pgp-encrypted" : { "source" : "iana", "compressible" : false, "extensions" : ["pgp"]}, "application/pgp-keys" : { "source" : "iana"}, "application/pgp-signature" : { "source" : "iana", "extensions" : ["asc","sig"]}, "application/pics-rules" : { "source" : "apache", "extensions" : ["prf"]}, "application/pidf+xml" : { "source" : "iana", "compressible" : true}, "application/pidf-diff+xml" : { "source" : "iana", "compressible" : true}, "application/pkcs10" : { "source" : "iana", "extensions" : ["p10"]}, "application/pkcs12" : { "source" : "iana"}, "application/pkcs7-mime" : { "source" : "iana", "extensions" : ["p7m","p7c"]}, "application/pkcs7-signature" : { "source" : "iana", "extensions" : ["p7s"]}, "application/pkcs8" : { "source" : "iana", "extensions" : ["p8"]}, "application/pkcs8-encrypted" : { "source" : "iana"}, "application/pkix-attr-cert" : { "source" : "iana", "extensions" : ["ac"]}, "application/pkix-cert" : { "source" : "iana", "extensions" : ["cer"]}, "application/pkix-crl" : { "source" : "iana", "extensions" : ["crl"]}, "application/pkix-pkipath" : { "source" : "iana", "extensions" : ["pkipath"]}, "application/pkixcmp" : { "source" : "iana", "extensions" : ["pki"]}, "application/pls+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["pls"]}, "application/poc-settings+xml" : { "source" : "iana", "compressible" : true}, "application/postscript" : { "source" : "iana", "compressible" : true, "extensions" : ["ai","eps","ps"]}, "application/ppsp-tracker+json" : { "source" : "iana", "compressible" : true}, "application/problem+json" : { "source" : "iana", "compressible" : true}, "application/problem+xml" : { "source" : "iana", "compressible" : true}, "application/provenance+xml" : { "source" : "iana", "compressible" : true}, "application/prs.alvestrand.titrax-sheet" : { "source" : "iana"}, "application/prs.cww" : { "source" : "iana", "extensions" : ["cww"]}, "application/prs.hpub+zip" : { "source" : "iana", "compressible" : false}, "application/prs.nprend" : { "source" : "iana"}, "application/prs.plucker" : { "source" : "iana"}, "application/prs.rdf-xml-crypt" : { "source" : "iana"}, "application/prs.xsf+xml" : { "source" : "iana", "compressible" : true}, "application/pskc+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["pskcxml"]}, "application/qsig" : { "source" : "iana"}, "application/raml+yaml" : { "compressible" : true, "extensions" : ["raml"]}, "application/raptorfec" : { "source" : "iana"}, "application/rdap+json" : { "source" : "iana", "compressible" : true}, "application/rdf+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["rdf","owl"]}, "application/reginfo+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["rif"]}, "application/relax-ng-compact-syntax" : { "source" : "iana", "extensions" : ["rnc"]}, "application/remote-printing" : { "source" : "iana"}, "application/reputon+json" : { "source" : "iana", "compressible" : true}, "application/resource-lists+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["rl"]}, "application/resource-lists-diff+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["rld"]}, "application/rfc+xml" : { "source" : "iana", "compressible" : true}, "application/riscos" : { "source" : "iana"}, "application/rlmi+xml" : { "source" : "iana", "compressible" : true}, "application/rls-services+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["rs"]}, "application/route-apd+xml" : { "source" : "iana", "compressible" : true}, "application/route-s-tsid+xml" : { "source" : "iana", "compressible" : true}, "application/route-usd+xml" : { "source" : "iana", "compressible" : true}, "application/rpki-ghostbusters" : { "source" : "iana", "extensions" : ["gbr"]}, "application/rpki-manifest" : { "source" : "iana", "extensions" : ["mft"]}, "application/rpki-publication" : { "source" : "iana"}, "application/rpki-roa" : { "source" : "iana", "extensions" : ["roa"]}, "application/rpki-updown" : { "source" : "iana"}, "application/rsd+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["rsd"]}, "application/rss+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["rss"]}, "application/rtf" : { "source" : "iana", "compressible" : true, "extensions" : ["rtf"]}, "application/rtploopback" : { "source" : "iana"}, "application/rtx" : { "source" : "iana"}, "application/samlassertion+xml" : { "source" : "iana", "compressible" : true}, "application/samlmetadata+xml" : { "source" : "iana", "compressible" : true}, "application/sbml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["sbml"]}, "application/scaip+xml" : { "source" : "iana", "compressible" : true}, "application/scim+json" : { "source" : "iana", "compressible" : true}, "application/scvp-cv-request" : { "source" : "iana", "extensions" : ["scq"]}, "application/scvp-cv-response" : { "source" : "iana", "extensions" : ["scs"]}, "application/scvp-vp-request" : { "source" : "iana", "extensions" : ["spq"]}, "application/scvp-vp-response" : { "source" : "iana", "extensions" : ["spp"]}, "application/sdp" : { "source" : "iana", "extensions" : ["sdp"]}, "application/secevent+jwt" : { "source" : "iana"}, "application/senml+cbor" : { "source" : "iana"}, "application/senml+json" : { "source" : "iana", "compressible" : true}, "application/senml+xml" : { "source" : "iana", "compressible" : true}, "application/senml-exi" : { "source" : "iana"}, "application/sensml+cbor" : { "source" : "iana"}, "application/sensml+json" : { "source" : "iana", "compressible" : true}, "application/sensml+xml" : { "source" : "iana", "compressible" : true}, "application/sensml-exi" : { "source" : "iana"}, "application/sep+xml" : { "source" : "iana", "compressible" : true}, "application/sep-exi" : { "source" : "iana"}, "application/session-info" : { "source" : "iana"}, "application/set-payment" : { "source" : "iana"}, "application/set-payment-initiation" : { "source" : "iana", "extensions" : ["setpay"]}, "application/set-registration" : { "source" : "iana"}, "application/set-registration-initiation" : { "source" : "iana", "extensions" : ["setreg"]}, "application/sgml" : { "source" : "iana"}, "application/sgml-open-catalog" : { "source" : "iana"}, "application/shf+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["shf"]}, "application/sieve" : { "source" : "iana"}, "application/simple-filter+xml" : { "source" : "iana", "compressible" : true}, "application/simple-message-summary" : { "source" : "iana"}, "application/simplesymbolcontainer" : { "source" : "iana"}, "application/slate" : { "source" : "iana"}, "application/smil" : { "source" : "iana"}, "application/smil+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["smi","smil"]}, "application/smpte336m" : { "source" : "iana"}, "application/soap+fastinfoset" : { "source" : "iana"}, "application/soap+xml" : { "source" : "iana", "compressible" : true}, "application/sparql-query" : { "source" : "iana", "extensions" : ["rq"]}, "application/sparql-results+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["srx"]}, "application/spirits-event+xml" : { "source" : "iana", "compressible" : true}, "application/sql" : { "source" : "iana"}, "application/srgs" : { "source" : "iana", "extensions" : ["gram"]}, "application/srgs+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["grxml"]}, "application/sru+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["sru"]}, "application/ssdl+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["ssdl"]}, "application/ssml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["ssml"]}, "application/stix+json" : { "source" : "iana", "compressible" : true}, "application/tamp-apex-update" : { "source" : "iana"}, "application/tamp-apex-update-confirm" : { "source" : "iana"}, "application/tamp-community-update" : { "source" : "iana"}, "application/tamp-community-update-confirm" : { "source" : "iana"}, "application/tamp-error" : { "source" : "iana"}, "application/tamp-sequence-adjust" : { "source" : "iana"}, "application/tamp-sequence-adjust-confirm" : { "source" : "iana"}, "application/tamp-status-query" : { "source" : "iana"}, "application/tamp-status-response" : { "source" : "iana"}, "application/tamp-update" : { "source" : "iana"}, "application/tamp-update-confirm" : { "source" : "iana"}, "application/tar" : { "compressible" : true}, "application/taxii+json" : { "source" : "iana", "compressible" : true}, "application/tei+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["tei","teicorpus"]}, "application/tetra_isi" : { "source" : "iana"}, "application/thraud+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["tfi"]}, "application/timestamp-query" : { "source" : "iana"}, "application/timestamp-reply" : { "source" : "iana"}, "application/timestamped-data" : { "source" : "iana", "extensions" : ["tsd"]}, "application/tlsrpt+gzip" : { "source" : "iana"}, "application/tlsrpt+json" : { "source" : "iana", "compressible" : true}, "application/tnauthlist" : { "source" : "iana"}, "application/trickle-ice-sdpfrag" : { "source" : "iana"}, "application/trig" : { "source" : "iana"}, "application/ttml+xml" : { "source" : "iana", "compressible" : true}, "application/tve-trigger" : { "source" : "iana"}, "application/tzif" : { "source" : "iana"}, "application/tzif-leap" : { "source" : "iana"}, "application/ulpfec" : { "source" : "iana"}, "application/urc-grpsheet+xml" : { "source" : "iana", "compressible" : true}, "application/urc-ressheet+xml" : { "source" : "iana", "compressible" : true}, "application/urc-targetdesc+xml" : { "source" : "iana", "compressible" : true}, "application/urc-uisocketdesc+xml" : { "source" : "iana", "compressible" : true}, "application/vcard+json" : { "source" : "iana", "compressible" : true}, "application/vcard+xml" : { "source" : "iana", "compressible" : true}, "application/vemmi" : { "source" : "iana"}, "application/vividence.scriptfile" : { "source" : "apache"}, "application/vnd.1000minds.decision-model+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp-prose+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp-prose-pc3ch+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp-v2x-local-service-information" : { "source" : "iana"}, "application/vnd.3gpp.access-transfer-events+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.bsf+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.gmop+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mc-signalling-ear" : { "source" : "iana"}, "application/vnd.3gpp.mcdata-affiliation-command+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcdata-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcdata-payload" : { "source" : "iana"}, "application/vnd.3gpp.mcdata-service-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcdata-signalling" : { "source" : "iana"}, "application/vnd.3gpp.mcdata-ue-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcdata-user-profile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-affiliation-command+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-floor-request+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-location-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-mbms-usage-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-service-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-signed+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-ue-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-ue-init-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-user-profile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-affiliation-command+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-affiliation-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-location-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-mbms-usage-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-service-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-transmission-request+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-ue-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-user-profile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mid-call+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.pic-bw-large" : { "source" : "iana", "extensions" : ["plb"]}, "application/vnd.3gpp.pic-bw-small" : { "source" : "iana", "extensions" : ["psb"]}, "application/vnd.3gpp.pic-bw-var" : { "source" : "iana", "extensions" : ["pvb"]}, "application/vnd.3gpp.sms" : { "source" : "iana"}, "application/vnd.3gpp.sms+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.srvcc-ext+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.srvcc-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.state-and-event-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.ussd+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp2.bcmcsinfo+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp2.sms" : { "source" : "iana"}, "application/vnd.3gpp2.tcap" : { "source" : "iana", "extensions" : ["tcap"]}, "application/vnd.3lightssoftware.imagescal" : { "source" : "iana"}, "application/vnd.3m.post-it-notes" : { "source" : "iana", "extensions" : ["pwn"]}, "application/vnd.accpac.simply.aso" : { "source" : "iana", "extensions" : ["aso"]}, "application/vnd.accpac.simply.imp" : { "source" : "iana", "extensions" : ["imp"]}, "application/vnd.acucobol" : { "source" : "iana", "extensions" : ["acu"]}, "application/vnd.acucorp" : { "source" : "iana", "extensions" : ["atc","acutc"]}, "application/vnd.adobe.air-application-installer-package+zip" : { "source" : "apache", "compressible" : false, "extensions" : ["air"]}, "application/vnd.adobe.flash.movie" : { "source" : "iana"}, "application/vnd.adobe.formscentral.fcdt" : { "source" : "iana", "extensions" : ["fcdt"]}, "application/vnd.adobe.fxp" : { "source" : "iana", "extensions" : ["fxp","fxpl"]}, "application/vnd.adobe.partial-upload" : { "source" : "iana"}, "application/vnd.adobe.xdp+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xdp"]}, "application/vnd.adobe.xfdf" : { "source" : "iana", "extensions" : ["xfdf"]}, "application/vnd.aether.imp" : { "source" : "iana"}, "application/vnd.afpc.afplinedata" : { "source" : "iana"}, "application/vnd.afpc.modca" : { "source" : "iana"}, "application/vnd.ah-barcode" : { "source" : "iana"}, "application/vnd.ahead.space" : { "source" : "iana", "extensions" : ["ahead"]}, "application/vnd.airzip.filesecure.azf" : { "source" : "iana", "extensions" : ["azf"]}, "application/vnd.airzip.filesecure.azs" : { "source" : "iana", "extensions" : ["azs"]}, "application/vnd.amadeus+json" : { "source" : "iana", "compressible" : true}, "application/vnd.amazon.ebook" : { "source" : "apache", "extensions" : ["azw"]}, "application/vnd.amazon.mobi8-ebook" : { "source" : "iana"}, "application/vnd.americandynamics.acc" : { "source" : "iana", "extensions" : ["acc"]}, "application/vnd.amiga.ami" : { "source" : "iana", "extensions" : ["ami"]}, "application/vnd.amundsen.maze+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.android.package-archive" : { "source" : "apache", "compressible" : false, "extensions" : ["apk"]}, "application/vnd.anki" : { "source" : "iana"}, "application/vnd.anser-web-certificate-issue-initiation" : { "source" : "iana", "extensions" : ["cii"]}, "application/vnd.anser-web-funds-transfer-initiation" : { "source" : "apache", "extensions" : ["fti"]}, "application/vnd.antix.game-component" : { "source" : "iana", "extensions" : ["atx"]}, "application/vnd.apache.thrift.binary" : { "source" : "iana"}, "application/vnd.apache.thrift.compact" : { "source" : "iana"}, "application/vnd.apache.thrift.json" : { "source" : "iana"}, "application/vnd.api+json" : { "source" : "iana", "compressible" : true}, "application/vnd.apothekende.reservation+json" : { "source" : "iana", "compressible" : true}, "application/vnd.apple.installer+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mpkg"]}, "application/vnd.apple.keynote" : { "source" : "iana", "extensions" : ["keynote"]}, "application/vnd.apple.mpegurl" : { "source" : "iana", "extensions" : ["m3u8"]}, "application/vnd.apple.numbers" : { "source" : "iana", "extensions" : ["numbers"]}, "application/vnd.apple.pages" : { "source" : "iana", "extensions" : ["pages"]}, "application/vnd.apple.pkpass" : { "compressible" : false, "extensions" : ["pkpass"]}, "application/vnd.arastra.swi" : { "source" : "iana"}, "application/vnd.aristanetworks.swi" : { "source" : "iana", "extensions" : ["swi"]}, "application/vnd.artisan+json" : { "source" : "iana", "compressible" : true}, "application/vnd.artsquare" : { "source" : "iana"}, "application/vnd.astraea-software.iota" : { "source" : "iana", "extensions" : ["iota"]}, "application/vnd.audiograph" : { "source" : "iana", "extensions" : ["aep"]}, "application/vnd.autopackage" : { "source" : "iana"}, "application/vnd.avalon+json" : { "source" : "iana", "compressible" : true}, "application/vnd.avistar+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.balsamiq.bmml+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.balsamiq.bmpr" : { "source" : "iana"}, "application/vnd.banana-accounting" : { "source" : "iana"}, "application/vnd.bbf.usp.msg" : { "source" : "iana"}, "application/vnd.bbf.usp.msg+json" : { "source" : "iana", "compressible" : true}, "application/vnd.bekitzur-stech+json" : { "source" : "iana", "compressible" : true}, "application/vnd.bint.med-content" : { "source" : "iana"}, "application/vnd.biopax.rdf+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.blink-idb-value-wrapper" : { "source" : "iana"}, "application/vnd.blueice.multipass" : { "source" : "iana", "extensions" : ["mpm"]}, "application/vnd.bluetooth.ep.oob" : { "source" : "iana"}, "application/vnd.bluetooth.le.oob" : { "source" : "iana"}, "application/vnd.bmi" : { "source" : "iana", "extensions" : ["bmi"]}, "application/vnd.businessobjects" : { "source" : "iana", "extensions" : ["rep"]}, "application/vnd.byu.uapi+json" : { "source" : "iana", "compressible" : true}, "application/vnd.cab-jscript" : { "source" : "iana"}, "application/vnd.canon-cpdl" : { "source" : "iana"}, "application/vnd.canon-lips" : { "source" : "iana"}, "application/vnd.capasystems-pg+json" : { "source" : "iana", "compressible" : true}, "application/vnd.cendio.thinlinc.clientconf" : { "source" : "iana"}, "application/vnd.century-systems.tcp_stream" : { "source" : "iana"}, "application/vnd.chemdraw+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["cdxml"]}, "application/vnd.chess-pgn" : { "source" : "iana"}, "application/vnd.chipnuts.karaoke-mmd" : { "source" : "iana", "extensions" : ["mmd"]}, "application/vnd.cinderella" : { "source" : "iana", "extensions" : ["cdy"]}, "application/vnd.cirpack.isdn-ext" : { "source" : "iana"}, "application/vnd.citationstyles.style+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["csl"]}, "application/vnd.claymore" : { "source" : "iana", "extensions" : ["cla"]}, "application/vnd.cloanto.rp9" : { "source" : "iana", "extensions" : ["rp9"]}, "application/vnd.clonk.c4group" : { "source" : "iana", "extensions" : ["c4g","c4d","c4f","c4p","c4u"]}, "application/vnd.cluetrust.cartomobile-config" : { "source" : "iana", "extensions" : ["c11amc"]}, "application/vnd.cluetrust.cartomobile-config-pkg" : { "source" : "iana", "extensions" : ["c11amz"]}, "application/vnd.coffeescript" : { "source" : "iana"}, "application/vnd.collabio.xodocuments.document" : { "source" : "iana"}, "application/vnd.collabio.xodocuments.document-template" : { "source" : "iana"}, "application/vnd.collabio.xodocuments.presentation" : { "source" : "iana"}, "application/vnd.collabio.xodocuments.presentation-template" : { "source" : "iana"}, "application/vnd.collabio.xodocuments.spreadsheet" : { "source" : "iana"}, "application/vnd.collabio.xodocuments.spreadsheet-template" : { "source" : "iana"}, "application/vnd.collection+json" : { "source" : "iana", "compressible" : true}, "application/vnd.collection.doc+json" : { "source" : "iana", "compressible" : true}, "application/vnd.collection.next+json" : { "source" : "iana", "compressible" : true}, "application/vnd.comicbook+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.comicbook-rar" : { "source" : "iana"}, "application/vnd.commerce-battelle" : { "source" : "iana"}, "application/vnd.commonspace" : { "source" : "iana", "extensions" : ["csp"]}, "application/vnd.contact.cmsg" : { "source" : "iana", "extensions" : ["cdbcmsg"]}, "application/vnd.coreos.ignition+json" : { "source" : "iana", "compressible" : true}, "application/vnd.cosmocaller" : { "source" : "iana", "extensions" : ["cmc"]}, "application/vnd.crick.clicker" : { "source" : "iana", "extensions" : ["clkx"]}, "application/vnd.crick.clicker.keyboard" : { "source" : "iana", "extensions" : ["clkk"]}, "application/vnd.crick.clicker.palette" : { "source" : "iana", "extensions" : ["clkp"]}, "application/vnd.crick.clicker.template" : { "source" : "iana", "extensions" : ["clkt"]}, "application/vnd.crick.clicker.wordbank" : { "source" : "iana", "extensions" : ["clkw"]}, "application/vnd.criticaltools.wbs+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["wbs"]}, "application/vnd.ctc-posml" : { "source" : "iana", "extensions" : ["pml"]}, "application/vnd.ctct.ws+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.cups-pdf" : { "source" : "iana"}, "application/vnd.cups-postscript" : { "source" : "iana"}, "application/vnd.cups-ppd" : { "source" : "iana", "extensions" : ["ppd"]}, "application/vnd.cups-raster" : { "source" : "iana"}, "application/vnd.cups-raw" : { "source" : "iana"}, "application/vnd.curl" : { "source" : "iana"}, "application/vnd.curl.car" : { "source" : "apache", "extensions" : ["car"]}, "application/vnd.curl.pcurl" : { "source" : "apache", "extensions" : ["pcurl"]}, "application/vnd.cyan.dean.root+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.cybank" : { "source" : "iana"}, "application/vnd.d2l.coursepackage1p0+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.dart" : { "source" : "iana", "compressible" : true, "extensions" : ["dart"]}, "application/vnd.data-vision.rdz" : { "source" : "iana", "extensions" : ["rdz"]}, "application/vnd.datapackage+json" : { "source" : "iana", "compressible" : true}, "application/vnd.dataresource+json" : { "source" : "iana", "compressible" : true}, "application/vnd.debian.binary-package" : { "source" : "iana"}, "application/vnd.dece.data" : { "source" : "iana", "extensions" : ["uvf","uvvf","uvd","uvvd"]}, "application/vnd.dece.ttml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["uvt","uvvt"]}, "application/vnd.dece.unspecified" : { "source" : "iana", "extensions" : ["uvx","uvvx"]}, "application/vnd.dece.zip" : { "source" : "iana", "extensions" : ["uvz","uvvz"]}, "application/vnd.denovo.fcselayout-link" : { "source" : "iana", "extensions" : ["fe_launch"]}, "application/vnd.desmume.movie" : { "source" : "iana"}, "application/vnd.dir-bi.plate-dl-nosuffix" : { "source" : "iana"}, "application/vnd.dm.delegation+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dna" : { "source" : "iana", "extensions" : ["dna"]}, "application/vnd.document+json" : { "source" : "iana", "compressible" : true}, "application/vnd.dolby.mlp" : { "source" : "apache", "extensions" : ["mlp"]}, "application/vnd.dolby.mobile.1" : { "source" : "iana"}, "application/vnd.dolby.mobile.2" : { "source" : "iana"}, "application/vnd.doremir.scorecloud-binary-document" : { "source" : "iana"}, "application/vnd.dpgraph" : { "source" : "iana", "extensions" : ["dpg"]}, "application/vnd.dreamfactory" : { "source" : "iana", "extensions" : ["dfac"]}, "application/vnd.drive+json" : { "source" : "iana", "compressible" : true}, "application/vnd.ds-keypoint" : { "source" : "apache", "extensions" : ["kpxx"]}, "application/vnd.dtg.local" : { "source" : "iana"}, "application/vnd.dtg.local.flash" : { "source" : "iana"}, "application/vnd.dtg.local.html" : { "source" : "iana"}, "application/vnd.dvb.ait" : { "source" : "iana", "extensions" : ["ait"]}, "application/vnd.dvb.dvbj" : { "source" : "iana"}, "application/vnd.dvb.esgcontainer" : { "source" : "iana"}, "application/vnd.dvb.ipdcdftnotifaccess" : { "source" : "iana"}, "application/vnd.dvb.ipdcesgaccess" : { "source" : "iana"}, "application/vnd.dvb.ipdcesgaccess2" : { "source" : "iana"}, "application/vnd.dvb.ipdcesgpdd" : { "source" : "iana"}, "application/vnd.dvb.ipdcroaming" : { "source" : "iana"}, "application/vnd.dvb.iptv.alfec-base" : { "source" : "iana"}, "application/vnd.dvb.iptv.alfec-enhancement" : { "source" : "iana"}, "application/vnd.dvb.notif-aggregate-root+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.notif-container+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.notif-generic+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.notif-ia-msglist+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.notif-ia-registration-request+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.notif-ia-registration-response+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.notif-init+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.pfr" : { "source" : "iana"}, "application/vnd.dvb.service" : { "source" : "iana", "extensions" : ["svc"]}, "application/vnd.dxr" : { "source" : "iana"}, "application/vnd.dynageo" : { "source" : "iana", "extensions" : ["geo"]}, "application/vnd.dzr" : { "source" : "iana"}, "application/vnd.easykaraoke.cdgdownload" : { "source" : "iana"}, "application/vnd.ecdis-update" : { "source" : "iana"}, "application/vnd.ecip.rlp" : { "source" : "iana"}, "application/vnd.ecowin.chart" : { "source" : "iana", "extensions" : ["mag"]}, "application/vnd.ecowin.filerequest" : { "source" : "iana"}, "application/vnd.ecowin.fileupdate" : { "source" : "iana"}, "application/vnd.ecowin.series" : { "source" : "iana"}, "application/vnd.ecowin.seriesrequest" : { "source" : "iana"}, "application/vnd.ecowin.seriesupdate" : { "source" : "iana"}, "application/vnd.efi.img" : { "source" : "iana"}, "application/vnd.efi.iso" : { "source" : "iana"}, "application/vnd.emclient.accessrequest+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.enliven" : { "source" : "iana", "extensions" : ["nml"]}, "application/vnd.enphase.envoy" : { "source" : "iana"}, "application/vnd.eprints.data+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.epson.esf" : { "source" : "iana", "extensions" : ["esf"]}, "application/vnd.epson.msf" : { "source" : "iana", "extensions" : ["msf"]}, "application/vnd.epson.quickanime" : { "source" : "iana", "extensions" : ["qam"]}, "application/vnd.epson.salt" : { "source" : "iana", "extensions" : ["slt"]}, "application/vnd.epson.ssf" : { "source" : "iana", "extensions" : ["ssf"]}, "application/vnd.ericsson.quickcall" : { "source" : "iana"}, "application/vnd.espass-espass+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.eszigno3+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["es3","et3"]}, "application/vnd.etsi.aoc+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.asic-e+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.etsi.asic-s+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.etsi.cug+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvcommand+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvdiscovery+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvprofile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvsad-bc+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvsad-cod+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvsad-npvr+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvservice+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvsync+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvueprofile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.mcid+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.mheg5" : { "source" : "iana"}, "application/vnd.etsi.overload-control-policy-dataset+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.pstn+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.sci+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.simservs+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.timestamp-token" : { "source" : "iana"}, "application/vnd.etsi.tsl+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.tsl.der" : { "source" : "iana"}, "application/vnd.eudora.data" : { "source" : "iana"}, "application/vnd.evolv.ecig.profile" : { "source" : "iana"}, "application/vnd.evolv.ecig.settings" : { "source" : "iana"}, "application/vnd.evolv.ecig.theme" : { "source" : "iana"}, "application/vnd.exstream-empower+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.exstream-package" : { "source" : "iana"}, "application/vnd.ezpix-album" : { "source" : "iana", "extensions" : ["ez2"]}, "application/vnd.ezpix-package" : { "source" : "iana", "extensions" : ["ez3"]}, "application/vnd.f-secure.mobile" : { "source" : "iana"}, "application/vnd.fastcopy-disk-image" : { "source" : "iana"}, "application/vnd.fdf" : { "source" : "iana", "extensions" : ["fdf"]}, "application/vnd.fdsn.mseed" : { "source" : "iana", "extensions" : ["mseed"]}, "application/vnd.fdsn.seed" : { "source" : "iana", "extensions" : ["seed","dataless"]}, "application/vnd.ffsns" : { "source" : "iana"}, "application/vnd.filmit.zfc" : { "source" : "iana"}, "application/vnd.fints" : { "source" : "iana"}, "application/vnd.firemonkeys.cloudcell" : { "source" : "iana"}, "application/vnd.flographit" : { "source" : "iana", "extensions" : ["gph"]}, "application/vnd.fluxtime.clip" : { "source" : "iana", "extensions" : ["ftc"]}, "application/vnd.font-fontforge-sfd" : { "source" : "iana"}, "application/vnd.framemaker" : { "source" : "iana", "extensions" : ["fm","frame","maker","book"]}, "application/vnd.frogans.fnc" : { "source" : "iana", "extensions" : ["fnc"]}, "application/vnd.frogans.ltf" : { "source" : "iana", "extensions" : ["ltf"]}, "application/vnd.fsc.weblaunch" : { "source" : "iana", "extensions" : ["fsc"]}, "application/vnd.fujitsu.oasys" : { "source" : "iana", "extensions" : ["oas"]}, "application/vnd.fujitsu.oasys2" : { "source" : "iana", "extensions" : ["oa2"]}, "application/vnd.fujitsu.oasys3" : { "source" : "iana", "extensions" : ["oa3"]}, "application/vnd.fujitsu.oasysgp" : { "source" : "iana", "extensions" : ["fg5"]}, "application/vnd.fujitsu.oasysprs" : { "source" : "iana", "extensions" : ["bh2"]}, "application/vnd.fujixerox.art-ex" : { "source" : "iana"}, "application/vnd.fujixerox.art4" : { "source" : "iana"}, "application/vnd.fujixerox.ddd" : { "source" : "iana", "extensions" : ["ddd"]}, "application/vnd.fujixerox.docuworks" : { "source" : "iana", "extensions" : ["xdw"]}, "application/vnd.fujixerox.docuworks.binder" : { "source" : "iana", "extensions" : ["xbd"]}, "application/vnd.fujixerox.docuworks.container" : { "source" : "iana"}, "application/vnd.fujixerox.hbpl" : { "source" : "iana"}, "application/vnd.fut-misnet" : { "source" : "iana"}, "application/vnd.futoin+cbor" : { "source" : "iana"}, "application/vnd.futoin+json" : { "source" : "iana", "compressible" : true}, "application/vnd.fuzzysheet" : { "source" : "iana", "extensions" : ["fzs"]}, "application/vnd.genomatix.tuxedo" : { "source" : "iana", "extensions" : ["txd"]}, "application/vnd.geo+json" : { "source" : "iana", "compressible" : true}, "application/vnd.geocube+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.geogebra.file" : { "source" : "iana", "extensions" : ["ggb"]}, "application/vnd.geogebra.tool" : { "source" : "iana", "extensions" : ["ggt"]}, "application/vnd.geometry-explorer" : { "source" : "iana", "extensions" : ["gex","gre"]}, "application/vnd.geonext" : { "source" : "iana", "extensions" : ["gxt"]}, "application/vnd.geoplan" : { "source" : "iana", "extensions" : ["g2w"]}, "application/vnd.geospace" : { "source" : "iana", "extensions" : ["g3w"]}, "application/vnd.gerber" : { "source" : "iana"}, "application/vnd.globalplatform.card-content-mgt" : { "source" : "iana"}, "application/vnd.globalplatform.card-content-mgt-response" : { "source" : "iana"}, "application/vnd.gmx" : { "source" : "iana", "extensions" : ["gmx"]}, "application/vnd.google-apps.document" : { "compressible" : false, "extensions" : ["gdoc"]}, "application/vnd.google-apps.presentation" : { "compressible" : false, "extensions" : ["gslides"]}, "application/vnd.google-apps.spreadsheet" : { "compressible" : false, "extensions" : ["gsheet"]}, "application/vnd.google-earth.kml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["kml"]}, "application/vnd.google-earth.kmz" : { "source" : "iana", "compressible" : false, "extensions" : ["kmz"]}, "application/vnd.gov.sk.e-form+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.gov.sk.e-form+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.gov.sk.xmldatacontainer+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.grafeq" : { "source" : "iana", "extensions" : ["gqf","gqs"]}, "application/vnd.gridmp" : { "source" : "iana"}, "application/vnd.groove-account" : { "source" : "iana", "extensions" : ["gac"]}, "application/vnd.groove-help" : { "source" : "iana", "extensions" : ["ghf"]}, "application/vnd.groove-identity-message" : { "source" : "iana", "extensions" : ["gim"]}, "application/vnd.groove-injector" : { "source" : "iana", "extensions" : ["grv"]}, "application/vnd.groove-tool-message" : { "source" : "iana", "extensions" : ["gtm"]}, "application/vnd.groove-tool-template" : { "source" : "iana", "extensions" : ["tpl"]}, "application/vnd.groove-vcard" : { "source" : "iana", "extensions" : ["vcg"]}, "application/vnd.hal+json" : { "source" : "iana", "compressible" : true}, "application/vnd.hal+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["hal"]}, "application/vnd.handheld-entertainment+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["zmm"]}, "application/vnd.hbci" : { "source" : "iana", "extensions" : ["hbci"]}, "application/vnd.hc+json" : { "source" : "iana", "compressible" : true}, "application/vnd.hcl-bireports" : { "source" : "iana"}, "application/vnd.hdt" : { "source" : "iana"}, "application/vnd.heroku+json" : { "source" : "iana", "compressible" : true}, "application/vnd.hhe.lesson-player" : { "source" : "iana", "extensions" : ["les"]}, "application/vnd.hp-hpgl" : { "source" : "iana", "extensions" : ["hpgl"]}, "application/vnd.hp-hpid" : { "source" : "iana", "extensions" : ["hpid"]}, "application/vnd.hp-hps" : { "source" : "iana", "extensions" : ["hps"]}, "application/vnd.hp-jlyt" : { "source" : "iana", "extensions" : ["jlt"]}, "application/vnd.hp-pcl" : { "source" : "iana", "extensions" : ["pcl"]}, "application/vnd.hp-pclxl" : { "source" : "iana", "extensions" : ["pclxl"]}, "application/vnd.httphone" : { "source" : "iana"}, "application/vnd.hydrostatix.sof-data" : { "source" : "iana", "extensions" : ["sfd-hdstx"]}, "application/vnd.hyper+json" : { "source" : "iana", "compressible" : true}, "application/vnd.hyper-item+json" : { "source" : "iana", "compressible" : true}, "application/vnd.hyperdrive+json" : { "source" : "iana", "compressible" : true}, "application/vnd.hzn-3d-crossword" : { "source" : "iana"}, "application/vnd.ibm.afplinedata" : { "source" : "iana"}, "application/vnd.ibm.electronic-media" : { "source" : "iana"}, "application/vnd.ibm.minipay" : { "source" : "iana", "extensions" : ["mpy"]}, "application/vnd.ibm.modcap" : { "source" : "iana", "extensions" : ["afp","listafp","list3820"]}, "application/vnd.ibm.rights-management" : { "source" : "iana", "extensions" : ["irm"]}, "application/vnd.ibm.secure-container" : { "source" : "iana", "extensions" : ["sc"]}, "application/vnd.iccprofile" : { "source" : "iana", "extensions" : ["icc","icm"]}, "application/vnd.ieee.1905" : { "source" : "iana"}, "application/vnd.igloader" : { "source" : "iana", "extensions" : ["igl"]}, "application/vnd.imagemeter.folder+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.imagemeter.image+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.immervision-ivp" : { "source" : "iana", "extensions" : ["ivp"]}, "application/vnd.immervision-ivu" : { "source" : "iana", "extensions" : ["ivu"]}, "application/vnd.ims.imsccv1p1" : { "source" : "iana"}, "application/vnd.ims.imsccv1p2" : { "source" : "iana"}, "application/vnd.ims.imsccv1p3" : { "source" : "iana"}, "application/vnd.ims.lis.v2.result+json" : { "source" : "iana", "compressible" : true}, "application/vnd.ims.lti.v2.toolconsumerprofile+json" : { "source" : "iana", "compressible" : true}, "application/vnd.ims.lti.v2.toolproxy+json" : { "source" : "iana", "compressible" : true}, "application/vnd.ims.lti.v2.toolproxy.id+json" : { "source" : "iana", "compressible" : true}, "application/vnd.ims.lti.v2.toolsettings+json" : { "source" : "iana", "compressible" : true}, "application/vnd.ims.lti.v2.toolsettings.simple+json" : { "source" : "iana", "compressible" : true}, "application/vnd.informedcontrol.rms+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.informix-visionary" : { "source" : "iana"}, "application/vnd.infotech.project" : { "source" : "iana"}, "application/vnd.infotech.project+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.innopath.wamp.notification" : { "source" : "iana"}, "application/vnd.insors.igm" : { "source" : "iana", "extensions" : ["igm"]}, "application/vnd.intercon.formnet" : { "source" : "iana", "extensions" : ["xpw","xpx"]}, "application/vnd.intergeo" : { "source" : "iana", "extensions" : ["i2g"]}, "application/vnd.intertrust.digibox" : { "source" : "iana"}, "application/vnd.intertrust.nncp" : { "source" : "iana"}, "application/vnd.intu.qbo" : { "source" : "iana", "extensions" : ["qbo"]}, "application/vnd.intu.qfx" : { "source" : "iana", "extensions" : ["qfx"]}, "application/vnd.iptc.g2.catalogitem+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.iptc.g2.conceptitem+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.iptc.g2.knowledgeitem+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.iptc.g2.newsitem+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.iptc.g2.newsmessage+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.iptc.g2.packageitem+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.iptc.g2.planningitem+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.ipunplugged.rcprofile" : { "source" : "iana", "extensions" : ["rcprofile"]}, "application/vnd.irepository.package+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["irp"]}, "application/vnd.is-xpr" : { "source" : "iana", "extensions" : ["xpr"]}, "application/vnd.isac.fcs" : { "source" : "iana", "extensions" : ["fcs"]}, "application/vnd.jam" : { "source" : "iana", "extensions" : ["jam"]}, "application/vnd.japannet-directory-service" : { "source" : "iana"}, "application/vnd.japannet-jpnstore-wakeup" : { "source" : "iana"}, "application/vnd.japannet-payment-wakeup" : { "source" : "iana"}, "application/vnd.japannet-registration" : { "source" : "iana"}, "application/vnd.japannet-registration-wakeup" : { "source" : "iana"}, "application/vnd.japannet-setstore-wakeup" : { "source" : "iana"}, "application/vnd.japannet-verification" : { "source" : "iana"}, "application/vnd.japannet-verification-wakeup" : { "source" : "iana"}, "application/vnd.jcp.javame.midlet-rms" : { "source" : "iana", "extensions" : ["rms"]}, "application/vnd.jisp" : { "source" : "iana", "extensions" : ["jisp"]}, "application/vnd.joost.joda-archive" : { "source" : "iana", "extensions" : ["joda"]}, "application/vnd.jsk.isdn-ngn" : { "source" : "iana"}, "application/vnd.kahootz" : { "source" : "iana", "extensions" : ["ktz","ktr"]}, "application/vnd.kde.karbon" : { "source" : "iana", "extensions" : ["karbon"]}, "application/vnd.kde.kchart" : { "source" : "iana", "extensions" : ["chrt"]}, "application/vnd.kde.kformula" : { "source" : "iana", "extensions" : ["kfo"]}, "application/vnd.kde.kivio" : { "source" : "iana", "extensions" : ["flw"]}, "application/vnd.kde.kontour" : { "source" : "iana", "extensions" : ["kon"]}, "application/vnd.kde.kpresenter" : { "source" : "iana", "extensions" : ["kpr","kpt"]}, "application/vnd.kde.kspread" : { "source" : "iana", "extensions" : ["ksp"]}, "application/vnd.kde.kword" : { "source" : "iana", "extensions" : ["kwd","kwt"]}, "application/vnd.kenameaapp" : { "source" : "iana", "extensions" : ["htke"]}, "application/vnd.kidspiration" : { "source" : "iana", "extensions" : ["kia"]}, "application/vnd.kinar" : { "source" : "iana", "extensions" : ["kne","knp"]}, "application/vnd.koan" : { "source" : "iana", "extensions" : ["skp","skd","skt","skm"]}, "application/vnd.kodak-descriptor" : { "source" : "iana", "extensions" : ["sse"]}, "application/vnd.las.las+json" : { "source" : "iana", "compressible" : true}, "application/vnd.las.las+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["lasxml"]}, "application/vnd.leap+json" : { "source" : "iana", "compressible" : true}, "application/vnd.liberty-request+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.llamagraphics.life-balance.desktop" : { "source" : "iana", "extensions" : ["lbd"]}, "application/vnd.llamagraphics.life-balance.exchange+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["lbe"]}, "application/vnd.lotus-1-2-3" : { "source" : "iana", "extensions" : ["123"]}, "application/vnd.lotus-approach" : { "source" : "iana", "extensions" : ["apr"]}, "application/vnd.lotus-freelance" : { "source" : "iana", "extensions" : ["pre"]}, "application/vnd.lotus-notes" : { "source" : "iana", "extensions" : ["nsf"]}, "application/vnd.lotus-organizer" : { "source" : "iana", "extensions" : ["org"]}, "application/vnd.lotus-screencam" : { "source" : "iana", "extensions" : ["scm"]}, "application/vnd.lotus-wordpro" : { "source" : "iana", "extensions" : ["lwp"]}, "application/vnd.macports.portpkg" : { "source" : "iana", "extensions" : ["portpkg"]}, "application/vnd.mapbox-vector-tile" : { "source" : "iana"}, "application/vnd.marlin.drm.actiontoken+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.marlin.drm.conftoken+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.marlin.drm.license+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.marlin.drm.mdcf" : { "source" : "iana"}, "application/vnd.mason+json" : { "source" : "iana", "compressible" : true}, "application/vnd.maxmind.maxmind-db" : { "source" : "iana"}, "application/vnd.mcd" : { "source" : "iana", "extensions" : ["mcd"]}, "application/vnd.medcalcdata" : { "source" : "iana", "extensions" : ["mc1"]}, "application/vnd.mediastation.cdkey" : { "source" : "iana", "extensions" : ["cdkey"]}, "application/vnd.meridian-slingshot" : { "source" : "iana"}, "application/vnd.mfer" : { "source" : "iana", "extensions" : ["mwf"]}, "application/vnd.mfmp" : { "source" : "iana", "extensions" : ["mfm"]}, "application/vnd.micro+json" : { "source" : "iana", "compressible" : true}, "application/vnd.micrografx.flo" : { "source" : "iana", "extensions" : ["flo"]}, "application/vnd.micrografx.igx" : { "source" : "iana", "extensions" : ["igx"]}, "application/vnd.microsoft.portable-executable" : { "source" : "iana"}, "application/vnd.microsoft.windows.thumbnail-cache" : { "source" : "iana"}, "application/vnd.miele+json" : { "source" : "iana", "compressible" : true}, "application/vnd.mif" : { "source" : "iana", "extensions" : ["mif"]}, "application/vnd.minisoft-hp3000-save" : { "source" : "iana"}, "application/vnd.mitsubishi.misty-guard.trustweb" : { "source" : "iana"}, "application/vnd.mobius.daf" : { "source" : "iana", "extensions" : ["daf"]}, "application/vnd.mobius.dis" : { "source" : "iana", "extensions" : ["dis"]}, "application/vnd.mobius.mbk" : { "source" : "iana", "extensions" : ["mbk"]}, "application/vnd.mobius.mqy" : { "source" : "iana", "extensions" : ["mqy"]}, "application/vnd.mobius.msl" : { "source" : "iana", "extensions" : ["msl"]}, "application/vnd.mobius.plc" : { "source" : "iana", "extensions" : ["plc"]}, "application/vnd.mobius.txf" : { "source" : "iana", "extensions" : ["txf"]}, "application/vnd.mophun.application" : { "source" : "iana", "extensions" : ["mpn"]}, "application/vnd.mophun.certificate" : { "source" : "iana", "extensions" : ["mpc"]}, "application/vnd.motorola.flexsuite" : { "source" : "iana"}, "application/vnd.motorola.flexsuite.adsi" : { "source" : "iana"}, "application/vnd.motorola.flexsuite.fis" : { "source" : "iana"}, "application/vnd.motorola.flexsuite.gotap" : { "source" : "iana"}, "application/vnd.motorola.flexsuite.kmr" : { "source" : "iana"}, "application/vnd.motorola.flexsuite.ttc" : { "source" : "iana"}, "application/vnd.motorola.flexsuite.wem" : { "source" : "iana"}, "application/vnd.motorola.iprm" : { "source" : "iana"}, "application/vnd.mozilla.xul+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xul"]}, "application/vnd.ms-3mfdocument" : { "source" : "iana"}, "application/vnd.ms-artgalry" : { "source" : "iana", "extensions" : ["cil"]}, "application/vnd.ms-asf" : { "source" : "iana"}, "application/vnd.ms-cab-compressed" : { "source" : "iana", "extensions" : ["cab"]}, "application/vnd.ms-color.iccprofile" : { "source" : "apache"}, "application/vnd.ms-excel" : { "source" : "iana", "compressible" : false, "extensions" : ["xls","xlm","xla","xlc","xlt","xlw"]}, "application/vnd.ms-excel.addin.macroenabled.12" : { "source" : "iana", "extensions" : ["xlam"]}, "application/vnd.ms-excel.sheet.binary.macroenabled.12" : { "source" : "iana", "extensions" : ["xlsb"]}, "application/vnd.ms-excel.sheet.macroenabled.12" : { "source" : "iana", "extensions" : ["xlsm"]}, "application/vnd.ms-excel.template.macroenabled.12" : { "source" : "iana", "extensions" : ["xltm"]}, "application/vnd.ms-fontobject" : { "source" : "iana", "compressible" : true, "extensions" : ["eot"]}, "application/vnd.ms-htmlhelp" : { "source" : "iana", "extensions" : ["chm"]}, "application/vnd.ms-ims" : { "source" : "iana", "extensions" : ["ims"]}, "application/vnd.ms-lrm" : { "source" : "iana", "extensions" : ["lrm"]}, "application/vnd.ms-office.activex+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.ms-officetheme" : { "source" : "iana", "extensions" : ["thmx"]}, "application/vnd.ms-opentype" : { "source" : "apache", "compressible" : true}, "application/vnd.ms-outlook" : { "compressible" : false, "extensions" : ["msg"]}, "application/vnd.ms-package.obfuscated-opentype" : { "source" : "apache"}, "application/vnd.ms-pki.seccat" : { "source" : "apache", "extensions" : ["cat"]}, "application/vnd.ms-pki.stl" : { "source" : "apache", "extensions" : ["stl"]}, "application/vnd.ms-playready.initiator+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.ms-powerpoint" : { "source" : "iana", "compressible" : false, "extensions" : ["ppt","pps","pot"]}, "application/vnd.ms-powerpoint.addin.macroenabled.12" : { "source" : "iana", "extensions" : ["ppam"]}, "application/vnd.ms-powerpoint.presentation.macroenabled.12" : { "source" : "iana", "extensions" : ["pptm"]}, "application/vnd.ms-powerpoint.slide.macroenabled.12" : { "source" : "iana", "extensions" : ["sldm"]}, "application/vnd.ms-powerpoint.slideshow.macroenabled.12" : { "source" : "iana", "extensions" : ["ppsm"]}, "application/vnd.ms-powerpoint.template.macroenabled.12" : { "source" : "iana", "extensions" : ["potm"]}, "application/vnd.ms-printdevicecapabilities+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.ms-printing.printticket+xml" : { "source" : "apache", "compressible" : true}, "application/vnd.ms-printschematicket+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.ms-project" : { "source" : "iana", "extensions" : ["mpp","mpt"]}, "application/vnd.ms-tnef" : { "source" : "iana"}, "application/vnd.ms-windows.devicepairing" : { "source" : "iana"}, "application/vnd.ms-windows.nwprinting.oob" : { "source" : "iana"}, "application/vnd.ms-windows.printerpairing" : { "source" : "iana"}, "application/vnd.ms-windows.wsd.oob" : { "source" : "iana"}, "application/vnd.ms-wmdrm.lic-chlg-req" : { "source" : "iana"}, "application/vnd.ms-wmdrm.lic-resp" : { "source" : "iana"}, "application/vnd.ms-wmdrm.meter-chlg-req" : { "source" : "iana"}, "application/vnd.ms-wmdrm.meter-resp" : { "source" : "iana"}, "application/vnd.ms-word.document.macroenabled.12" : { "source" : "iana", "extensions" : ["docm"]}, "application/vnd.ms-word.template.macroenabled.12" : { "source" : "iana", "extensions" : ["dotm"]}, "application/vnd.ms-works" : { "source" : "iana", "extensions" : ["wps","wks","wcm","wdb"]}, "application/vnd.ms-wpl" : { "source" : "iana", "extensions" : ["wpl"]}, "application/vnd.ms-xpsdocument" : { "source" : "iana", "compressible" : false, "extensions" : ["xps"]}, "application/vnd.msa-disk-image" : { "source" : "iana"}, "application/vnd.mseq" : { "source" : "iana", "extensions" : ["mseq"]}, "application/vnd.msign" : { "source" : "iana"}, "application/vnd.multiad.creator" : { "source" : "iana"}, "application/vnd.multiad.creator.cif" : { "source" : "iana"}, "application/vnd.music-niff" : { "source" : "iana"}, "application/vnd.musician" : { "source" : "iana", "extensions" : ["mus"]}, "application/vnd.muvee.style" : { "source" : "iana", "extensions" : ["msty"]}, "application/vnd.mynfc" : { "source" : "iana", "extensions" : ["taglet"]}, "application/vnd.ncd.control" : { "source" : "iana"}, "application/vnd.ncd.reference" : { "source" : "iana"}, "application/vnd.nearst.inv+json" : { "source" : "iana", "compressible" : true}, "application/vnd.nervana" : { "source" : "iana"}, "application/vnd.netfpx" : { "source" : "iana"}, "application/vnd.neurolanguage.nlu" : { "source" : "iana", "extensions" : ["nlu"]}, "application/vnd.nimn" : { "source" : "iana"}, "application/vnd.nintendo.nitro.rom" : { "source" : "iana"}, "application/vnd.nintendo.snes.rom" : { "source" : "iana"}, "application/vnd.nitf" : { "source" : "iana", "extensions" : ["ntf","nitf"]}, "application/vnd.noblenet-directory" : { "source" : "iana", "extensions" : ["nnd"]}, "application/vnd.noblenet-sealer" : { "source" : "iana", "extensions" : ["nns"]}, "application/vnd.noblenet-web" : { "source" : "iana", "extensions" : ["nnw"]}, "application/vnd.nokia.catalogs" : { "source" : "iana"}, "application/vnd.nokia.conml+wbxml" : { "source" : "iana"}, "application/vnd.nokia.conml+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.nokia.iptv.config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.nokia.isds-radio-presets" : { "source" : "iana"}, "application/vnd.nokia.landmark+wbxml" : { "source" : "iana"}, "application/vnd.nokia.landmark+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.nokia.landmarkcollection+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.nokia.n-gage.ac+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.nokia.n-gage.data" : { "source" : "iana", "extensions" : ["ngdat"]}, "application/vnd.nokia.n-gage.symbian.install" : { "source" : "iana", "extensions" : ["n-gage"]}, "application/vnd.nokia.ncd" : { "source" : "iana"}, "application/vnd.nokia.pcd+wbxml" : { "source" : "iana"}, "application/vnd.nokia.pcd+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.nokia.radio-preset" : { "source" : "iana", "extensions" : ["rpst"]}, "application/vnd.nokia.radio-presets" : { "source" : "iana", "extensions" : ["rpss"]}, "application/vnd.novadigm.edm" : { "source" : "iana", "extensions" : ["edm"]}, "application/vnd.novadigm.edx" : { "source" : "iana", "extensions" : ["edx"]}, "application/vnd.novadigm.ext" : { "source" : "iana", "extensions" : ["ext"]}, "application/vnd.ntt-local.content-share" : { "source" : "iana"}, "application/vnd.ntt-local.file-transfer" : { "source" : "iana"}, "application/vnd.ntt-local.ogw_remote-access" : { "source" : "iana"}, "application/vnd.ntt-local.sip-ta_remote" : { "source" : "iana"}, "application/vnd.ntt-local.sip-ta_tcp_stream" : { "source" : "iana"}, "application/vnd.oasis.opendocument.chart" : { "source" : "iana", "extensions" : ["odc"]}, "application/vnd.oasis.opendocument.chart-template" : { "source" : "iana", "extensions" : ["otc"]}, "application/vnd.oasis.opendocument.database" : { "source" : "iana", "extensions" : ["odb"]}, "application/vnd.oasis.opendocument.formula" : { "source" : "iana", "extensions" : ["odf"]}, "application/vnd.oasis.opendocument.formula-template" : { "source" : "iana", "extensions" : ["odft"]}, "application/vnd.oasis.opendocument.graphics" : { "source" : "iana", "compressible" : false, "extensions" : ["odg"]}, "application/vnd.oasis.opendocument.graphics-template" : { "source" : "iana", "extensions" : ["otg"]}, "application/vnd.oasis.opendocument.image" : { "source" : "iana", "extensions" : ["odi"]}, "application/vnd.oasis.opendocument.image-template" : { "source" : "iana", "extensions" : ["oti"]}, "application/vnd.oasis.opendocument.presentation" : { "source" : "iana", "compressible" : false, "extensions" : ["odp"]}, "application/vnd.oasis.opendocument.presentation-template" : { "source" : "iana", "extensions" : ["otp"]}, "application/vnd.oasis.opendocument.spreadsheet" : { "source" : "iana", "compressible" : false, "extensions" : ["ods"]}, "application/vnd.oasis.opendocument.spreadsheet-template" : { "source" : "iana", "extensions" : ["ots"]}, "application/vnd.oasis.opendocument.text" : { "source" : "iana", "compressible" : false, "extensions" : ["odt"]}, "application/vnd.oasis.opendocument.text-master" : { "source" : "iana", "extensions" : ["odm"]}, "application/vnd.oasis.opendocument.text-template" : { "source" : "iana", "extensions" : ["ott"]}, "application/vnd.oasis.opendocument.text-web" : { "source" : "iana", "extensions" : ["oth"]}, "application/vnd.obn" : { "source" : "iana"}, "application/vnd.ocf+cbor" : { "source" : "iana"}, "application/vnd.oftn.l10n+json" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.contentaccessdownload+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.contentaccessstreaming+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.cspg-hexbinary" : { "source" : "iana"}, "application/vnd.oipf.dae.svg+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.dae.xhtml+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.mippvcontrolmessage+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.pae.gem" : { "source" : "iana"}, "application/vnd.oipf.spdiscovery+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.spdlist+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.ueprofile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.userprofile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.olpc-sugar" : { "source" : "iana", "extensions" : ["xo"]}, "application/vnd.oma-scws-config" : { "source" : "iana"}, "application/vnd.oma-scws-http-request" : { "source" : "iana"}, "application/vnd.oma-scws-http-response" : { "source" : "iana"}, "application/vnd.oma.bcast.associated-procedure-parameter+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.drm-trigger+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.imd+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.ltkm" : { "source" : "iana"}, "application/vnd.oma.bcast.notification+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.provisioningtrigger" : { "source" : "iana"}, "application/vnd.oma.bcast.sgboot" : { "source" : "iana"}, "application/vnd.oma.bcast.sgdd+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.sgdu" : { "source" : "iana"}, "application/vnd.oma.bcast.simple-symbol-container" : { "source" : "iana"}, "application/vnd.oma.bcast.smartcard-trigger+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.sprov+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.stkm" : { "source" : "iana"}, "application/vnd.oma.cab-address-book+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.cab-feature-handler+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.cab-pcc+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.cab-subs-invite+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.cab-user-prefs+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.dcd" : { "source" : "iana"}, "application/vnd.oma.dcdc" : { "source" : "iana"}, "application/vnd.oma.dd2+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["dd2"]}, "application/vnd.oma.drm.risd+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.group-usage-list+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.lwm2m+json" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.lwm2m+tlv" : { "source" : "iana"}, "application/vnd.oma.pal+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.poc.detailed-progress-report+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.poc.final-report+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.poc.groups+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.poc.invocation-descriptor+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.poc.optimized-progress-report+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.push" : { "source" : "iana"}, "application/vnd.oma.scidm.messages+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.xcap-directory+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.omads-email+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.omads-file+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.omads-folder+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.omaloc-supl-init" : { "source" : "iana"}, "application/vnd.onepager" : { "source" : "iana"}, "application/vnd.onepagertamp" : { "source" : "iana"}, "application/vnd.onepagertamx" : { "source" : "iana"}, "application/vnd.onepagertat" : { "source" : "iana"}, "application/vnd.onepagertatp" : { "source" : "iana"}, "application/vnd.onepagertatx" : { "source" : "iana"}, "application/vnd.openblox.game+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openblox.game-binary" : { "source" : "iana"}, "application/vnd.openeye.oeb" : { "source" : "iana"}, "application/vnd.openofficeorg.extension" : { "source" : "apache", "extensions" : ["oxt"]}, "application/vnd.openstreetmap.data+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.custom-properties+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.customxmlproperties+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawing+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawingml.chart+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.extended-properties+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.comments+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.presentation" : { "source" : "iana", "compressible" : false, "extensions" : ["pptx"]}, "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.slide" : { "source" : "iana", "extensions" : ["sldx"]}, "application/vnd.openxmlformats-officedocument.presentationml.slide+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.slideshow" : { "source" : "iana", "extensions" : ["ppsx"]}, "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.tags+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.template" : { "source" : "iana", "extensions" : ["potx"]}, "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" : { "source" : "iana", "compressible" : false, "extensions" : ["xlsx"]}, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.template" : { "source" : "iana", "extensions" : ["xltx"]}, "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.theme+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.themeoverride+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.vmldrawing" : { "source" : "iana"}, "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.document" : { "source" : "iana", "compressible" : false, "extensions" : ["docx"]}, "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.template" : { "source" : "iana", "extensions" : ["dotx"]}, "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-package.core-properties+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-package.relationships+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oracle.resource+json" : { "source" : "iana", "compressible" : true}, "application/vnd.orange.indata" : { "source" : "iana"}, "application/vnd.osa.netdeploy" : { "source" : "iana"}, "application/vnd.osgeo.mapguide.package" : { "source" : "iana", "extensions" : ["mgp"]}, "application/vnd.osgi.bundle" : { "source" : "iana"}, "application/vnd.osgi.dp" : { "source" : "iana", "extensions" : ["dp"]}, "application/vnd.osgi.subsystem" : { "source" : "iana", "extensions" : ["esa"]}, "application/vnd.otps.ct-kip+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oxli.countgraph" : { "source" : "iana"}, "application/vnd.pagerduty+json" : { "source" : "iana", "compressible" : true}, "application/vnd.palm" : { "source" : "iana", "extensions" : ["pdb","pqa","oprc"]}, "application/vnd.panoply" : { "source" : "iana"}, "application/vnd.paos.xml" : { "source" : "iana"}, "application/vnd.patentdive" : { "source" : "iana"}, "application/vnd.patientecommsdoc" : { "source" : "iana"}, "application/vnd.pawaafile" : { "source" : "iana", "extensions" : ["paw"]}, "application/vnd.pcos" : { "source" : "iana"}, "application/vnd.pg.format" : { "source" : "iana", "extensions" : ["str"]}, "application/vnd.pg.osasli" : { "source" : "iana", "extensions" : ["ei6"]}, "application/vnd.piaccess.application-licence" : { "source" : "iana"}, "application/vnd.picsel" : { "source" : "iana", "extensions" : ["efif"]}, "application/vnd.pmi.widget" : { "source" : "iana", "extensions" : ["wg"]}, "application/vnd.poc.group-advertisement+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.pocketlearn" : { "source" : "iana", "extensions" : ["plf"]}, "application/vnd.powerbuilder6" : { "source" : "iana", "extensions" : ["pbd"]}, "application/vnd.powerbuilder6-s" : { "source" : "iana"}, "application/vnd.powerbuilder7" : { "source" : "iana"}, "application/vnd.powerbuilder7-s" : { "source" : "iana"}, "application/vnd.powerbuilder75" : { "source" : "iana"}, "application/vnd.powerbuilder75-s" : { "source" : "iana"}, "application/vnd.preminet" : { "source" : "iana"}, "application/vnd.previewsystems.box" : { "source" : "iana", "extensions" : ["box"]}, "application/vnd.proteus.magazine" : { "source" : "iana", "extensions" : ["mgz"]}, "application/vnd.psfs" : { "source" : "iana"}, "application/vnd.publishare-delta-tree" : { "source" : "iana", "extensions" : ["qps"]}, "application/vnd.pvi.ptid1" : { "source" : "iana", "extensions" : ["ptid"]}, "application/vnd.pwg-multiplexed" : { "source" : "iana"}, "application/vnd.pwg-xhtml-print+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.qualcomm.brew-app-res" : { "source" : "iana"}, "application/vnd.quarantainenet" : { "source" : "iana"}, "application/vnd.quark.quarkxpress" : { "source" : "iana", "extensions" : ["qxd","qxt","qwd","qwt","qxl","qxb"]}, "application/vnd.quobject-quoxdocument" : { "source" : "iana"}, "application/vnd.radisys.moml+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-audit+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-audit-conf+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-audit-conn+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-audit-dialog+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-audit-stream+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-conf+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog-base+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog-fax-detect+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog-fax-sendrecv+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog-group+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog-speech+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog-transform+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.rainstor.data" : { "source" : "iana"}, "application/vnd.rapid" : { "source" : "iana"}, "application/vnd.rar" : { "source" : "iana"}, "application/vnd.realvnc.bed" : { "source" : "iana", "extensions" : ["bed"]}, "application/vnd.recordare.musicxml" : { "source" : "iana", "extensions" : ["mxl"]}, "application/vnd.recordare.musicxml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["musicxml"]}, "application/vnd.renlearn.rlprint" : { "source" : "iana"}, "application/vnd.restful+json" : { "source" : "iana", "compressible" : true}, "application/vnd.rig.cryptonote" : { "source" : "iana", "extensions" : ["cryptonote"]}, "application/vnd.rim.cod" : { "source" : "apache", "extensions" : ["cod"]}, "application/vnd.rn-realmedia" : { "source" : "apache", "extensions" : ["rm"]}, "application/vnd.rn-realmedia-vbr" : { "source" : "apache", "extensions" : ["rmvb"]}, "application/vnd.route66.link66+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["link66"]}, "application/vnd.rs-274x" : { "source" : "iana"}, "application/vnd.ruckus.download" : { "source" : "iana"}, "application/vnd.s3sms" : { "source" : "iana"}, "application/vnd.sailingtracker.track" : { "source" : "iana", "extensions" : ["st"]}, "application/vnd.sbm.cid" : { "source" : "iana"}, "application/vnd.sbm.mid2" : { "source" : "iana"}, "application/vnd.scribus" : { "source" : "iana"}, "application/vnd.sealed.3df" : { "source" : "iana"}, "application/vnd.sealed.csf" : { "source" : "iana"}, "application/vnd.sealed.doc" : { "source" : "iana"}, "application/vnd.sealed.eml" : { "source" : "iana"}, "application/vnd.sealed.mht" : { "source" : "iana"}, "application/vnd.sealed.net" : { "source" : "iana"}, "application/vnd.sealed.ppt" : { "source" : "iana"}, "application/vnd.sealed.tiff" : { "source" : "iana"}, "application/vnd.sealed.xls" : { "source" : "iana"}, "application/vnd.sealedmedia.softseal.html" : { "source" : "iana"}, "application/vnd.sealedmedia.softseal.pdf" : { "source" : "iana"}, "application/vnd.seemail" : { "source" : "iana", "extensions" : ["see"]}, "application/vnd.sema" : { "source" : "iana", "extensions" : ["sema"]}, "application/vnd.semd" : { "source" : "iana", "extensions" : ["semd"]}, "application/vnd.semf" : { "source" : "iana", "extensions" : ["semf"]}, "application/vnd.shana.informed.formdata" : { "source" : "iana", "extensions" : ["ifm"]}, "application/vnd.shana.informed.formtemplate" : { "source" : "iana", "extensions" : ["itp"]}, "application/vnd.shana.informed.interchange" : { "source" : "iana", "extensions" : ["iif"]}, "application/vnd.shana.informed.package" : { "source" : "iana", "extensions" : ["ipk"]}, "application/vnd.shootproof+json" : { "source" : "iana", "compressible" : true}, "application/vnd.sigrok.session" : { "source" : "iana"}, "application/vnd.simtech-mindmapper" : { "source" : "iana", "extensions" : ["twd","twds"]}, "application/vnd.siren+json" : { "source" : "iana", "compressible" : true}, "application/vnd.smaf" : { "source" : "iana", "extensions" : ["mmf"]}, "application/vnd.smart.notebook" : { "source" : "iana"}, "application/vnd.smart.teacher" : { "source" : "iana", "extensions" : ["teacher"]}, "application/vnd.software602.filler.form+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.software602.filler.form-xml-zip" : { "source" : "iana"}, "application/vnd.solent.sdkm+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["sdkm","sdkd"]}, "application/vnd.spotfire.dxp" : { "source" : "iana", "extensions" : ["dxp"]}, "application/vnd.spotfire.sfs" : { "source" : "iana", "extensions" : ["sfs"]}, "application/vnd.sqlite3" : { "source" : "iana"}, "application/vnd.sss-cod" : { "source" : "iana"}, "application/vnd.sss-dtf" : { "source" : "iana"}, "application/vnd.sss-ntf" : { "source" : "iana"}, "application/vnd.stardivision.calc" : { "source" : "apache", "extensions" : ["sdc"]}, "application/vnd.stardivision.draw" : { "source" : "apache", "extensions" : ["sda"]}, "application/vnd.stardivision.impress" : { "source" : "apache", "extensions" : ["sdd"]}, "application/vnd.stardivision.math" : { "source" : "apache", "extensions" : ["smf"]}, "application/vnd.stardivision.writer" : { "source" : "apache", "extensions" : ["sdw","vor"]}, "application/vnd.stardivision.writer-global" : { "source" : "apache", "extensions" : ["sgl"]}, "application/vnd.stepmania.package" : { "source" : "iana", "extensions" : ["smzip"]}, "application/vnd.stepmania.stepchart" : { "source" : "iana", "extensions" : ["sm"]}, "application/vnd.street-stream" : { "source" : "iana"}, "application/vnd.sun.wadl+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["wadl"]}, "application/vnd.sun.xml.calc" : { "source" : "apache", "extensions" : ["sxc"]}, "application/vnd.sun.xml.calc.template" : { "source" : "apache", "extensions" : ["stc"]}, "application/vnd.sun.xml.draw" : { "source" : "apache", "extensions" : ["sxd"]}, "application/vnd.sun.xml.draw.template" : { "source" : "apache", "extensions" : ["std"]}, "application/vnd.sun.xml.impress" : { "source" : "apache", "extensions" : ["sxi"]}, "application/vnd.sun.xml.impress.template" : { "source" : "apache", "extensions" : ["sti"]}, "application/vnd.sun.xml.math" : { "source" : "apache", "extensions" : ["sxm"]}, "application/vnd.sun.xml.writer" : { "source" : "apache", "extensions" : ["sxw"]}, "application/vnd.sun.xml.writer.global" : { "source" : "apache", "extensions" : ["sxg"]}, "application/vnd.sun.xml.writer.template" : { "source" : "apache", "extensions" : ["stw"]}, "application/vnd.sus-calendar" : { "source" : "iana", "extensions" : ["sus","susp"]}, "application/vnd.svd" : { "source" : "iana", "extensions" : ["svd"]}, "application/vnd.swiftview-ics" : { "source" : "iana"}, "application/vnd.symbian.install" : { "source" : "apache", "extensions" : ["sis","sisx"]}, "application/vnd.syncml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xsm"]}, "application/vnd.syncml.dm+wbxml" : { "source" : "iana", "extensions" : ["bdm"]}, "application/vnd.syncml.dm+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xdm"]}, "application/vnd.syncml.dm.notification" : { "source" : "iana"}, "application/vnd.syncml.dmddf+wbxml" : { "source" : "iana"}, "application/vnd.syncml.dmddf+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.syncml.dmtnds+wbxml" : { "source" : "iana"}, "application/vnd.syncml.dmtnds+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.syncml.ds.notification" : { "source" : "iana"}, "application/vnd.tableschema+json" : { "source" : "iana", "compressible" : true}, "application/vnd.tao.intent-module-archive" : { "source" : "iana", "extensions" : ["tao"]}, "application/vnd.tcpdump.pcap" : { "source" : "iana", "extensions" : ["pcap","cap","dmp"]}, "application/vnd.think-cell.ppttc+json" : { "source" : "iana", "compressible" : true}, "application/vnd.tmd.mediaflex.api+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.tml" : { "source" : "iana"}, "application/vnd.tmobile-livetv" : { "source" : "iana", "extensions" : ["tmo"]}, "application/vnd.tri.onesource" : { "source" : "iana"}, "application/vnd.trid.tpt" : { "source" : "iana", "extensions" : ["tpt"]}, "application/vnd.triscape.mxs" : { "source" : "iana", "extensions" : ["mxs"]}, "application/vnd.trueapp" : { "source" : "iana", "extensions" : ["tra"]}, "application/vnd.truedoc" : { "source" : "iana"}, "application/vnd.ubisoft.webplayer" : { "source" : "iana"}, "application/vnd.ufdl" : { "source" : "iana", "extensions" : ["ufd","ufdl"]}, "application/vnd.uiq.theme" : { "source" : "iana", "extensions" : ["utz"]}, "application/vnd.umajin" : { "source" : "iana", "extensions" : ["umj"]}, "application/vnd.unity" : { "source" : "iana", "extensions" : ["unityweb"]}, "application/vnd.uoml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["uoml"]}, "application/vnd.uplanet.alert" : { "source" : "iana"}, "application/vnd.uplanet.alert-wbxml" : { "source" : "iana"}, "application/vnd.uplanet.bearer-choice" : { "source" : "iana"}, "application/vnd.uplanet.bearer-choice-wbxml" : { "source" : "iana"}, "application/vnd.uplanet.cacheop" : { "source" : "iana"}, "application/vnd.uplanet.cacheop-wbxml" : { "source" : "iana"}, "application/vnd.uplanet.channel" : { "source" : "iana"}, "application/vnd.uplanet.channel-wbxml" : { "source" : "iana"}, "application/vnd.uplanet.list" : { "source" : "iana"}, "application/vnd.uplanet.list-wbxml" : { "source" : "iana"}, "application/vnd.uplanet.listcmd" : { "source" : "iana"}, "application/vnd.uplanet.listcmd-wbxml" : { "source" : "iana"}, "application/vnd.uplanet.signal" : { "source" : "iana"}, "application/vnd.uri-map" : { "source" : "iana"}, "application/vnd.valve.source.material" : { "source" : "iana"}, "application/vnd.vcx" : { "source" : "iana", "extensions" : ["vcx"]}, "application/vnd.vd-study" : { "source" : "iana"}, "application/vnd.vectorworks" : { "source" : "iana"}, "application/vnd.vel+json" : { "source" : "iana", "compressible" : true}, "application/vnd.verimatrix.vcas" : { "source" : "iana"}, "application/vnd.veryant.thin" : { "source" : "iana"}, "application/vnd.vidsoft.vidconference" : { "source" : "iana"}, "application/vnd.visio" : { "source" : "iana", "extensions" : ["vsd","vst","vss","vsw"]}, "application/vnd.visionary" : { "source" : "iana", "extensions" : ["vis"]}, "application/vnd.vividence.scriptfile" : { "source" : "iana"}, "application/vnd.vsf" : { "source" : "iana", "extensions" : ["vsf"]}, "application/vnd.wap.sic" : { "source" : "iana"}, "application/vnd.wap.slc" : { "source" : "iana"}, "application/vnd.wap.wbxml" : { "source" : "iana", "extensions" : ["wbxml"]}, "application/vnd.wap.wmlc" : { "source" : "iana", "extensions" : ["wmlc"]}, "application/vnd.wap.wmlscriptc" : { "source" : "iana", "extensions" : ["wmlsc"]}, "application/vnd.webturbo" : { "source" : "iana", "extensions" : ["wtb"]}, "application/vnd.wfa.p2p" : { "source" : "iana"}, "application/vnd.wfa.wsc" : { "source" : "iana"}, "application/vnd.windows.devicepairing" : { "source" : "iana"}, "application/vnd.wmc" : { "source" : "iana"}, "application/vnd.wmf.bootstrap" : { "source" : "iana"}, "application/vnd.wolfram.mathematica" : { "source" : "iana"}, "application/vnd.wolfram.mathematica.package" : { "source" : "iana"}, "application/vnd.wolfram.player" : { "source" : "iana", "extensions" : ["nbp"]}, "application/vnd.wordperfect" : { "source" : "iana", "extensions" : ["wpd"]}, "application/vnd.wqd" : { "source" : "iana", "extensions" : ["wqd"]}, "application/vnd.wrq-hp3000-labelled" : { "source" : "iana"}, "application/vnd.wt.stf" : { "source" : "iana", "extensions" : ["stf"]}, "application/vnd.wv.csp+wbxml" : { "source" : "iana"}, "application/vnd.wv.csp+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.wv.ssp+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.xacml+json" : { "source" : "iana", "compressible" : true}, "application/vnd.xara" : { "source" : "iana", "extensions" : ["xar"]}, "application/vnd.xfdl" : { "source" : "iana", "extensions" : ["xfdl"]}, "application/vnd.xfdl.webform" : { "source" : "iana"}, "application/vnd.xmi+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.xmpie.cpkg" : { "source" : "iana"}, "application/vnd.xmpie.dpkg" : { "source" : "iana"}, "application/vnd.xmpie.plan" : { "source" : "iana"}, "application/vnd.xmpie.ppkg" : { "source" : "iana"}, "application/vnd.xmpie.xlim" : { "source" : "iana"}, "application/vnd.yamaha.hv-dic" : { "source" : "iana", "extensions" : ["hvd"]}, "application/vnd.yamaha.hv-script" : { "source" : "iana", "extensions" : ["hvs"]}, "application/vnd.yamaha.hv-voice" : { "source" : "iana", "extensions" : ["hvp"]}, "application/vnd.yamaha.openscoreformat" : { "source" : "iana", "extensions" : ["osf"]}, "application/vnd.yamaha.openscoreformat.osfpvg+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["osfpvg"]}, "application/vnd.yamaha.remote-setup" : { "source" : "iana"}, "application/vnd.yamaha.smaf-audio" : { "source" : "iana", "extensions" : ["saf"]}, "application/vnd.yamaha.smaf-phrase" : { "source" : "iana", "extensions" : ["spf"]}, "application/vnd.yamaha.through-ngn" : { "source" : "iana"}, "application/vnd.yamaha.tunnel-udpencap" : { "source" : "iana"}, "application/vnd.yaoweme" : { "source" : "iana"}, "application/vnd.yellowriver-custom-menu" : { "source" : "iana", "extensions" : ["cmp"]}, "application/vnd.youtube.yt" : { "source" : "iana"}, "application/vnd.zul" : { "source" : "iana", "extensions" : ["zir","zirz"]}, "application/vnd.zzazz.deck+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["zaz"]}, "application/voicexml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["vxml"]}, "application/voucher-cms+json" : { "source" : "iana", "compressible" : true}, "application/vq-rtcpxr" : { "source" : "iana"}, "application/wasm" : { "compressible" : true, "extensions" : ["wasm"]}, "application/watcherinfo+xml" : { "source" : "iana", "compressible" : true}, "application/webpush-options+json" : { "source" : "iana", "compressible" : true}, "application/whoispp-query" : { "source" : "iana"}, "application/whoispp-response" : { "source" : "iana"}, "application/widget" : { "source" : "iana", "extensions" : ["wgt"]}, "application/winhlp" : { "source" : "apache", "extensions" : ["hlp"]}, "application/wita" : { "source" : "iana"}, "application/wordperfect5.1" : { "source" : "iana"}, "application/wsdl+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["wsdl"]}, "application/wspolicy+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["wspolicy"]}, "application/x-7z-compressed" : { "source" : "apache", "compressible" : false, "extensions" : ["7z"]}, "application/x-abiword" : { "source" : "apache", "extensions" : ["abw"]}, "application/x-ace-compressed" : { "source" : "apache", "extensions" : ["ace"]}, "application/x-amf" : { "source" : "apache"}, "application/x-apple-diskimage" : { "source" : "apache", "extensions" : ["dmg"]}, "application/x-arj" : { "compressible" : false, "extensions" : ["arj"]}, "application/x-authorware-bin" : { "source" : "apache", "extensions" : ["aab","x32","u32","vox"]}, "application/x-authorware-map" : { "source" : "apache", "extensions" : ["aam"]}, "application/x-authorware-seg" : { "source" : "apache", "extensions" : ["aas"]}, "application/x-bcpio" : { "source" : "apache", "extensions" : ["bcpio"]}, "application/x-bdoc" : { "compressible" : false, "extensions" : ["bdoc"]}, "application/x-bittorrent" : { "source" : "apache", "extensions" : ["torrent"]}, "application/x-blorb" : { "source" : "apache", "extensions" : ["blb","blorb"]}, "application/x-bzip" : { "source" : "apache", "compressible" : false, "extensions" : ["bz"]}, "application/x-bzip2" : { "source" : "apache", "compressible" : false, "extensions" : ["bz2","boz"]}, "application/x-cbr" : { "source" : "apache", "extensions" : ["cbr","cba","cbt","cbz","cb7"]}, "application/x-cdlink" : { "source" : "apache", "extensions" : ["vcd"]}, "application/x-cfs-compressed" : { "source" : "apache", "extensions" : ["cfs"]}, "application/x-chat" : { "source" : "apache", "extensions" : ["chat"]}, "application/x-chess-pgn" : { "source" : "apache", "extensions" : ["pgn"]}, "application/x-chrome-extension" : { "extensions" : ["crx"]}, "application/x-cocoa" : { "source" : "nginx", "extensions" : ["cco"]}, "application/x-compress" : { "source" : "apache"}, "application/x-conference" : { "source" : "apache", "extensions" : ["nsc"]}, "application/x-cpio" : { "source" : "apache", "extensions" : ["cpio"]}, "application/x-csh" : { "source" : "apache", "extensions" : ["csh"]}, "application/x-deb" : { "compressible" : false}, "application/x-debian-package" : { "source" : "apache", "extensions" : ["deb","udeb"]}, "application/x-dgc-compressed" : { "source" : "apache", "extensions" : ["dgc"]}, "application/x-director" : { "source" : "apache", "extensions" : ["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]}, "application/x-doom" : { "source" : "apache", "extensions" : ["wad"]}, "application/x-dtbncx+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["ncx"]}, "application/x-dtbook+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["dtb"]}, "application/x-dtbresource+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["res"]}, "application/x-dvi" : { "source" : "apache", "compressible" : false, "extensions" : ["dvi"]}, "application/x-envoy" : { "source" : "apache", "extensions" : ["evy"]}, "application/x-eva" : { "source" : "apache", "extensions" : ["eva"]}, "application/x-font-bdf" : { "source" : "apache", "extensions" : ["bdf"]}, "application/x-font-dos" : { "source" : "apache"}, "application/x-font-framemaker" : { "source" : "apache"}, "application/x-font-ghostscript" : { "source" : "apache", "extensions" : ["gsf"]}, "application/x-font-libgrx" : { "source" : "apache"}, "application/x-font-linux-psf" : { "source" : "apache", "extensions" : ["psf"]}, "application/x-font-pcf" : { "source" : "apache", "extensions" : ["pcf"]}, "application/x-font-snf" : { "source" : "apache", "extensions" : ["snf"]}, "application/x-font-speedo" : { "source" : "apache"}, "application/x-font-sunos-news" : { "source" : "apache"}, "application/x-font-type1" : { "source" : "apache", "extensions" : ["pfa","pfb","pfm","afm"]}, "application/x-font-vfont" : { "source" : "apache"}, "application/x-freearc" : { "source" : "apache", "extensions" : ["arc"]}, "application/x-futuresplash" : { "source" : "apache", "extensions" : ["spl"]}, "application/x-gca-compressed" : { "source" : "apache", "extensions" : ["gca"]}, "application/x-glulx" : { "source" : "apache", "extensions" : ["ulx"]}, "application/x-gnumeric" : { "source" : "apache", "extensions" : ["gnumeric"]}, "application/x-gramps-xml" : { "source" : "apache", "extensions" : ["gramps"]}, "application/x-gtar" : { "source" : "apache", "extensions" : ["gtar"]}, "application/x-gzip" : { "source" : "apache"}, "application/x-hdf" : { "source" : "apache", "extensions" : ["hdf"]}, "application/x-httpd-php" : { "compressible" : true, "extensions" : ["php"]}, "application/x-install-instructions" : { "source" : "apache", "extensions" : ["install"]}, "application/x-iso9660-image" : { "source" : "apache", "extensions" : ["iso"]}, "application/x-java-archive-diff" : { "source" : "nginx", "extensions" : ["jardiff"]}, "application/x-java-jnlp-file" : { "source" : "apache", "compressible" : false, "extensions" : ["jnlp"]}, "application/x-javascript" : { "compressible" : true}, "application/x-latex" : { "source" : "apache", "compressible" : false, "extensions" : ["latex"]}, "application/x-lua-bytecode" : { "extensions" : ["luac"]}, "application/x-lzh-compressed" : { "source" : "apache", "extensions" : ["lzh","lha"]}, "application/x-makeself" : { "source" : "nginx", "extensions" : ["run"]}, "application/x-mie" : { "source" : "apache", "extensions" : ["mie"]}, "application/x-mobipocket-ebook" : { "source" : "apache", "extensions" : ["prc","mobi"]}, "application/x-mpegurl" : { "compressible" : false}, "application/x-ms-application" : { "source" : "apache", "extensions" : ["application"]}, "application/x-ms-shortcut" : { "source" : "apache", "extensions" : ["lnk"]}, "application/x-ms-wmd" : { "source" : "apache", "extensions" : ["wmd"]}, "application/x-ms-wmz" : { "source" : "apache", "extensions" : ["wmz"]}, "application/x-ms-xbap" : { "source" : "apache", "extensions" : ["xbap"]}, "application/x-msaccess" : { "source" : "apache", "extensions" : ["mdb"]}, "application/x-msbinder" : { "source" : "apache", "extensions" : ["obd"]}, "application/x-mscardfile" : { "source" : "apache", "extensions" : ["crd"]}, "application/x-msclip" : { "source" : "apache", "extensions" : ["clp"]}, "application/x-msdos-program" : { "extensions" : ["exe"]}, "application/x-msdownload" : { "source" : "apache", "extensions" : ["exe","dll","com","bat","msi"]}, "application/x-msmediaview" : { "source" : "apache", "extensions" : ["mvb","m13","m14"]}, "application/x-msmetafile" : { "source" : "apache", "extensions" : ["wmf","wmz","emf","emz"]}, "application/x-msmoney" : { "source" : "apache", "extensions" : ["mny"]}, "application/x-mspublisher" : { "source" : "apache", "extensions" : ["pub"]}, "application/x-msschedule" : { "source" : "apache", "extensions" : ["scd"]}, "application/x-msterminal" : { "source" : "apache", "extensions" : ["trm"]}, "application/x-mswrite" : { "source" : "apache", "extensions" : ["wri"]}, "application/x-netcdf" : { "source" : "apache", "extensions" : ["nc","cdf"]}, "application/x-ns-proxy-autoconfig" : { "compressible" : true, "extensions" : ["pac"]}, "application/x-nzb" : { "source" : "apache", "extensions" : ["nzb"]}, "application/x-perl" : { "source" : "nginx", "extensions" : ["pl","pm"]}, "application/x-pilot" : { "source" : "nginx", "extensions" : ["prc","pdb"]}, "application/x-pkcs12" : { "source" : "apache", "compressible" : false, "extensions" : ["p12","pfx"]}, "application/x-pkcs7-certificates" : { "source" : "apache", "extensions" : ["p7b","spc"]}, "application/x-pkcs7-certreqresp" : { "source" : "apache", "extensions" : ["p7r"]}, "application/x-rar-compressed" : { "source" : "apache", "compressible" : false, "extensions" : ["rar"]}, "application/x-redhat-package-manager" : { "source" : "nginx", "extensions" : ["rpm"]}, "application/x-research-info-systems" : { "source" : "apache", "extensions" : ["ris"]}, "application/x-sea" : { "source" : "nginx", "extensions" : ["sea"]}, "application/x-sh" : { "source" : "apache", "compressible" : true, "extensions" : ["sh"]}, "application/x-shar" : { "source" : "apache", "extensions" : ["shar"]}, "application/x-shockwave-flash" : { "source" : "apache", "compressible" : false, "extensions" : ["swf"]}, "application/x-silverlight-app" : { "source" : "apache", "extensions" : ["xap"]}, "application/x-sql" : { "source" : "apache", "extensions" : ["sql"]}, "application/x-stuffit" : { "source" : "apache", "compressible" : false, "extensions" : ["sit"]}, "application/x-stuffitx" : { "source" : "apache", "extensions" : ["sitx"]}, "application/x-subrip" : { "source" : "apache", "extensions" : ["srt"]}, "application/x-sv4cpio" : { "source" : "apache", "extensions" : ["sv4cpio"]}, "application/x-sv4crc" : { "source" : "apache", "extensions" : ["sv4crc"]}, "application/x-t3vm-image" : { "source" : "apache", "extensions" : ["t3"]}, "application/x-tads" : { "source" : "apache", "extensions" : ["gam"]}, "application/x-tar" : { "source" : "apache", "compressible" : true, "extensions" : ["tar"]}, "application/x-tcl" : { "source" : "apache", "extensions" : ["tcl","tk"]}, "application/x-tex" : { "source" : "apache", "extensions" : ["tex"]}, "application/x-tex-tfm" : { "source" : "apache", "extensions" : ["tfm"]}, "application/x-texinfo" : { "source" : "apache", "extensions" : ["texinfo","texi"]}, "application/x-tgif" : { "source" : "apache", "extensions" : ["obj"]}, "application/x-ustar" : { "source" : "apache", "extensions" : ["ustar"]}, "application/x-virtualbox-hdd" : { "compressible" : true, "extensions" : ["hdd"]}, "application/x-virtualbox-ova" : { "compressible" : true, "extensions" : ["ova"]}, "application/x-virtualbox-ovf" : { "compressible" : true, "extensions" : ["ovf"]}, "application/x-virtualbox-vbox" : { "compressible" : true, "extensions" : ["vbox"]}, "application/x-virtualbox-vbox-extpack" : { "compressible" : false, "extensions" : ["vbox-extpack"]}, "application/x-virtualbox-vdi" : { "compressible" : true, "extensions" : ["vdi"]}, "application/x-virtualbox-vhd" : { "compressible" : true, "extensions" : ["vhd"]}, "application/x-virtualbox-vmdk" : { "compressible" : true, "extensions" : ["vmdk"]}, "application/x-wais-source" : { "source" : "apache", "extensions" : ["src"]}, "application/x-web-app-manifest+json" : { "compressible" : true, "extensions" : ["webapp"]}, "application/x-www-form-urlencoded" : { "source" : "iana", "compressible" : true}, "application/x-x509-ca-cert" : { "source" : "apache", "extensions" : ["der","crt","pem"]}, "application/x-xfig" : { "source" : "apache", "extensions" : ["fig"]}, "application/x-xliff+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["xlf"]}, "application/x-xpinstall" : { "source" : "apache", "compressible" : false, "extensions" : ["xpi"]}, "application/x-xz" : { "source" : "apache", "extensions" : ["xz"]}, "application/x-zmachine" : { "source" : "apache", "extensions" : ["z1","z2","z3","z4","z5","z6","z7","z8"]}, "application/x400-bp" : { "source" : "iana"}, "application/xacml+xml" : { "source" : "iana", "compressible" : true}, "application/xaml+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["xaml"]}, "application/xcap-att+xml" : { "source" : "iana", "compressible" : true}, "application/xcap-caps+xml" : { "source" : "iana", "compressible" : true}, "application/xcap-diff+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xdf"]}, "application/xcap-el+xml" : { "source" : "iana", "compressible" : true}, "application/xcap-error+xml" : { "source" : "iana", "compressible" : true}, "application/xcap-ns+xml" : { "source" : "iana", "compressible" : true}, "application/xcon-conference-info+xml" : { "source" : "iana", "compressible" : true}, "application/xcon-conference-info-diff+xml" : { "source" : "iana", "compressible" : true}, "application/xenc+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xenc"]}, "application/xhtml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xhtml","xht"]}, "application/xhtml-voice+xml" : { "source" : "apache", "compressible" : true}, "application/xliff+xml" : { "source" : "iana", "compressible" : true}, "application/xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xml","xsl","xsd","rng"]}, "application/xml-dtd" : { "source" : "iana", "compressible" : true, "extensions" : ["dtd"]}, "application/xml-external-parsed-entity" : { "source" : "iana"}, "application/xml-patch+xml" : { "source" : "iana", "compressible" : true}, "application/xmpp+xml" : { "source" : "iana", "compressible" : true}, "application/xop+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xop"]}, "application/xproc+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["xpl"]}, "application/xslt+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xslt"]}, "application/xspf+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["xspf"]}, "application/xv+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mxml","xhvml","xvml","xvm"]}, "application/yang" : { "source" : "iana", "extensions" : ["yang"]}, "application/yang-data+json" : { "source" : "iana", "compressible" : true}, "application/yang-data+xml" : { "source" : "iana", "compressible" : true}, "application/yang-patch+json" : { "source" : "iana", "compressible" : true}, "application/yang-patch+xml" : { "source" : "iana", "compressible" : true}, "application/yin+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["yin"]}, "application/zip" : { "source" : "iana", "compressible" : false, "extensions" : ["zip"]}, "application/zlib" : { "source" : "iana"}, "application/zstd" : { "source" : "iana"}, "audio/1d-interleaved-parityfec" : { "source" : "iana"}, "audio/32kadpcm" : { "source" : "iana"}, "audio/3gpp" : { "source" : "iana", "compressible" : false, "extensions" : ["3gpp"]}, "audio/3gpp2" : { "source" : "iana"}, "audio/aac" : { "source" : "iana"}, "audio/ac3" : { "source" : "iana"}, "audio/adpcm" : { "source" : "apache", "extensions" : ["adp"]}, "audio/amr" : { "source" : "iana"}, "audio/amr-wb" : { "source" : "iana"}, "audio/amr-wb+" : { "source" : "iana"}, "audio/aptx" : { "source" : "iana"}, "audio/asc" : { "source" : "iana"}, "audio/atrac-advanced-lossless" : { "source" : "iana"}, "audio/atrac-x" : { "source" : "iana"}, "audio/atrac3" : { "source" : "iana"}, "audio/basic" : { "source" : "iana", "compressible" : false, "extensions" : ["au","snd"]}, "audio/bv16" : { "source" : "iana"}, "audio/bv32" : { "source" : "iana"}, "audio/clearmode" : { "source" : "iana"}, "audio/cn" : { "source" : "iana"}, "audio/dat12" : { "source" : "iana"}, "audio/dls" : { "source" : "iana"}, "audio/dsr-es201108" : { "source" : "iana"}, "audio/dsr-es202050" : { "source" : "iana"}, "audio/dsr-es202211" : { "source" : "iana"}, "audio/dsr-es202212" : { "source" : "iana"}, "audio/dv" : { "source" : "iana"}, "audio/dvi4" : { "source" : "iana"}, "audio/eac3" : { "source" : "iana"}, "audio/encaprtp" : { "source" : "iana"}, "audio/evrc" : { "source" : "iana"}, "audio/evrc-qcp" : { "source" : "iana"}, "audio/evrc0" : { "source" : "iana"}, "audio/evrc1" : { "source" : "iana"}, "audio/evrcb" : { "source" : "iana"}, "audio/evrcb0" : { "source" : "iana"}, "audio/evrcb1" : { "source" : "iana"}, "audio/evrcnw" : { "source" : "iana"}, "audio/evrcnw0" : { "source" : "iana"}, "audio/evrcnw1" : { "source" : "iana"}, "audio/evrcwb" : { "source" : "iana"}, "audio/evrcwb0" : { "source" : "iana"}, "audio/evrcwb1" : { "source" : "iana"}, "audio/evs" : { "source" : "iana"}, "audio/fwdred" : { "source" : "iana"}, "audio/g711-0" : { "source" : "iana"}, "audio/g719" : { "source" : "iana"}, "audio/g722" : { "source" : "iana"}, "audio/g7221" : { "source" : "iana"}, "audio/g723" : { "source" : "iana"}, "audio/g726-16" : { "source" : "iana"}, "audio/g726-24" : { "source" : "iana"}, "audio/g726-32" : { "source" : "iana"}, "audio/g726-40" : { "source" : "iana"}, "audio/g728" : { "source" : "iana"}, "audio/g729" : { "source" : "iana"}, "audio/g7291" : { "source" : "iana"}, "audio/g729d" : { "source" : "iana"}, "audio/g729e" : { "source" : "iana"}, "audio/gsm" : { "source" : "iana"}, "audio/gsm-efr" : { "source" : "iana"}, "audio/gsm-hr-08" : { "source" : "iana"}, "audio/ilbc" : { "source" : "iana"}, "audio/ip-mr_v2.5" : { "source" : "iana"}, "audio/isac" : { "source" : "apache"}, "audio/l16" : { "source" : "iana"}, "audio/l20" : { "source" : "iana"}, "audio/l24" : { "source" : "iana", "compressible" : false}, "audio/l8" : { "source" : "iana"}, "audio/lpc" : { "source" : "iana"}, "audio/melp" : { "source" : "iana"}, "audio/melp1200" : { "source" : "iana"}, "audio/melp2400" : { "source" : "iana"}, "audio/melp600" : { "source" : "iana"}, "audio/midi" : { "source" : "apache", "extensions" : ["mid","midi","kar","rmi"]}, "audio/mobile-xmf" : { "source" : "iana"}, "audio/mp3" : { "compressible" : false, "extensions" : ["mp3"]}, "audio/mp4" : { "source" : "iana", "compressible" : false, "extensions" : ["m4a","mp4a"]}, "audio/mp4a-latm" : { "source" : "iana"}, "audio/mpa" : { "source" : "iana"}, "audio/mpa-robust" : { "source" : "iana"}, "audio/mpeg" : { "source" : "iana", "compressible" : false, "extensions" : ["mpga","mp2","mp2a","mp3","m2a","m3a"]}, "audio/mpeg4-generic" : { "source" : "iana"}, "audio/musepack" : { "source" : "apache"}, "audio/ogg" : { "source" : "iana", "compressible" : false, "extensions" : ["oga","ogg","spx"]}, "audio/opus" : { "source" : "iana"}, "audio/parityfec" : { "source" : "iana"}, "audio/pcma" : { "source" : "iana"}, "audio/pcma-wb" : { "source" : "iana"}, "audio/pcmu" : { "source" : "iana"}, "audio/pcmu-wb" : { "source" : "iana"}, "audio/prs.sid" : { "source" : "iana"}, "audio/qcelp" : { "source" : "iana"}, "audio/raptorfec" : { "source" : "iana"}, "audio/red" : { "source" : "iana"}, "audio/rtp-enc-aescm128" : { "source" : "iana"}, "audio/rtp-midi" : { "source" : "iana"}, "audio/rtploopback" : { "source" : "iana"}, "audio/rtx" : { "source" : "iana"}, "audio/s3m" : { "source" : "apache", "extensions" : ["s3m"]}, "audio/silk" : { "source" : "apache", "extensions" : ["sil"]}, "audio/smv" : { "source" : "iana"}, "audio/smv-qcp" : { "source" : "iana"}, "audio/smv0" : { "source" : "iana"}, "audio/sp-midi" : { "source" : "iana"}, "audio/speex" : { "source" : "iana"}, "audio/t140c" : { "source" : "iana"}, "audio/t38" : { "source" : "iana"}, "audio/telephone-event" : { "source" : "iana"}, "audio/tetra_acelp" : { "source" : "iana"}, "audio/tone" : { "source" : "iana"}, "audio/uemclip" : { "source" : "iana"}, "audio/ulpfec" : { "source" : "iana"}, "audio/usac" : { "source" : "iana"}, "audio/vdvi" : { "source" : "iana"}, "audio/vmr-wb" : { "source" : "iana"}, "audio/vnd.3gpp.iufp" : { "source" : "iana"}, "audio/vnd.4sb" : { "source" : "iana"}, "audio/vnd.audiokoz" : { "source" : "iana"}, "audio/vnd.celp" : { "source" : "iana"}, "audio/vnd.cisco.nse" : { "source" : "iana"}, "audio/vnd.cmles.radio-events" : { "source" : "iana"}, "audio/vnd.cns.anp1" : { "source" : "iana"}, "audio/vnd.cns.inf1" : { "source" : "iana"}, "audio/vnd.dece.audio" : { "source" : "iana", "extensions" : ["uva","uvva"]}, "audio/vnd.digital-winds" : { "source" : "iana", "extensions" : ["eol"]}, "audio/vnd.dlna.adts" : { "source" : "iana"}, "audio/vnd.dolby.heaac.1" : { "source" : "iana"}, "audio/vnd.dolby.heaac.2" : { "source" : "iana"}, "audio/vnd.dolby.mlp" : { "source" : "iana"}, "audio/vnd.dolby.mps" : { "source" : "iana"}, "audio/vnd.dolby.pl2" : { "source" : "iana"}, "audio/vnd.dolby.pl2x" : { "source" : "iana"}, "audio/vnd.dolby.pl2z" : { "source" : "iana"}, "audio/vnd.dolby.pulse.1" : { "source" : "iana"}, "audio/vnd.dra" : { "source" : "iana", "extensions" : ["dra"]}, "audio/vnd.dts" : { "source" : "iana", "extensions" : ["dts"]}, "audio/vnd.dts.hd" : { "source" : "iana", "extensions" : ["dtshd"]}, "audio/vnd.dts.uhd" : { "source" : "iana"}, "audio/vnd.dvb.file" : { "source" : "iana"}, "audio/vnd.everad.plj" : { "source" : "iana"}, "audio/vnd.hns.audio" : { "source" : "iana"}, "audio/vnd.lucent.voice" : { "source" : "iana", "extensions" : ["lvp"]}, "audio/vnd.ms-playready.media.pya" : { "source" : "iana", "extensions" : ["pya"]}, "audio/vnd.nokia.mobile-xmf" : { "source" : "iana"}, "audio/vnd.nortel.vbk" : { "source" : "iana"}, "audio/vnd.nuera.ecelp4800" : { "source" : "iana", "extensions" : ["ecelp4800"]}, "audio/vnd.nuera.ecelp7470" : { "source" : "iana", "extensions" : ["ecelp7470"]}, "audio/vnd.nuera.ecelp9600" : { "source" : "iana", "extensions" : ["ecelp9600"]}, "audio/vnd.octel.sbc" : { "source" : "iana"}, "audio/vnd.presonus.multitrack" : { "source" : "iana"}, "audio/vnd.qcelp" : { "source" : "iana"}, "audio/vnd.rhetorex.32kadpcm" : { "source" : "iana"}, "audio/vnd.rip" : { "source" : "iana", "extensions" : ["rip"]}, "audio/vnd.rn-realaudio" : { "compressible" : false}, "audio/vnd.sealedmedia.softseal.mpeg" : { "source" : "iana"}, "audio/vnd.vmx.cvsd" : { "source" : "iana"}, "audio/vnd.wave" : { "compressible" : false}, "audio/vorbis" : { "source" : "iana", "compressible" : false}, "audio/vorbis-config" : { "source" : "iana"}, "audio/wav" : { "compressible" : false, "extensions" : ["wav"]}, "audio/wave" : { "compressible" : false, "extensions" : ["wav"]}, "audio/webm" : { "source" : "apache", "compressible" : false, "extensions" : ["weba"]}, "audio/x-aac" : { "source" : "apache", "compressible" : false, "extensions" : ["aac"]}, "audio/x-aiff" : { "source" : "apache", "extensions" : ["aif","aiff","aifc"]}, "audio/x-caf" : { "source" : "apache", "compressible" : false, "extensions" : ["caf"]}, "audio/x-flac" : { "source" : "apache", "extensions" : ["flac"]}, "audio/x-m4a" : { "source" : "nginx", "extensions" : ["m4a"]}, "audio/x-matroska" : { "source" : "apache", "extensions" : ["mka"]}, "audio/x-mpegurl" : { "source" : "apache", "extensions" : ["m3u"]}, "audio/x-ms-wax" : { "source" : "apache", "extensions" : ["wax"]}, "audio/x-ms-wma" : { "source" : "apache", "extensions" : ["wma"]}, "audio/x-pn-realaudio" : { "source" : "apache", "extensions" : ["ram","ra"]}, "audio/x-pn-realaudio-plugin" : { "source" : "apache", "extensions" : ["rmp"]}, "audio/x-realaudio" : { "source" : "nginx", "extensions" : ["ra"]}, "audio/x-tta" : { "source" : "apache"}, "audio/x-wav" : { "source" : "apache", "extensions" : ["wav"]}, "audio/xm" : { "source" : "apache", "extensions" : ["xm"]}, "chemical/x-cdx" : { "source" : "apache", "extensions" : ["cdx"]}, "chemical/x-cif" : { "source" : "apache", "extensions" : ["cif"]}, "chemical/x-cmdf" : { "source" : "apache", "extensions" : ["cmdf"]}, "chemical/x-cml" : { "source" : "apache", "extensions" : ["cml"]}, "chemical/x-csml" : { "source" : "apache", "extensions" : ["csml"]}, "chemical/x-pdb" : { "source" : "apache"}, "chemical/x-xyz" : { "source" : "apache", "extensions" : ["xyz"]}, "font/collection" : { "source" : "iana", "extensions" : ["ttc"]}, "font/otf" : { "source" : "iana", "compressible" : true, "extensions" : ["otf"]}, "font/sfnt" : { "source" : "iana"}, "font/ttf" : { "source" : "iana", "extensions" : ["ttf"]}, "font/woff" : { "source" : "iana", "extensions" : ["woff"]}, "font/woff2" : { "source" : "iana", "extensions" : ["woff2"]}, "image/aces" : { "source" : "iana", "extensions" : ["exr"]}, "image/apng" : { "compressible" : false, "extensions" : ["apng"]}, "image/avci" : { "source" : "iana"}, "image/avcs" : { "source" : "iana"}, "image/bmp" : { "source" : "iana", "compressible" : true, "extensions" : ["bmp"]}, "image/cgm" : { "source" : "iana", "extensions" : ["cgm"]}, "image/dicom-rle" : { "source" : "iana", "extensions" : ["drle"]}, "image/emf" : { "source" : "iana", "extensions" : ["emf"]}, "image/fits" : { "source" : "iana", "extensions" : ["fits"]}, "image/g3fax" : { "source" : "iana", "extensions" : ["g3"]}, "image/gif" : { "source" : "iana", "compressible" : false, "extensions" : ["gif"]}, "image/heic" : { "source" : "iana", "extensions" : ["heic"]}, "image/heic-sequence" : { "source" : "iana", "extensions" : ["heics"]}, "image/heif" : { "source" : "iana", "extensions" : ["heif"]}, "image/heif-sequence" : { "source" : "iana", "extensions" : ["heifs"]}, "image/ief" : { "source" : "iana", "extensions" : ["ief"]}, "image/jls" : { "source" : "iana", "extensions" : ["jls"]}, "image/jp2" : { "source" : "iana", "compressible" : false, "extensions" : ["jp2","jpg2"]}, "image/jpeg" : { "source" : "iana", "compressible" : false, "extensions" : ["jpeg","jpg","jpe"]}, "image/jpm" : { "source" : "iana", "compressible" : false, "extensions" : ["jpm"]}, "image/jpx" : { "source" : "iana", "compressible" : false, "extensions" : ["jpx","jpf"]}, "image/ktx" : { "source" : "iana", "extensions" : ["ktx"]}, "image/naplps" : { "source" : "iana"}, "image/pjpeg" : { "compressible" : false}, "image/png" : { "source" : "iana", "compressible" : false, "extensions" : ["png"]}, "image/prs.btif" : { "source" : "iana", "extensions" : ["btif"]}, "image/prs.pti" : { "source" : "iana", "extensions" : ["pti"]}, "image/pwg-raster" : { "source" : "iana"}, "image/sgi" : { "source" : "apache", "extensions" : ["sgi"]}, "image/svg+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["svg","svgz"]}, "image/t38" : { "source" : "iana", "extensions" : ["t38"]}, "image/tiff" : { "source" : "iana", "compressible" : false, "extensions" : ["tif","tiff"]}, "image/tiff-fx" : { "source" : "iana", "extensions" : ["tfx"]}, "image/vnd.adobe.photoshop" : { "source" : "iana", "compressible" : true, "extensions" : ["psd"]}, "image/vnd.airzip.accelerator.azv" : { "source" : "iana", "extensions" : ["azv"]}, "image/vnd.cns.inf2" : { "source" : "iana"}, "image/vnd.dece.graphic" : { "source" : "iana", "extensions" : ["uvi","uvvi","uvg","uvvg"]}, "image/vnd.djvu" : { "source" : "iana", "extensions" : ["djvu","djv"]}, "image/vnd.dvb.subtitle" : { "source" : "iana", "extensions" : ["sub"]}, "image/vnd.dwg" : { "source" : "iana", "extensions" : ["dwg"]}, "image/vnd.dxf" : { "source" : "iana", "extensions" : ["dxf"]}, "image/vnd.fastbidsheet" : { "source" : "iana", "extensions" : ["fbs"]}, "image/vnd.fpx" : { "source" : "iana", "extensions" : ["fpx"]}, "image/vnd.fst" : { "source" : "iana", "extensions" : ["fst"]}, "image/vnd.fujixerox.edmics-mmr" : { "source" : "iana", "extensions" : ["mmr"]}, "image/vnd.fujixerox.edmics-rlc" : { "source" : "iana", "extensions" : ["rlc"]}, "image/vnd.globalgraphics.pgb" : { "source" : "iana"}, "image/vnd.microsoft.icon" : { "source" : "iana", "extensions" : ["ico"]}, "image/vnd.mix" : { "source" : "iana"}, "image/vnd.mozilla.apng" : { "source" : "iana"}, "image/vnd.ms-modi" : { "source" : "iana", "extensions" : ["mdi"]}, "image/vnd.ms-photo" : { "source" : "apache", "extensions" : ["wdp"]}, "image/vnd.net-fpx" : { "source" : "iana", "extensions" : ["npx"]}, "image/vnd.radiance" : { "source" : "iana"}, "image/vnd.sealed.png" : { "source" : "iana"}, "image/vnd.sealedmedia.softseal.gif" : { "source" : "iana"}, "image/vnd.sealedmedia.softseal.jpg" : { "source" : "iana"}, "image/vnd.svf" : { "source" : "iana"}, "image/vnd.tencent.tap" : { "source" : "iana", "extensions" : ["tap"]}, "image/vnd.valve.source.texture" : { "source" : "iana", "extensions" : ["vtf"]}, "image/vnd.wap.wbmp" : { "source" : "iana", "extensions" : ["wbmp"]}, "image/vnd.xiff" : { "source" : "iana", "extensions" : ["xif"]}, "image/vnd.zbrush.pcx" : { "source" : "iana", "extensions" : ["pcx"]}, "image/webp" : { "source" : "apache", "extensions" : ["webp"]}, "image/wmf" : { "source" : "iana", "extensions" : ["wmf"]}, "image/x-3ds" : { "source" : "apache", "extensions" : ["3ds"]}, "image/x-cmu-raster" : { "source" : "apache", "extensions" : ["ras"]}, "image/x-cmx" : { "source" : "apache", "extensions" : ["cmx"]}, "image/x-freehand" : { "source" : "apache", "extensions" : ["fh","fhc","fh4","fh5","fh7"]}, "image/x-icon" : { "source" : "apache", "compressible" : true, "extensions" : ["ico"]}, "image/x-jng" : { "source" : "nginx", "extensions" : ["jng"]}, "image/x-mrsid-image" : { "source" : "apache", "extensions" : ["sid"]}, "image/x-ms-bmp" : { "source" : "nginx", "compressible" : true, "extensions" : ["bmp"]}, "image/x-pcx" : { "source" : "apache", "extensions" : ["pcx"]}, "image/x-pict" : { "source" : "apache", "extensions" : ["pic","pct"]}, "image/x-portable-anymap" : { "source" : "apache", "extensions" : ["pnm"]}, "image/x-portable-bitmap" : { "source" : "apache", "extensions" : ["pbm"]}, "image/x-portable-graymap" : { "source" : "apache", "extensions" : ["pgm"]}, "image/x-portable-pixmap" : { "source" : "apache", "extensions" : ["ppm"]}, "image/x-rgb" : { "source" : "apache", "extensions" : ["rgb"]}, "image/x-tga" : { "source" : "apache", "extensions" : ["tga"]}, "image/x-xbitmap" : { "source" : "apache", "extensions" : ["xbm"]}, "image/x-xcf" : { "compressible" : false}, "image/x-xpixmap" : { "source" : "apache", "extensions" : ["xpm"]}, "image/x-xwindowdump" : { "source" : "apache", "extensions" : ["xwd"]}, "message/cpim" : { "source" : "iana"}, "message/delivery-status" : { "source" : "iana"}, "message/disposition-notification" : { "source" : "iana", "extensions" : ["disposition-notification"]}, "message/external-body" : { "source" : "iana"}, "message/feedback-report" : { "source" : "iana"}, "message/global" : { "source" : "iana", "extensions" : ["u8msg"]}, "message/global-delivery-status" : { "source" : "iana", "extensions" : ["u8dsn"]}, "message/global-disposition-notification" : { "source" : "iana", "extensions" : ["u8mdn"]}, "message/global-headers" : { "source" : "iana", "extensions" : ["u8hdr"]}, "message/http" : { "source" : "iana", "compressible" : false}, "message/imdn+xml" : { "source" : "iana", "compressible" : true}, "message/news" : { "source" : "iana"}, "message/partial" : { "source" : "iana", "compressible" : false}, "message/rfc822" : { "source" : "iana", "compressible" : true, "extensions" : ["eml","mime"]}, "message/s-http" : { "source" : "iana"}, "message/sip" : { "source" : "iana"}, "message/sipfrag" : { "source" : "iana"}, "message/tracking-status" : { "source" : "iana"}, "message/vnd.si.simp" : { "source" : "iana"}, "message/vnd.wfa.wsc" : { "source" : "iana", "extensions" : ["wsc"]}, "model/3mf" : { "source" : "iana"}, "model/gltf+json" : { "source" : "iana", "compressible" : true, "extensions" : ["gltf"]}, "model/gltf-binary" : { "source" : "iana", "compressible" : true, "extensions" : ["glb"]}, "model/iges" : { "source" : "iana", "compressible" : false, "extensions" : ["igs","iges"]}, "model/mesh" : { "source" : "iana", "compressible" : false, "extensions" : ["msh","mesh","silo"]}, "model/stl" : { "source" : "iana"}, "model/vnd.collada+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["dae"]}, "model/vnd.dwf" : { "source" : "iana", "extensions" : ["dwf"]}, "model/vnd.flatland.3dml" : { "source" : "iana"}, "model/vnd.gdl" : { "source" : "iana", "extensions" : ["gdl"]}, "model/vnd.gs-gdl" : { "source" : "apache"}, "model/vnd.gs.gdl" : { "source" : "iana"}, "model/vnd.gtw" : { "source" : "iana", "extensions" : ["gtw"]}, "model/vnd.moml+xml" : { "source" : "iana", "compressible" : true}, "model/vnd.mts" : { "source" : "iana", "extensions" : ["mts"]}, "model/vnd.opengex" : { "source" : "iana"}, "model/vnd.parasolid.transmit.binary" : { "source" : "iana"}, "model/vnd.parasolid.transmit.text" : { "source" : "iana"}, "model/vnd.rosette.annotated-data-model" : { "source" : "iana"}, "model/vnd.usdz+zip" : { "source" : "iana", "compressible" : false}, "model/vnd.valve.source.compiled-map" : { "source" : "iana"}, "model/vnd.vtu" : { "source" : "iana", "extensions" : ["vtu"]}, "model/vrml" : { "source" : "iana", "compressible" : false, "extensions" : ["wrl","vrml"]}, "model/x3d+binary" : { "source" : "apache", "compressible" : false, "extensions" : ["x3db","x3dbz"]}, "model/x3d+fastinfoset" : { "source" : "iana"}, "model/x3d+vrml" : { "source" : "apache", "compressible" : false, "extensions" : ["x3dv","x3dvz"]}, "model/x3d+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["x3d","x3dz"]}, "model/x3d-vrml" : { "source" : "iana"}, "multipart/alternative" : { "source" : "iana", "compressible" : false}, "multipart/appledouble" : { "source" : "iana"}, "multipart/byteranges" : { "source" : "iana"}, "multipart/digest" : { "source" : "iana"}, "multipart/encrypted" : { "source" : "iana", "compressible" : false}, "multipart/form-data" : { "source" : "iana", "compressible" : false}, "multipart/header-set" : { "source" : "iana"}, "multipart/mixed" : { "source" : "iana", "compressible" : false}, "multipart/multilingual" : { "source" : "iana"}, "multipart/parallel" : { "source" : "iana"}, "multipart/related" : { "source" : "iana", "compressible" : false}, "multipart/report" : { "source" : "iana"}, "multipart/signed" : { "source" : "iana", "compressible" : false}, "multipart/vnd.bint.med-plus" : { "source" : "iana"}, "multipart/voice-message" : { "source" : "iana"}, "multipart/x-mixed-replace" : { "source" : "iana"}, "text/1d-interleaved-parityfec" : { "source" : "iana"}, "text/cache-manifest" : { "source" : "iana", "compressible" : true, "extensions" : ["appcache","manifest"]}, "text/calendar" : { "source" : "iana", "extensions" : ["ics","ifb"]}, "text/calender" : { "compressible" : true}, "text/cmd" : { "compressible" : true}, "text/coffeescript" : { "extensions" : ["coffee","litcoffee"]}, "text/css" : { "source" : "iana", "charset" : "UTF-8", "compressible" : true, "extensions" : ["css"]}, "text/csv" : { "source" : "iana", "compressible" : true, "extensions" : ["csv"]}, "text/csv-schema" : { "source" : "iana"}, "text/directory" : { "source" : "iana"}, "text/dns" : { "source" : "iana"}, "text/ecmascript" : { "source" : "iana"}, "text/encaprtp" : { "source" : "iana"}, "text/enriched" : { "source" : "iana"}, "text/fwdred" : { "source" : "iana"}, "text/grammar-ref-list" : { "source" : "iana"}, "text/html" : { "source" : "iana", "compressible" : true, "extensions" : ["html","htm","shtml"]}, "text/jade" : { "extensions" : ["jade"]}, "text/javascript" : { "source" : "iana", "compressible" : true}, "text/jcr-cnd" : { "source" : "iana"}, "text/jsx" : { "compressible" : true, "extensions" : ["jsx"]}, "text/less" : { "compressible" : true, "extensions" : ["less"]}, "text/markdown" : { "source" : "iana", "compressible" : true, "extensions" : ["markdown","md"]}, "text/mathml" : { "source" : "nginx", "extensions" : ["mml"]}, "text/mizar" : { "source" : "iana"}, "text/n3" : { "source" : "iana", "compressible" : true, "extensions" : ["n3"]}, "text/parameters" : { "source" : "iana"}, "text/parityfec" : { "source" : "iana"}, "text/plain" : { "source" : "iana", "compressible" : true, "extensions" : ["txt","text","conf","def","list","log","in","ini"]}, "text/provenance-notation" : { "source" : "iana"}, "text/prs.fallenstein.rst" : { "source" : "iana"}, "text/prs.lines.tag" : { "source" : "iana", "extensions" : ["dsc"]}, "text/prs.prop.logic" : { "source" : "iana"}, "text/raptorfec" : { "source" : "iana"}, "text/red" : { "source" : "iana"}, "text/rfc822-headers" : { "source" : "iana"}, "text/richtext" : { "source" : "iana", "compressible" : true, "extensions" : ["rtx"]}, "text/rtf" : { "source" : "iana", "compressible" : true, "extensions" : ["rtf"]}, "text/rtp-enc-aescm128" : { "source" : "iana"}, "text/rtploopback" : { "source" : "iana"}, "text/rtx" : { "source" : "iana"}, "text/sgml" : { "source" : "iana", "extensions" : ["sgml","sgm"]}, "text/shex" : { "extensions" : ["shex"]}, "text/slim" : { "extensions" : ["slim","slm"]}, "text/strings" : { "source" : "iana"}, "text/stylus" : { "extensions" : ["stylus","styl"]}, "text/t140" : { "source" : "iana"}, "text/tab-separated-values" : { "source" : "iana", "compressible" : true, "extensions" : ["tsv"]}, "text/troff" : { "source" : "iana", "extensions" : ["t","tr","roff","man","me","ms"]}, "text/turtle" : { "source" : "iana", "charset" : "UTF-8", "extensions" : ["ttl"]}, "text/ulpfec" : { "source" : "iana"}, "text/uri-list" : { "source" : "iana", "compressible" : true, "extensions" : ["uri","uris","urls"]}, "text/vcard" : { "source" : "iana", "compressible" : true, "extensions" : ["vcard"]}, "text/vnd.a" : { "source" : "iana"}, "text/vnd.abc" : { "source" : "iana"}, "text/vnd.ascii-art" : { "source" : "iana"}, "text/vnd.curl" : { "source" : "iana", "extensions" : ["curl"]}, "text/vnd.curl.dcurl" : { "source" : "apache", "extensions" : ["dcurl"]}, "text/vnd.curl.mcurl" : { "source" : "apache", "extensions" : ["mcurl"]}, "text/vnd.curl.scurl" : { "source" : "apache", "extensions" : ["scurl"]}, "text/vnd.debian.copyright" : { "source" : "iana"}, "text/vnd.dmclientscript" : { "source" : "iana"}, "text/vnd.dvb.subtitle" : { "source" : "iana", "extensions" : ["sub"]}, "text/vnd.esmertec.theme-descriptor" : { "source" : "iana"}, "text/vnd.fly" : { "source" : "iana", "extensions" : ["fly"]}, "text/vnd.fmi.flexstor" : { "source" : "iana", "extensions" : ["flx"]}, "text/vnd.gml" : { "source" : "iana"}, "text/vnd.graphviz" : { "source" : "iana", "extensions" : ["gv"]}, "text/vnd.hgl" : { "source" : "iana"}, "text/vnd.in3d.3dml" : { "source" : "iana", "extensions" : ["3dml"]}, "text/vnd.in3d.spot" : { "source" : "iana", "extensions" : ["spot"]}, "text/vnd.iptc.newsml" : { "source" : "iana"}, "text/vnd.iptc.nitf" : { "source" : "iana"}, "text/vnd.latex-z" : { "source" : "iana"}, "text/vnd.motorola.reflex" : { "source" : "iana"}, "text/vnd.ms-mediapackage" : { "source" : "iana"}, "text/vnd.net2phone.commcenter.command" : { "source" : "iana"}, "text/vnd.radisys.msml-basic-layout" : { "source" : "iana"}, "text/vnd.senx.warpscript" : { "source" : "iana"}, "text/vnd.si.uricatalogue" : { "source" : "iana"}, "text/vnd.sun.j2me.app-descriptor" : { "source" : "iana", "extensions" : ["jad"]}, "text/vnd.trolltech.linguist" : { "source" : "iana"}, "text/vnd.wap.si" : { "source" : "iana"}, "text/vnd.wap.sl" : { "source" : "iana"}, "text/vnd.wap.wml" : { "source" : "iana", "extensions" : ["wml"]}, "text/vnd.wap.wmlscript" : { "source" : "iana", "extensions" : ["wmls"]}, "text/vtt" : { "charset" : "UTF-8", "compressible" : true, "extensions" : ["vtt"]}, "text/x-asm" : { "source" : "apache", "extensions" : ["s","asm"]}, "text/x-c" : { "source" : "apache", "extensions" : ["c","cc","cxx","cpp","h","hh","dic"]}, "text/x-component" : { "source" : "nginx", "extensions" : ["htc"]}, "text/x-fortran" : { "source" : "apache", "extensions" : ["f","for","f77","f90"]}, "text/x-gwt-rpc" : { "compressible" : true}, "text/x-handlebars-template" : { "extensions" : ["hbs"]}, "text/x-java-source" : { "source" : "apache", "extensions" : ["java"]}, "text/x-jquery-tmpl" : { "compressible" : true}, "text/x-lua" : { "extensions" : ["lua"]}, "text/x-markdown" : { "compressible" : true, "extensions" : ["mkd"]}, "text/x-nfo" : { "source" : "apache", "extensions" : ["nfo"]}, "text/x-opml" : { "source" : "apache", "extensions" : ["opml"]}, "text/x-org" : { "compressible" : true, "extensions" : ["org"]}, "text/x-pascal" : { "source" : "apache", "extensions" : ["p","pas"]}, "text/x-processing" : { "compressible" : true, "extensions" : ["pde"]}, "text/x-sass" : { "extensions" : ["sass"]}, "text/x-scss" : { "extensions" : ["scss"]}, "text/x-setext" : { "source" : "apache", "extensions" : ["etx"]}, "text/x-sfv" : { "source" : "apache", "extensions" : ["sfv"]}, "text/x-suse-ymp" : { "compressible" : true, "extensions" : ["ymp"]}, "text/x-uuencode" : { "source" : "apache", "extensions" : ["uu"]}, "text/x-vcalendar" : { "source" : "apache", "extensions" : ["vcs"]}, "text/x-vcard" : { "source" : "apache", "extensions" : ["vcf"]}, "text/xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xml"]}, "text/xml-external-parsed-entity" : { "source" : "iana"}, "text/yaml" : { "extensions" : ["yaml","yml"]}, "video/1d-interleaved-parityfec" : { "source" : "iana"}, "video/3gpp" : { "source" : "iana", "extensions" : ["3gp","3gpp"]}, "video/3gpp-tt" : { "source" : "iana"}, "video/3gpp2" : { "source" : "iana", "extensions" : ["3g2"]}, "video/bmpeg" : { "source" : "iana"}, "video/bt656" : { "source" : "iana"}, "video/celb" : { "source" : "iana"}, "video/dv" : { "source" : "iana"}, "video/encaprtp" : { "source" : "iana"}, "video/h261" : { "source" : "iana", "extensions" : ["h261"]}, "video/h263" : { "source" : "iana", "extensions" : ["h263"]}, "video/h263-1998" : { "source" : "iana"}, "video/h263-2000" : { "source" : "iana"}, "video/h264" : { "source" : "iana", "extensions" : ["h264"]}, "video/h264-rcdo" : { "source" : "iana"}, "video/h264-svc" : { "source" : "iana"}, "video/h265" : { "source" : "iana"}, "video/iso.segment" : { "source" : "iana"}, "video/jpeg" : { "source" : "iana", "extensions" : ["jpgv"]}, "video/jpeg2000" : { "source" : "iana"}, "video/jpm" : { "source" : "apache", "extensions" : ["jpm","jpgm"]}, "video/mj2" : { "source" : "iana", "extensions" : ["mj2","mjp2"]}, "video/mp1s" : { "source" : "iana"}, "video/mp2p" : { "source" : "iana"}, "video/mp2t" : { "source" : "iana", "extensions" : ["ts"]}, "video/mp4" : { "source" : "iana", "compressible" : false, "extensions" : ["mp4","mp4v","mpg4"]}, "video/mp4v-es" : { "source" : "iana"}, "video/mpeg" : { "source" : "iana", "compressible" : false, "extensions" : ["mpeg","mpg","mpe","m1v","m2v"]}, "video/mpeg4-generic" : { "source" : "iana"}, "video/mpv" : { "source" : "iana"}, "video/nv" : { "source" : "iana"}, "video/ogg" : { "source" : "iana", "compressible" : false, "extensions" : ["ogv"]}, "video/parityfec" : { "source" : "iana"}, "video/pointer" : { "source" : "iana"}, "video/quicktime" : { "source" : "iana", "compressible" : false, "extensions" : ["qt","mov"]}, "video/raptorfec" : { "source" : "iana"}, "video/raw" : { "source" : "iana"}, "video/rtp-enc-aescm128" : { "source" : "iana"}, "video/rtploopback" : { "source" : "iana"}, "video/rtx" : { "source" : "iana"}, "video/smpte291" : { "source" : "iana"}, "video/smpte292m" : { "source" : "iana"}, "video/ulpfec" : { "source" : "iana"}, "video/vc1" : { "source" : "iana"}, "video/vc2" : { "source" : "iana"}, "video/vnd.cctv" : { "source" : "iana"}, "video/vnd.dece.hd" : { "source" : "iana", "extensions" : ["uvh","uvvh"]}, "video/vnd.dece.mobile" : { "source" : "iana", "extensions" : ["uvm","uvvm"]}, "video/vnd.dece.mp4" : { "source" : "iana"}, "video/vnd.dece.pd" : { "source" : "iana", "extensions" : ["uvp","uvvp"]}, "video/vnd.dece.sd" : { "source" : "iana", "extensions" : ["uvs","uvvs"]}, "video/vnd.dece.video" : { "source" : "iana", "extensions" : ["uvv","uvvv"]}, "video/vnd.directv.mpeg" : { "source" : "iana"}, "video/vnd.directv.mpeg-tts" : { "source" : "iana"}, "video/vnd.dlna.mpeg-tts" : { "source" : "iana"}, "video/vnd.dvb.file" : { "source" : "iana", "extensions" : ["dvb"]}, "video/vnd.fvt" : { "source" : "iana", "extensions" : ["fvt"]}, "video/vnd.hns.video" : { "source" : "iana"}, "video/vnd.iptvforum.1dparityfec-1010" : { "source" : "iana"}, "video/vnd.iptvforum.1dparityfec-2005" : { "source" : "iana"}, "video/vnd.iptvforum.2dparityfec-1010" : { "source" : "iana"}, "video/vnd.iptvforum.2dparityfec-2005" : { "source" : "iana"}, "video/vnd.iptvforum.ttsavc" : { "source" : "iana"}, "video/vnd.iptvforum.ttsmpeg2" : { "source" : "iana"}, "video/vnd.motorola.video" : { "source" : "iana"}, "video/vnd.motorola.videop" : { "source" : "iana"}, "video/vnd.mpegurl" : { "source" : "iana", "extensions" : ["mxu","m4u"]}, "video/vnd.ms-playready.media.pyv" : { "source" : "iana", "extensions" : ["pyv"]}, "video/vnd.nokia.interleaved-multimedia" : { "source" : "iana"}, "video/vnd.nokia.mp4vr" : { "source" : "iana"}, "video/vnd.nokia.videovoip" : { "source" : "iana"}, "video/vnd.objectvideo" : { "source" : "iana"}, "video/vnd.radgamettools.bink" : { "source" : "iana"}, "video/vnd.radgamettools.smacker" : { "source" : "iana"}, "video/vnd.sealed.mpeg1" : { "source" : "iana"}, "video/vnd.sealed.mpeg4" : { "source" : "iana"}, "video/vnd.sealed.swf" : { "source" : "iana"}, "video/vnd.sealedmedia.softseal.mov" : { "source" : "iana"}, "video/vnd.uvvu.mp4" : { "source" : "iana", "extensions" : ["uvu","uvvu"]}, "video/vnd.vivo" : { "source" : "iana", "extensions" : ["viv"]}, "video/vp8" : { "source" : "iana"}, "video/webm" : { "source" : "apache", "compressible" : false, "extensions" : ["webm"]}, "video/x-f4v" : { "source" : "apache", "extensions" : ["f4v"]}, "video/x-fli" : { "source" : "apache", "extensions" : ["fli"]}, "video/x-flv" : { "source" : "apache", "compressible" : false, "extensions" : ["flv"]}, "video/x-m4v" : { "source" : "apache", "extensions" : ["m4v"]}, "video/x-matroska" : { "source" : "apache", "compressible" : false, "extensions" : ["mkv","mk3d","mks"]}, "video/x-mng" : { "source" : "apache", "extensions" : ["mng"]}, "video/x-ms-asf" : { "source" : "apache", "extensions" : ["asf","asx"]}, "video/x-ms-vob" : { "source" : "apache", "extensions" : ["vob"]}, "video/x-ms-wm" : { "source" : "apache", "extensions" : ["wm"]}, "video/x-ms-wmv" : { "source" : "apache", "compressible" : false, "extensions" : ["wmv"]}, "video/x-ms-wmx" : { "source" : "apache", "extensions" : ["wmx"]}, "video/x-ms-wvx" : { "source" : "apache", "extensions" : ["wvx"]}, "video/x-msvideo" : { "source" : "apache", "extensions" : ["avi"]}, "video/x-sgi-movie" : { "source" : "apache", "extensions" : ["movie"]}, "video/x-smv" : { "source" : "apache", "extensions" : ["smv"]}, "x-conference/x-cooltalk" : { "source" : "apache", "extensions" : ["ice"]}, "x-shader/x-fragment" : { "compressible" : true}, "x-shader/x-vertex" : { "compressible" : true}};
tink__$Chunk_EmptyChunk.EMPTY = new haxe_io_Bytes(new ArrayBuffer(0));
tink_Chunk.EMPTY = new tink__$Chunk_EmptyChunk();
tink_Stringly.SUPPORTED_DATE_REGEX = new EReg("^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})(\\.\\d{3})?(Z|[\\+-]\\d{2}:\\d{2})$","");
tink_Url.SCHEME = 2;
tink_Url.PAYLOAD = 3;
tink_Url.AUTH = 6;
tink_Url.HOSTNAMES = 7;
tink_Url.PATH = 8;
tink_Url.QUERY = 10;
tink_Url.HASH = 12;
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
tink_core_AlreadyDisposed.INST = new tink_core_AlreadyDisposed();
tink_core_Future.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core_Future.NULL = tink_core_Future.NOISE;
tink_core_Future.NEVER = new tink_core__$Future_NeverFuture();
tink_core_Lazy.NOISE = new tink_core__$Lazy_LazyConst(null);
tink_core_Lazy.NULL = tink_core_Lazy.NOISE;
tink_core_Noise.Noise = null;
tink_core_ProgressValue.ZERO = new tink_core_MPair(0,haxe_ds_Option.None);
tink_core_Progress.INIT = tink_core_ProgressValue.ZERO;
tink_core_Promise.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core_Promise.NULL = tink_core_Promise.NOISE;
tink_core_Promise.NEVER = tink_core_Future.NEVER;
tink_core__$Signal_Disposed.INST = new tink_core__$Signal_Disposed();
tink_http_ChunkedParser.LINEBREAK = tink_chunk_Seekable.ofBytes(haxe_io_Bytes.ofString("\r\n"));
tink_http_HeaderValue.DAYS = "Sun,Mon,Tue,Wen,Thu,Fri,Sat".split(",");
tink_http_HeaderValue.MONTHS = "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(",");
tink_http_HeaderName.REFERER = "referer";
tink_http_HeaderName.HOST = "host";
tink_http_HeaderName.SET_COOKIE = "set-cookie";
tink_http_HeaderName.COOKIE = "cookie";
tink_http_HeaderName.CONTENT_TYPE = "content-type";
tink_http_HeaderName.CONTENT_LENGTH = "content-length";
tink_http_HeaderName.CONTENT_DISPOSITION = "content-disposition";
tink_http_HeaderName.CONTENT_RANGE = "content-range";
tink_http_HeaderName.ACCEPT = "accept";
tink_http_HeaderName.ACCEPT_ENCODING = "accept-encoding";
tink_http_HeaderName.TRANSFER_ENCODING = "transfer-encoding";
tink_http_HeaderName.RANGE = "range";
tink_http_HeaderName.LOCATION = "location";
tink_http_HeaderName.AUTHORIZATION = "authorization";
tink_http_HeaderName.ORIGIN = "origin";
tink_http_HeaderName.VARY = "vary";
tink_http_HeaderName.CACHE_CONTROL = "cache-control";
tink_http_HeaderName.EXPIRES = "expires";
tink_http_HeaderName.ACCESS_CONTROL_REQUEST_METHOD = "access-control-request-method";
tink_http_HeaderName.ACCESS_CONTROL_REQUEST_HEADERS = "access-control-request-headers";
tink_http_HeaderName.ACCESS_CONTROL_ALLOW_ORIGIN = "access-control-allow-origin";
tink_http_HeaderName.ACCESS_CONTROL_ALLOW_CREDENTIALS = "access-control-allow-credentials";
tink_http_HeaderName.ACCESS_CONTROL_EXPOSE_HEADERS = "access-control-expose-headers";
tink_http_HeaderName.ACCESS_CONTROL_MAX_AGE = "access-control-max-age";
tink_http_HeaderName.ACCESS_CONTROL_ALLOW_METHODS = "access-control-allow-methods";
tink_http_HeaderName.ACCESS_CONTROL_ALLOW_HEADERS = "access-control-allow-headers";
tink_http_HeaderParser.INVALID = tink_io_ParseStep.Failed(new tink_core_TypedError(422,"Invalid HTTP header",{ fileName : "tink/http/Header.hx", lineNumber : 310, className : "tink.http.HeaderParser", methodName : "INVALID"}));
tink_http_Method.GET = "GET";
tink_http_Method.HEAD = "HEAD";
tink_http_Method.OPTIONS = "OPTIONS";
tink_http_Method.POST = "POST";
tink_http_Method.PUT = "PUT";
tink_http_Method.PATCH = "PATCH";
tink_http_Method.DELETE = "DELETE";
tink_io__$Sink_Blackhole.inst = new tink_io__$Sink_Blackhole();
tink_io_SinkYielding.BLACKHOLE = tink_io__$Sink_Blackhole.inst;
tink_streams_Empty.inst = new tink_streams_Empty();
tink_io_Source.EMPTY = tink_streams_Empty.inst;
tink_io_Worker.EAGER = new tink_io__$Worker_EagerWorker();
tink_io_Worker.pool = [tink_io_Worker.EAGER];
tink_json_JsonString.BACKSLASH = "\\";
tink_json_BasicParser.DBQT = String.fromCodePoint(34);
tink_url_Path.root = "/";
tink_web_routing_Response.BINARY = "application/octet-stream";
Server.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
